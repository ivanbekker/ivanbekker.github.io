import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Label from '../Label';
import styles from './ToggleSwitch.style';

@injectSheet(styles)
class ToggleSwitch extends PureComponent {
  constructor(props) {
    super(props);
    this.handleChange = ::this.handleChange;
  }

  handleChange(e) {
    e.preventDefault();
    e.stopPropagation();
    const {id, value, visibility, onChange} = this.props;
    if (visibility === 'disabled') return;
    const error = false;
    onChange({id, value: !value, error});
  }

  // render helper message
  renderHelperText(error, helperText, classes) {
    if (!helperText) return null;
    return <Label className={cn(classes.helperText)} value={helperText} error={error}/>;
  }

  render() {
    const {classes, className, id, size, visibility, value, error, helperText} = this.props;

    return (
      <div id={id}>
        <div
          className={cn(
            className,
            classes.switchWrap,
            classes[size],
            {active: !!value},
            {disabled: visibility === 'disabled'},
            {hidden: visibility === 'hidden'},
            {error: !!error},
          )}
          onClick={this.handleChange}
        >
          <div className={cn(classes.switch, {active: !!value}, {error: !!error})}/>
        </div>
        {this.renderHelperText(error, helperText, classes)}
      </div>
    );
  }
}

ToggleSwitch.defaultProps = {
  visibility: 'visible',
  error: false,
  value: false,
  size: 'medium',
  onChange: () => {
  },
};

ToggleSwitch.propTypes = {
  classes: PropTypes.object,
  /** ToggleSwitch's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** Does ToggleSwitch has an error */
  error: PropTypes.bool,
  /** ToggleSwitch's helperText */
  helperText: PropTypes.string,
  /** ToggleSwitch's id */
  id: PropTypes.string,
  /** ToggleSwitch's value */
  value: PropTypes.bool,
  /** ToggleSwitch's size */
  size: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** onChange callback */
  onChange: PropTypes.func,
};

export default ToggleSwitch;
