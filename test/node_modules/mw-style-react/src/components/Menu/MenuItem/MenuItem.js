import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import cn from 'clsx';
import injectSheet from 'react-jss';
import styles from './MenuItem.style';
import Icon from '../../Icon';
import Label from '../../Label';
import Badge from '../../Badge';
import Avatar from '../../Avatar';

@injectSheet(styles)
class MenuItem extends PureComponent {
  constructor(props) {
    super(props);
    this.handleClick = ::this.handleClick;
  }

  handleClick() {
    const {value, visibility, onClick} = this.props;
    if (visibility === 'disabled') return;
    onClick(value);
  }

  renderChildren() {
    const {classes, size, children} = this.props;
    if (!children) return null;
    try {
      if (size === 'small') {
        throw new Error('Small menuItem should not contain a child');
      }
    } catch (e) {
      console.error(e); // eslint-disable-line no-console
      return null;
    }
    return <div className={cn(classes.labelContainerContent, classes.children)}>{children}</div>;
  }

  render() {
    const {
      id,
      classes,
      className,
      leftIcon,
      rightIcon,
      label,
      visibility,
      value,
      activeItem,
      badge,
      avatar,
      size,
    } = this.props;

    return (
      <div
        name={id}
        className={cn(
          className,
          classes.menuItem,
          classes[size],
          {hidden: visibility === 'hidden'},
          {disabled: visibility === 'disabled'},
          {active: activeItem === value},
        )}
        onClick={this.handleClick}
      >
        {avatar ? (
          <Avatar className={cn(classes.avatar)} label={value} src={avatar} size={size}/>
        ) : null}
        {leftIcon ? (
          <Icon className={cn(classes.icon, classes.iconLeft)} type={leftIcon} size="medium"/>
        ) : null}
        <div className={cn(classes.labelContainer)}>
          <Label className={cn(classes.labelContainerContent, classes.label)} value={label}/>
          {this.renderChildren()}
        </div>
        {badge ? <Badge className={cn(classes.badge)} value={badge} size="large"/> : null}
        {rightIcon ? (
          <Icon className={cn(classes.icon, classes.iconRight)} type={rightIcon} size="medium"/>
        ) : null}
      </div>
    );
  }
}

MenuItem.defaultProps = {
  id: null,
  value: null,
  visibility: 'visible',
  leftIcon: null,
  rightIcon: null,
  error: false,
  onClick: () => {
  },
  avatar: '',
  size: 'medium',
  children: null,
};

MenuItem.propTypes = {
  classes: PropTypes.object,
  /** additional external class name */
  className: PropTypes.string,
  /** menuItem's id */
  id: PropTypes.string,
  /** menuItem's value */
  value: PropTypes.string.isRequired,
  /** menuItem's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** menuItem's left icon */
  leftIcon: PropTypes.string,
  /** menuItem's right icon */
  rightIcon: PropTypes.string,
  /** menuItem's badge */
  badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** menuItem's label */
  label: PropTypes.string.isRequired,
  /** active item */
  activeItem: PropTypes.string,
  /** onClick callback */
  onClick: PropTypes.func,
  /** menuItem's avatar src */
  avatar: PropTypes.string,
  /** menuItem's size */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /** menuItem's second row */
  children: PropTypes.node,
};

export default MenuItem;
