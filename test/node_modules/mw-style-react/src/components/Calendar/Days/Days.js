/**
 * Дни месяца
 * */
import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Days.style';

@injectSheet(styles)
class Days extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      currentDate: {
        currentDay: new Date().getDate(),
        currentMonth: new Date().getMonth() + 1,
        currentYear: new Date().getFullYear(),
      },
    };
  }

  // Клик на дату
  handleClickDay(item) {
    const {onChange} = this.props;
    const {day, month, year, disabledDay} = item;
    if (disabledDay) return;
    // установка выбранной даты
    onChange({selectedDay: day, selectedMonth: month, selectedYear: year});
  }

  // Получить количиство дней в месяце (month, year)
  getCountDaysMonth(month, year) {
    return 33 - new Date(year, month - 1, 33).getDate();
  }

  render() {
    const {
      isoDays,
      classes,
      className,
      maxValue,
      minValue,
      viewDate,
      selectedDate,
      size,
    } = this.props;
    const {currentDate} = this.state;
    const {currentDay, currentMonth, currentYear} = currentDate;
    const {selectedDay, selectedMonth, selectedYear} = selectedDate;
    const month = viewDate.getMonth() + 1;
    const year = viewDate.getFullYear();
    const daysInMonth = this.getCountDaysMonth(month, year);
    const firstDay = new Date(year, month - 1, 1).getDay();
    const days = [];

    // Расчет дней в предидущем месяце с правкой на локализацию
    let countPrevDays;
    if (isoDays) {
      countPrevDays = firstDay === 0 ? firstDay + 5 : firstDay - 2;
    } else {
      countPrevDays = firstDay - 1;
    }

    // Дни в предидущем месяце
    const daysInPrevMonth = this.getCountDaysMonth(month - 1, year);
    for (let i = countPrevDays; i >= 0; i -= 1) {
      days.push({
        day: daysInPrevMonth - i,
        month: month - 1 === 0 ? 12 : month - 1,
        year: month - 1 === 0 ? year - 1 : year,
        actualMonth: false,
      });
    }

    // Дни в текущем месяце
    for (let i = 1; i <= daysInMonth; i += 1) {
      days.push({
        day: i,
        month,
        year,
        actualMonth: true,
      });
    }

    // Дни следующего месяца
    const countNextDays = days.length;
    for (let i = 1; i <= 42 - countNextDays; i += 1) {
      days.push({
        day: i,
        month: month + 1 === 13 ? 1 : month + 1,
        year: month + 1 === 13 ? year + 1 : year,
        actualMonth: false,
      });
    }

    return (
      <div className={cn(className, classes[size], classes.days)}>
        {days.map((item, index) => {
          const {actualMonth, day, month, year} = item;
          let disabledDay = false;
          if (
            (!!maxValue &&
              (year > maxValue.getFullYear() ||
                (year >= maxValue.getFullYear() && month - 1 > maxValue.getMonth()) ||
                (year >= maxValue.getFullYear() &&
                  month - 1 >= maxValue.getMonth() &&
                  day > maxValue.getDate()))) ||
            (!!minValue &&
              (year < minValue.getFullYear() ||
                (year <= minValue.getFullYear() && month - 1 < minValue.getMonth()) ||
                (year <= minValue.getFullYear() &&
                  month - 1 <= minValue.getMonth() &&
                  day < minValue.getDate())))
          ) {
            disabledDay = true;
          }
          const updatedItem = Object.assign({}, item, {disabledDay});
          return (
            <div
              key={index}
              className={cn(
                classes.day,
                {disabled: disabledDay},
                {
                  active: day === currentDay && month === currentMonth && year === currentYear,
                },
                {otherMonth: !actualMonth},
                {
                  selected:
                    day === selectedDay &&
                    month === selectedMonth &&
                    year === selectedYear &&
                    !disabledDay,
                },
              )}
              onClick={() => this.handleClickDay(updatedItem)}
            >
              {day}
            </div>
          );
        })}
      </div>
    );
  }
}

Days.propTypes = {
  classes: PropTypes.object,
  /** additional external class name */
  className: PropTypes.string,
  /** Days size */
  size: PropTypes.oneOf(['small', 'medium']).isRequired,
  /** Days first day of the week is Monday by ISO-8601 */
  isoDays: PropTypes.bool.isRequired,
  /** Days max date */
  maxValue: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]).isRequired,
  /** Days min date */
  minValue: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]).isRequired,
  /** Days callback */
  onChange: PropTypes.func.isRequired,
  /** Days selected date */
  selectedDate: PropTypes.shape({
    selectedDay: PropTypes.number, // eslint-disable-line react/no-unused-prop-types
    selectedMonth: PropTypes.number, // eslint-disable-line react/no-unused-prop-types
    selectedYear: PropTypes.number, // eslint-disable-line react/no-unused-prop-types
  }).isRequired,
  /** Days view date */
  viewDate: PropTypes.instanceOf(Date),
};

export default Days;
