'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class; /**
                   * Контейнер с выбором месяца и года
                   * */


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _PeriodChange = require('./PeriodChange.style');

var _PeriodChange2 = _interopRequireDefault(_PeriodChange);

var _Icon = require('../../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Label = require('../../Label');

var _Label2 = _interopRequireDefault(_Label);

var _dateUtils = require('../../utils/dateUtils');

var _dateUtils2 = _interopRequireDefault(_dateUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PeriodChange = (_dec = (0, _reactJss2.default)(_PeriodChange2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(PeriodChange, _PureComponent);

  function PeriodChange() {
    (0, _classCallCheck3.default)(this, PeriodChange);
    return (0, _possibleConstructorReturn3.default)(this, (PeriodChange.__proto__ || (0, _getPrototypeOf2.default)(PeriodChange)).apply(this, arguments));
  }

  (0, _createClass3.default)(PeriodChange, [{
    key: 'canNext',

    // Проверка можно ли листать месяц/год вперед
    value: function canNext(type) {
      var _props = this.props,
          viewDate = _props.viewDate,
          maxValue = _props.maxValue;

      if (!maxValue) return true;
      if (type === 'month') {
        return maxValue.getFullYear() > viewDate.getFullYear() || maxValue.getFullYear() >= viewDate.getFullYear() && maxValue.getMonth() > viewDate.getMonth();
      }
      return maxValue.getFullYear() > viewDate.getFullYear();
    }

    // Проверка можно ли листать месяц/год назад

  }, {
    key: 'canPrev',
    value: function canPrev(type) {
      var _props2 = this.props,
          viewDate = _props2.viewDate,
          minValue = _props2.minValue;

      if (!minValue) return true;
      if (type === 'month') {
        return minValue.getFullYear() < viewDate.getFullYear() || minValue.getFullYear() === viewDate.getFullYear() && minValue.getMonth() <= viewDate.getMonth() - 1;
      }
      return minValue.getFullYear() < viewDate.getFullYear();
    }

    // Переключение месяца

  }, {
    key: 'handleChangeMonth',
    value: function handleChangeMonth(direction) {
      var _props3 = this.props,
          viewDate = _props3.viewDate,
          onChange = _props3.onChange;

      var changedDate = new Date(viewDate);
      if (direction === 'prev' && this.canPrev('month')) {
        changedDate.setMonth(viewDate.getMonth() - 1, 1);
      } else if (direction === 'next' && this.canNext('month')) {
        changedDate.setMonth(viewDate.getMonth() + 1, 1);
      }
      onChange(changedDate);
    }

    // Переключение года

  }, {
    key: 'handleChangeYear',
    value: function handleChangeYear(direction) {
      var _props4 = this.props,
          maxValue = _props4.maxValue,
          minValue = _props4.minValue,
          viewDate = _props4.viewDate,
          onChange = _props4.onChange;

      var changedDate = new Date(viewDate);
      if (direction === 'prev' && this.canPrev('year')) {
        changedDate.setFullYear(viewDate.getFullYear() - 1);
      } else if (direction === 'next' && this.canNext('year')) {
        changedDate.setFullYear(viewDate.getFullYear() + 1);
      }
      // Корректировка максимального и минимального месяца
      if (!this.canNext('month') && changedDate.getMonth() !== maxValue.getMonth()) {
        changedDate.setMonth(maxValue.getMonth());
      } else if (!this.canPrev('month') && changedDate.getMonth() !== minValue.getMonth()) {
        changedDate.setMonth(minValue.getMonth());
      }
      onChange(changedDate);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props5 = this.props,
          classes = _props5.classes,
          className = _props5.className,
          size = _props5.size,
          viewDate = _props5.viewDate;

      var month = viewDate.getMonth();
      var year = viewDate.getFullYear();
      return _react2.default.createElement(
        'div',
        { className: (0, _clsx2.default)(className, classes[size], classes.period) },
        _react2.default.createElement(_Icon2.default, {
          className: (0, _clsx2.default)(classes.periodItem, classes.periodIcon, classes.prevYearIcon),
          type: 'arrows',
          onClick: function onClick() {
            return _this2.handleChangeYear('prev');
          },
          visibility: this.canPrev('year') ? 'visible' : 'disabled',
          size: 'small',
          color: 'currentColor'
        }),
        _react2.default.createElement(_Icon2.default, {
          className: (0, _clsx2.default)(classes.periodItem, classes.periodIcon, classes.prevMonthIcon),
          type: 'arrow',
          onClick: function onClick() {
            return _this2.handleChangeMonth('prev');
          },
          visibility: this.canPrev('month') ? 'visible' : 'disabled',
          size: 'small',
          color: 'currentColor'
        }),
        _react2.default.createElement(_Label2.default, {
          className: (0, _clsx2.default)(classes.periodItem, classes.monthYear),
          value: _dateUtils2.default.getMonth([month]) + ', ' + year,
          fontSize: size,
          fontWeight: 'semibold'
        }),
        _react2.default.createElement(_Icon2.default, {
          className: (0, _clsx2.default)(classes.periodItem, classes.periodIcon, classes.nextMonthIcon),
          type: 'arrow',
          onClick: function onClick() {
            return _this2.handleChangeMonth('next');
          },
          visibility: this.canNext('month') ? 'visible' : 'disabled',
          size: 'small',
          color: 'currentColor'
        }),
        _react2.default.createElement(_Icon2.default, {
          className: (0, _clsx2.default)(classes.periodItem, classes.periodIcon, classes.nextYearIcon),
          type: 'arrows',
          onClick: function onClick() {
            return _this2.handleChangeYear('next');
          },
          visibility: this.canNext('year') ? 'visible' : 'disabled',
          size: 'small',
          color: 'currentColor'
        })
      );
    }
  }]);
  return PeriodChange;
}(_react.PureComponent)) || _class);


PeriodChange.propTypes = {
  classes: _propTypes2.default.object,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** PeriodChange size */
  size: _propTypes2.default.oneOf(['small', 'medium']).isRequired,
  /** PeriodChange max date */
  maxValue: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.string]).isRequired,
  /** PeriodChange min date */
  minValue: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.string]).isRequired,
  /** PeriodChange view date */
  viewDate: _propTypes2.default.instanceOf(Date).isRequired,
  /** PeriodChange callback */
  onChange: _propTypes2.default.func.isRequired
};

exports.default = PeriodChange;