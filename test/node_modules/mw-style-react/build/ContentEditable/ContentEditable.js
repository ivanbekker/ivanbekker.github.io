'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _ContentEditable = require('./ContentEditable.style');

var _ContentEditable2 = _interopRequireDefault(_ContentEditable);

var _utils = require('../utils/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ContentEditable = (_dec = (0, _reactJss2.default)(_ContentEditable2.default), _dec(_class = function (_Component) {
  (0, _inherits3.default)(ContentEditable, _Component);

  function ContentEditable(props) {
    (0, _classCallCheck3.default)(this, ContentEditable);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ContentEditable.__proto__ || (0, _getPrototypeOf2.default)(ContentEditable)).call(this, props));

    _this.emitChange = _this.emitChange.bind(_this);
    _this.handlePaste = _this.handlePaste.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ContentEditable, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var forwardRef = this.props.forwardRef;

      this.inputRef = forwardRef || _react2.default.createRef();
    }

    // fix caret position jump to start

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      var _this2 = this;

      var inputHtml = this.inputRef.current;
      if (this._formatText(nextProps.value) !== this._formatText(inputHtml.innerHTML)) return true;
      var optional = ['placeholder', 'tabIndex', 'className', 'id'];
      return optional.some(function (name) {
        return _this2.props[name] !== nextProps[name];
      });
    }

    // fix caret position jump to start

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var inputHtml = this.inputRef.current;
      var value = this.props.value;

      var formattedValue = this._formatText(value);
      if (inputHtml && formattedValue !== this._formatText(inputHtml.innerHTML)) {
        inputHtml.innerHTML = formattedValue;
      }
    }
  }, {
    key: '_formatText',
    value: function _formatText(value) {
      var type = this.props.type;

      if (type === 'text') {
        return _utils2.default.stripHtml(value);
      }
      return _utils2.default.sanitizeHtml(value);
    }

    // Emit handle onChange

  }, {
    key: 'emitChange',
    value: function emitChange(e) {
      var inputHtml = this.inputRef.current;
      if (!inputHtml) return;
      var html = e.target.innerHTML;
      if (html !== this.lastHtml) {
        e = (0, _assign2.default)({}, e, {
          target: { value: html }
        });
        this.handleChange(e, html);
      }
      this.lastHtml = html;
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e, value) {
      var _props = this.props,
          id = _props.id,
          onChange = _props.onChange;

      onChange({ id: id, value: value, error: false });
    }
  }, {
    key: 'handlePaste',
    value: function handlePaste(e) {
      var onPaste = this.props.onPaste;

      if (onPaste) {
        onPaste(e);
        return;
      }
      e.preventDefault();
      var text = e.clipboardData.getData('text/plain');
      text = _utils2.default.stripHtml(text);
      document.execCommand('insertHTML', false, text);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          id = _props2.id,
          classes = _props2.classes,
          className = _props2.className,
          value = _props2.value,
          onKeyPress = _props2.onKeyPress,
          onKeyDown = _props2.onKeyDown,
          onKeyUp = _props2.onKeyUp,
          onFocus = _props2.onFocus,
          onBlur = _props2.onBlur,
          onDoubleClick = _props2.onDoubleClick,
          tabIndex = _props2.tabIndex,
          placeholder = _props2.placeholder,
          visibility = _props2.visibility;


      var formatValue = this._formatText(value);
      return _react2.default.createElement('div', {
        id: id,
        className: (0, _clsx2.default)(className, classes.contentEdit),
        ref: this.inputRef,
        dangerouslySetInnerHTML: { __html: formatValue },
        contentEditable: visibility === 'visible',
        onInput: this.emitChange,
        onFocus: onFocus,
        onBlur: onBlur,
        onKeyPress: onKeyPress,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        tabIndex: tabIndex,
        placeholder: placeholder,
        onDoubleClick: onDoubleClick,
        onPaste: this.handlePaste
      });
    }
  }]);
  return ContentEditable;
}(_react.Component)) || _class);


ContentEditable.defaultProps = {
  visibility: 'visible',
  tabIndex: 0,
  placeholder: null,
  type: 'text',
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onClickRightIcon: function onClickRightIcon() {},
  onKeyPress: function onKeyPress() {},
  onKeyUp: function onKeyUp() {},
  onKeyDown: function onKeyDown() {},
  onDoubleClick: function onDoubleClick() {}
};

ContentEditable.propTypes = {
  classes: _propTypes2.default.object,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** onChange callback */
  onChange: _propTypes2.default.func,
  /** ContentEditable's id */
  id: _propTypes2.default.string,
  /** ContentEditable's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** ContentEditable's visibility */
  type: _propTypes2.default.oneOf(['text', 'html']).isRequired,
  /** text field's value */
  value: _propTypes2.default.string,
  /** Use that property to pass a ref callback to the native input component. */
  forwardRef: _propTypes2.default.object,
  /** onDoubleClick callback */
  onDoubleClick: _propTypes2.default.func,
  /** onKeyPress callback */
  onKeyPress: _propTypes2.default.func,
  /** onKeyUp callback */
  onKeyUp: _propTypes2.default.func,
  /** onKeyDown callback */
  onKeyDown: _propTypes2.default.func,
  /** onFocus callback */
  onFocus: _propTypes2.default.func,
  /** onBlur callback */
  onBlur: _propTypes2.default.func,
  /** onPaste callback */
  onPaste: _propTypes2.default.func,
  /** Tab index */
  tabIndex: _propTypes2.default.number,
  /** placeholder */
  placeholder: _propTypes2.default.string
};

exports.default = ContentEditable;