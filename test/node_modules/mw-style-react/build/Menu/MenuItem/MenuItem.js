'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _MenuItem = require('./MenuItem.style');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Icon = require('../../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Label = require('../../Label');

var _Label2 = _interopRequireDefault(_Label);

var _Badge = require('../../Badge');

var _Badge2 = _interopRequireDefault(_Badge);

var _Avatar = require('../../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MenuItem = (_dec = (0, _reactJss2.default)(_MenuItem2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(MenuItem, _PureComponent);

  function MenuItem(props) {
    (0, _classCallCheck3.default)(this, MenuItem);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(MenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      var _props = this.props,
          value = _props.value,
          visibility = _props.visibility,
          onClick = _props.onClick;

      if (visibility === 'disabled') return;
      onClick(value);
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _props2 = this.props,
          classes = _props2.classes,
          size = _props2.size,
          children = _props2.children;

      if (!children) return null;
      try {
        if (size === 'small') {
          throw new Error('Small menuItem should not contain a child');
        }
      } catch (e) {
        console.error(e); // eslint-disable-line no-console
        return null;
      }
      return _react2.default.createElement(
        'div',
        { className: (0, _clsx2.default)(classes.labelContainerContent, classes.children) },
        children
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          id = _props3.id,
          classes = _props3.classes,
          className = _props3.className,
          leftIcon = _props3.leftIcon,
          rightIcon = _props3.rightIcon,
          label = _props3.label,
          visibility = _props3.visibility,
          value = _props3.value,
          activeItem = _props3.activeItem,
          badge = _props3.badge,
          avatar = _props3.avatar,
          size = _props3.size;


      return _react2.default.createElement(
        'div',
        {
          name: id,
          className: (0, _clsx2.default)(className, classes.menuItem, classes[size], { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' }, { active: activeItem === value }),
          onClick: this.handleClick
        },
        avatar ? _react2.default.createElement(_Avatar2.default, { className: (0, _clsx2.default)(classes.avatar), label: value, src: avatar, size: size }) : null,
        leftIcon ? _react2.default.createElement(_Icon2.default, { className: (0, _clsx2.default)(classes.icon, classes.iconLeft), type: leftIcon, size: 'medium' }) : null,
        _react2.default.createElement(
          'div',
          { className: (0, _clsx2.default)(classes.labelContainer) },
          _react2.default.createElement(_Label2.default, { className: (0, _clsx2.default)(classes.labelContainerContent, classes.label), value: label }),
          this.renderChildren()
        ),
        badge ? _react2.default.createElement(_Badge2.default, { className: (0, _clsx2.default)(classes.badge), value: badge, size: 'large' }) : null,
        rightIcon ? _react2.default.createElement(_Icon2.default, { className: (0, _clsx2.default)(classes.icon, classes.iconRight), type: rightIcon, size: 'medium' }) : null
      );
    }
  }]);
  return MenuItem;
}(_react.PureComponent)) || _class);


MenuItem.defaultProps = {
  id: null,
  value: null,
  visibility: 'visible',
  leftIcon: null,
  rightIcon: null,
  error: false,
  onClick: function onClick() {},
  avatar: '',
  size: 'medium',
  children: null
};

MenuItem.propTypes = {
  classes: _propTypes2.default.object,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** menuItem's id */
  id: _propTypes2.default.string,
  /** menuItem's value */
  value: _propTypes2.default.string.isRequired,
  /** menuItem's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']),
  /** menuItem's left icon */
  leftIcon: _propTypes2.default.string,
  /** menuItem's right icon */
  rightIcon: _propTypes2.default.string,
  /** menuItem's badge */
  badge: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /** menuItem's label */
  label: _propTypes2.default.string.isRequired,
  /** active item */
  activeItem: _propTypes2.default.string,
  /** onClick callback */
  onClick: _propTypes2.default.func,
  /** menuItem's avatar src */
  avatar: _propTypes2.default.string,
  /** menuItem's size */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  /** menuItem's second row */
  children: _propTypes2.default.node
};

exports.default = MenuItem;