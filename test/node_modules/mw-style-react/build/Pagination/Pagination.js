'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _utils = require('../utils/utils');

var _utils2 = _interopRequireDefault(_utils);

var _Pagination = require('./Pagination.style');

var _Pagination2 = _interopRequireDefault(_Pagination);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DOTS = '...';

var Pagination = (_dec = (0, _reactJss2.default)(_Pagination2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(Pagination, _PureComponent);

  function Pagination() {
    (0, _classCallCheck3.default)(this, Pagination);
    return (0, _possibleConstructorReturn3.default)(this, (Pagination.__proto__ || (0, _getPrototypeOf2.default)(Pagination)).apply(this, arguments));
  }

  (0, _createClass3.default)(Pagination, [{
    key: 'correctSize',
    value: function correctSize(size) {
      return Number(size) || 0;
    }
  }, {
    key: 'correctLimit',
    value: function correctLimit(limit) {
      return Number(limit) || 1;
    }
  }, {
    key: 'correctValue',
    value: function correctValue(value, paginationSize) {
      var corValue = Number(value);
      if (!corValue) return 0;
      if (corValue < 1) {
        corValue = 1;
      } else if (corValue > paginationSize) {
        corValue = paginationSize;
      }
      return corValue;
    }

    // Замена {range}, {size} в label

  }, {
    key: 'replaceLabelVars',
    value: function replaceLabelVars(value, size, limit, label) {
      var replacedLabel = _utils2.default.stripHtml(label);
      // Дипазон отображаемых элеметов
      if (replacedLabel.includes('{range}')) {
        var rangeStart = (value - 1) * limit + 1;
        var rangeEnd = value * limit < size ? value * limit : size;
        // выделяем range semibold
        var range = '<span class="range">' + rangeStart + '-' + rangeEnd + '</span>';
        replacedLabel = replacedLabel.replace('{range}', range);
      }
      // Общее количество элементов
      if (replacedLabel.includes('{size}')) {
        replacedLabel = replacedLabel.replace('{size}', size);
      }
      return replacedLabel;
    }

    // Обработчик клика на элементе или иконках

  }, {
    key: 'handleClick',
    value: function handleClick(itemValue, value) {
      var _props = this.props,
          id = _props.id,
          onChange = _props.onChange,
          visibility = _props.visibility;

      if (visibility === 'disabled' || itemValue === value || itemValue === DOTS) {
        return;
      }
      var error = false;
      onChange({ id: id, value: itemValue, error: error });
    }

    // Создаем элемент пагинации

  }, {
    key: 'getPageElement',
    value: function getPageElement(itemValue, value) {
      var _this2 = this;

      var classes = this.props.classes;

      return _react2.default.createElement(
        'div',
        {
          key: _utils2.default.random(),
          className: (0, _clsx2.default)(classes.item, { active: itemValue === value }, { disabled: itemValue === DOTS }),
          onClick: function onClick() {
            return _this2.handleClick(itemValue, value);
          }
        },
        itemValue
      );
    }

    // Формируем элементы пагинации и рендерим

  }, {
    key: 'renderPagination',
    value: function renderPagination(value, paginationSize) {
      var _this3 = this;

      var pagination = [];
      if (!value || !paginationSize) return pagination;
      var maxPagesShown = 9;
      var items = void 0;

      if (paginationSize <= maxPagesShown) {
        items = _utils2.default.range(1, paginationSize);
      } else {
        var startSubSet = [1];
        var endSubSet = [paginationSize];
        var startLimit = value + 1 <= paginationSize ? value - 2 : paginationSize - 2;
        var endLimit = value - 1 > 0 ? value + 2 : 3;
        var mainSubSet = _utils2.default.range(startLimit, endLimit).filter(function (i) {
          return i > 0 && i <= paginationSize;
        });
        items = [].concat((0, _toConsumableArray3.default)(new _set2.default([].concat(startSubSet, (0, _toConsumableArray3.default)(mainSubSet), endSubSet))));
      }

      var prevPage = 0;
      items.forEach(function (page) {
        if (page - 1 !== prevPage) {
          pagination.push(_this3.getPageElement(DOTS, value));
        }
        pagination.push(_this3.getPageElement(page, value));
        prevPage = page;
      });
      return pagination;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props2 = this.props,
          classes = _props2.classes,
          className = _props2.className,
          id = _props2.id,
          visibility = _props2.visibility,
          value = _props2.value,
          size = _props2.size,
          limit = _props2.limit,
          label = _props2.label;

      var corSize = this.correctSize(size);
      var corLimit = this.correctLimit(limit);
      var paginationSize = Math.ceil(corSize / corLimit); // Количество элеметов пагинации
      var corValue = this.correctValue(value, paginationSize);

      return _react2.default.createElement(
        'div',
        {
          id: id,
          className: (0, _clsx2.default)(className, classes.container, { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' })
        },
        _react2.default.createElement('div', {
          className: classes.label,
          dangerouslySetInnerHTML: {
            __html: this.replaceLabelVars(corValue, corSize, corLimit, label)
          }
        }),
        paginationSize > 1 ? _react2.default.createElement(
          'div',
          { className: (0, _clsx2.default)(classes.pagination, { hidden: corSize === 0 || corValue === 0 }) },
          _react2.default.createElement(
            'div',
            { className: (0, _clsx2.default)(classes.iconContainer, classes.iconPrev) },
            _react2.default.createElement(_Icon2.default, {
              className: (0, _clsx2.default)(classes.icon, {
                hidden: corValue === 1
              }),
              type: 'dropdown',
              size: 'micro',
              color: 'currentColor',
              onClick: function onClick() {
                return _this4.handleClick(corValue - 1, corValue);
              }
            })
          ),
          this.renderPagination(corValue, paginationSize),
          _react2.default.createElement(
            'div',
            { className: (0, _clsx2.default)(classes.iconContainer, classes.iconNext) },
            _react2.default.createElement(_Icon2.default, {
              className: (0, _clsx2.default)(classes.icon, {
                hidden: corValue === paginationSize
              }),
              type: 'dropdown',
              size: 'micro',
              color: 'currentColor',
              onClick: function onClick() {
                return _this4.handleClick(corValue + 1, corValue);
              }
            })
          )
        ) : null
      );
    }
  }]);
  return Pagination;
}(_react.PureComponent)) || _class);


Pagination.defaultProps = {
  visibility: 'visible',
  value: '1',
  onChange: function onChange() {},
  label: '{range} / {size}'
};

Pagination.propTypes = {
  classes: _propTypes2.default.object,
  /** Pagination's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']),
  /** Pagination's id */
  id: _propTypes2.default.string,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** All elements count */
  size: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
  /** Elements view limit */
  limit: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
  /** Pagination's label string template,
   * need use vars {range} and {size} */
  label: _propTypes2.default.string,
  /** Pagination's value */
  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  /** Pagination's callback */
  onChange: _propTypes2.default.func
};

exports.default = Pagination;