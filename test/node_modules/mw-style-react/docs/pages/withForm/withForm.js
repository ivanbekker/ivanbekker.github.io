import React from 'react';
import PropTypes from 'prop-types';
import Header1 from '../../components/Header1';
import {Code} from '../../../src/components';
import '../../styles/tbl.scss';
import ThemeProvider from '../../../src/components/ThemeProvider';
import theme from '../../../src/components/themes/corezoid_light';

const withForm = ({title}) => (
  <ThemeProvider theme={theme}>
    <div>
      <Header1 title={title} />
      <p>HOC компонент withForm предназаначен для обработки форм.</p>
      <h3>Параметры, которые расширяют исходную форму</h3>
      <hr />
      <p>
        <b>handleOnChange()</b> - Функция обработчик полей формы
      </p>
      <p>
        <b>handleSubmit()</b> - Функция обработчик отправки формы
      </p>
      <p>
        <b>handleKeyPress()</b> - Функция обработчик нажатия клавиши в поле формы
      </p>
      <p>
        <b>values</b> - Объект со значениями полей формы
      </p>
      <p>
        <b>errors</b> - Объект с ошибками полей формы
      </p>
      <p>
        <b>isSubmit</b> - Флаг, который показывает находится ли форма в состоянии отправки
      </p>
      <hr />
      <h3>Параметры, HOC</h3>
      <hr />
      <p>
        <b>handleSubmit(values, dispatch, formActions) </b>
        - Функция, которая выполниться при отправке формы.
        <br />
        <b>formActions</b> - состоит из функций:
      </p>
      <ul>
        <li>
          <b>setSubmitting(true|false)</b> - установить состояник формы
        </li>
        <li>
          <b>setErrors(errors)</b> - установить объект ошибок формы
        </li>
        <li>
          <b>setValues(values)</b> - установить объект значений формы
        </li>
      </ul>
      <p>
        <b>handleKeyPress(e)</b>
        - Функция, которая выполнится при нажатии клавиши в поле формы
      </p>
      <p>
        <b>handleOnChange(field)</b>
        - Функция, которая выполниться при изменении поля
      </p>
      <p>
        <b>setValues(values)</b>
        - Функция, которая переопределяет занчения полей при их установке
      </p>
      <p>
        <b>mapPropsToValues()</b>
        - Функция, которая возвращает ачальные значения формы
      </p>
      <p>
        <b>defaultErrorMsg()</b>
        - Объект ошибок по умолчанию полей формы
      </p>
      <p>
        <b>validate(values)</b>
        - Функция для дополнительной валидации формы, должна возвратить объект ошибок формы errors
      </p>
      <p>
        <b>yup/yup(props)</b>
        - Объект схемы валидации yup или функция, которая возращает схуму валидации{' '}
        <a
          target="_blank"
          href="https://github.com/jquense/yup#mixedvalidatevalue-any-options-object-promiseany-validationerror"
        >
          yup
        </a>
      </p>
      <hr />
      <Code
        label="Пример использования"
        value={
          "import PropTypes from 'prop-types';\n" +
          "import React, {PureComponent} from 'react';\n" +
          "import Yup from 'yup';\n" +
          "import {intlShape, injectIntl} from 'react-intl';\n" +
          'import {\n' +
          '  Modal,\n' +
          '  ModalButtons,\n' +
          '  ModalContent,\n' +
          '  Button,\n' +
          '  Label,\n' +
          '  TextField,\n' +
          '  ProgressBar,\n' +
          '  withForm\n' +
          "} from 'mw-style-react';\n" +
          "import {GET_REG_META} from 'constants';\n" +
          "import Utils from '../../../../utils/utils';\n" +
          "import mes from './intl';\n" +
          "import '../../Modal.scss';\n" +
          '\n' +
          '\n' +
          "const fieldName = 'adressReg';\n" +
          '\n' +
          'class AddRegister extends PureComponent {\n' +
          '\n' +
          '  // Ф-ция локализации\n' +
          '  i(mesId) {\n' +
          '    return Utils.getMes(this.context)(mesId);\n' +
          '  }\n' +
          '\n' +
          '  render() {\n' +
          '    const {\n' +
          '      visibility,\n' +
          '      onClose,\n' +
          '      handleOnChange,\n' +
          '      handleSubmit,\n' +
          '      handleKeyPress,\n' +
          '      values,\n' +
          '      errors,\n' +
          '      isSubmit\n' +
          '    } = this.props;\n' +
          '    return (\n' +
          '      <Modal\n' +
          '        className="modal__type1 modal__noCloseIcon"\n' +
          '        visibility={visibility}\n' +
          '        onClose={onClose}\n' +
          '        label={this.i(mes.enterIntoReg)}\n' +
          '      >\n' +
          '        <ModalContent className="modal__content">\n' +
          '          <Label className="modal__info" value={this.i(mes.regInfo)} fontSize="small"/>\n' +
          '          <TextField\n' +
          '            id={fieldName}\n' +
          "            value={values[fieldName] || ''}\n" +
          '            error={!!errors[fieldName] || false}\n' +
          '            label={this.i(mes.addrReg)}\n' +
          "            regexp={'^.+__.+__.+$'}\n" +
          '            helperText={\n' +
          '              errors[fieldName] ?\n' +
          '                this.i(mes[errors[fieldName]]) :\n' +
          '                this.i(mes.regHelpText)\n' +
          '            }\n' +
          '            autoFocus={true}\n' +
          '            onChange={handleOnChange}\n' +
          '            onKeyPress={handleKeyPress}\n' +
          "            visibility={isSubmit ? 'disabled' : 'visible'}\n" +
          '          />\n' +
          '        </ModalContent>\n' +
          '        <ModalButtons>\n' +
          '          <Button\n' +
          '            label={this.i(mes.cancel)}\n' +
          '            size="small"\n' +
          '            type="text"\n' +
          '            onClick={onClose}\n' +
          "            visibility={isSubmit ? 'disabled' : 'visible'}\n" +
          '          />\n' +
          '          <Button\n' +
          '            id="loginToReg"\n' +
          '            label={this.i(mes.next)}\n' +
          '            size="small"\n' +
          '            onClick={handleSubmit}\n' +
          "            visibility={isSubmit ? 'disabled' : 'visible'}\n" +
          '          />\n' +
          '          <ProgressBar\n' +
          '            className="modal__loader"\n' +
          '            type="circle"\n' +
          '            size="small"\n' +
          "            visibility={isSubmit ? 'visible' : 'hidden'}\n" +
          '          />\n' +
          '        </ModalButtons>\n' +
          '      </Modal>\n' +
          '    );\n' +
          '  }\n' +
          '\n' +
          '}\n' +
          '\n' +
          'const FormAddRegister = withForm({\n' +
          '  defaultErrorMsg: {\n' +
          "    [fieldName]: 'invalid_format'\n" +
          '  },\n' +
          '  yup: Yup.object().shape({\n' +
          "    [fieldName]: Yup.string().required('field_required')\n" +
          '  }),\n' +
          '  handleSubmit: (values, dispatch, formActions) => {\n' +
          "    const el = values[fieldName] || '';\n" +
          "    const splitValue = el.split('__');\n" +
          '    dispatch({\n' +
          '      type: GET_REG_META.REQUEST,\n' +
          '      payload: {\n' +
          '        register: {\n' +
          '          registrarKey: splitValue[0],\n' +
          '          registry: splitValue[1],\n' +
          '          registrarName: splitValue[2]\n' +
          '        },\n' +
          '        formActions\n' +
          '      }\n' +
          '    });\n' +
          '  }\n' +
          '}, AddRegister);\n' +
          '\n' +
          '\n' +
          'AddRegister.propTypes = {\n' +
          '  visibility: PropTypes.bool.isRequired,\n' +
          '  onClose: PropTypes.func,\n' +
          '  handleOnChange: PropTypes.func,\n' +
          '  handleSubmit: PropTypes.func,\n' +
          '  handleKeyPress: PropTypes.func,\n' +
          '  values: PropTypes.object,\n' +
          '  errors: PropTypes.object,\n' +
          '  isSubmit: PropTypes.bool,\n' +
          '};\n' +
          '\n' +
          'AddRegister.contextTypes = {\n' +
          '  intl: intlShape\n' +
          '};\n' +
          '\n' +
          'export default injectIntl(FormAddRegister);\n'
        }
      />
    </div>
  </ThemeProvider>
);

withForm.propTypes = {
  title: PropTypes.string.isRequired,
};

export default withForm;
