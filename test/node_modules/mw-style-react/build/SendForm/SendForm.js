'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fromCodePoint = require('babel-runtime/core-js/string/from-code-point');

var _fromCodePoint2 = _interopRequireDefault(_fromCodePoint);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _reactStars = require('react-stars');

var _reactStars2 = _interopRequireDefault(_reactStars);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _emojiRegex = require('../utils/emojiRegex');

var _emojiRegex2 = _interopRequireDefault(_emojiRegex);

var _Emoji = require('../Emoji');

var _Emoji2 = _interopRequireDefault(_Emoji);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Upload = require('../Upload');

var _Upload2 = _interopRequireDefault(_Upload);

var _TextField = require('../TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Menu = require('../Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _AutocompleteItem = require('../Autocomplete/AutocompleteItem');

var _AutocompleteItem2 = _interopRequireDefault(_AutocompleteItem);

var _Chip = require('../Chip');

var _Chip2 = _interopRequireDefault(_Chip);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _utils = require('../utils/utils');

var _utils2 = _interopRequireDefault(_utils);

var _cursor = require('../utils/cursor');

var _cursor2 = _interopRequireDefault(_cursor);

var _forwardRef = require('../HOC/forwardRef');

var _forwardRef2 = _interopRequireDefault(_forwardRef);

var _SendForm = require('./SendForm.style');

var _SendForm2 = _interopRequireDefault(_SendForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ForwardTextField = (0, _forwardRef2.default)(_TextField2.default);

var SendForm = (_dec = (0, _reactJss2.default)(_SendForm2.default), _dec(_class = (0, _reactClickOutside2.default)(_class = function (_PureComponent) {
  (0, _inherits3.default)(SendForm, _PureComponent);

  function SendForm(props) {
    (0, _classCallCheck3.default)(this, SendForm);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SendForm.__proto__ || (0, _getPrototypeOf2.default)(SendForm)).call(this, props));

    _this.state = {
      showUsers: false,
      findUserMode: false,
      searchQuery: null,
      userList: null,
      focus: false,
      activeUserItem: 0
    };
    _this.selectUser = _this.selectUser.bind(_this);
    _this.hideUsers = _this.hideUsers.bind(_this);
    _this.showUsers = _this.showUsers.bind(_this);
    _this.mouseMoveUsers = _this.mouseMoveUsers.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleSubmit = _this.handleSubmit.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.handleKeyUp = _this.handleKeyUp.bind(_this);
    _this._saveCursorPosition = _this._saveCursorPosition.bind(_this);
    _this.selectEmoji = _this.selectEmoji.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    // начальная позиция курсора
    _this.cursorPosition = 0;
    _this.portalEl = document.createElement('div');
    _this.portalEl.id = props.id + '_filePreview';
    return _this;
  }

  (0, _createClass3.default)(SendForm, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._isMounted = true;
      var forwardRef = this.props.forwardRef;

      this.refEdit = forwardRef || _react2.default.createRef();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.controls.parentNode.insertBefore(this.portalEl, this.controls);
      this.messageFormatting();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
    }

    // Сохранить текущую позицию курсора

  }, {
    key: '_saveCursorPosition',
    value: function _saveCursorPosition() {
      var pos = _cursor2.default.getCaretPosition(this.refEdit.current);
      if (pos !== -1) {
        this.cursorPosition = pos;
      }
    }

    // Установить курсор в заданую позицию

  }, {
    key: '_setCursor',
    value: function _setCursor(position) {
      var _this2 = this;

      setTimeout(function () {
        _this2.sendForm.click();
        _this2.refEdit.current.focus();
        if (position === 'end') {
          _cursor2.default.moveCursorToEnd(_this2.refEdit.current);
          _this2._saveCursorPosition();
        } else {
          _this2.cursorPosition = position;
          _cursor2.default.moveCursorToPosition(_this2.refEdit.current, _this2.cursorPosition);
        }
      }, 0);
    }

    // Форматирование комментария

  }, {
    key: 'messageFormatting',
    value: function messageFormatting() {
      var value = this.props.value;

      var regBr = new RegExp('<br>', 'gi');
      var regSpan = new RegExp('\\<span.*?\\>(.*?)\\<\\/span\\>', 'g');
      var regSpan1 = new RegExp('\\[span.*?\\](.*?)\\[\\/span\\]', 'g');
      var sourceMessage = value.message.replace(regBr, '\n').replace(regSpan, '$1').replace(regSpan1, '$1');

      var _highlightAttachments = this.highlightAttachments(sourceMessage),
          message = _highlightAttachments.message,
          users = _highlightAttachments.users;

      if (value.message !== message) {
        this.handleChange([{ id: 'message', value: message, error: false }, { id: 'users', value: users, error: false }]);
        this._setCursor('end');
      }
    }

    // Обработка клика за пределами компонента

  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside() {
      this.setState({ findUserMode: false, focus: false });
      this.hideUsers();
    }

    // Обработчик при отправке формы

  }, {
    key: 'handleSubmit',
    value: function handleSubmit() {
      var _props = this.props,
          id = _props.id,
          value = _props.value,
          error = _props.error,
          onSubmit = _props.onSubmit;
      var showUsers = this.state.showUsers;

      if (showUsers) return;
      var formatValue = this.formatAndCheck(value);
      onSubmit({ id: id, value: formatValue, error: error });
    }

    // Format values on submit

  }, {
    key: 'formatAndCheck',
    value: function formatAndCheck(value) {
      return (0, _extends3.default)({}, value, {
        message: _utils2.default.brToN(value.message),
        users: _utils2.default.uniqArrayOfObjects(value.users || [], 'id'),
        sign: value.sign,
        rating: value.rating
      });
    }

    // Handle change message and files

  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      e = Array.isArray(e) ? e : [e];
      var _props2 = this.props,
          id = _props2.id,
          value = _props2.value,
          onChange = _props2.onChange;

      var newValue = (0, _extends3.default)({}, value);
      var error = false;
      e.forEach(function (el) {
        newValue[el.id] = el.value;
        error = error || el.error;
      });
      onChange({ id: id, value: newValue, error: error });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      var _props3 = this.props,
          onKeyDown = _props3.onKeyDown,
          type = _props3.type;
      var showUsers = this.state.showUsers;

      var metaKey = e.metaKey || e.ctrlKey;
      var isEnter = e.key === 'Enter';
      var hotKeysManage = ['ArrowDown', 'ArrowUp', 'Enter'];
      // Если зажат ctrl или command, то делаем перенос строки,
      // иначе по enter отправляем форму
      if (!metaKey && isEnter && !this.state.findUserMode && type === 'chat' || metaKey && isEnter && !this.state.findUserMode && type === 'comment') {
        e.preventDefault();
        this.handleSubmit();
      } else if (metaKey && isEnter && type === 'chat' || isEnter && type === 'comment') {
        _cursor2.default.fixLineBreak(e);
      }
      // Навигация по списку пользователей
      if (showUsers && hotKeysManage.includes(e.key)) {
        this.selectUserUsingButtons(e);
      }
      onKeyDown(e);
    }
  }, {
    key: 'handleKeyUp',
    value: function handleKeyUp(e) {
      var onKeyUp = this.props.onKeyUp;

      this._saveCursorPosition();
      this.setUsersQueryReq(e.key);
      this.searchUsersQueryReq(e.key);
      if (e.key === ' ' || e.key === 'Backspace') {
        this.messageFormatting();
      }
      onKeyUp(e);
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.setState({ focus: true });
    }

    // Устанавливаем поисковый запрос пользователя,
    // если в строке комментария был нажат символ @

  }, {
    key: 'setUsersQueryReq',
    value: function setUsersQueryReq(key) {
      // Игнорируем нажатие на Ctrl, Shift...
      if (key.length > 1) return;
      if (key === '@') {
        this.showUsers();
        this.setState({ findUserMode: true });
        return;
      }
      var _state = this.state,
          findUserMode = _state.findUserMode,
          searchQuery = _state.searchQuery;
      var options = this.props.options;

      var users = options.users;
      if (!findUserMode || !users) return;
      var newSearchQuery = searchQuery ? searchQuery + key : key;
      newSearchQuery = newSearchQuery.toLowerCase();
      var userList = users.filter(function (user) {
        return user.value.toLowerCase().indexOf(newSearchQuery) !== -1;
      });
      if (!userList.length) {
        this.hideUsers();
      } else {
        this.setState({ searchQuery: newSearchQuery, userList: userList });
      }
    }

    // Скролл по списку пользователей

  }, {
    key: 'scrollUserList',
    value: function scrollUserList(item) {
      var container = _reactDom2.default.findDOMNode(this.containerUsersList);
      var heightContainer = container.offsetHeight;
      var heightItem = item.offsetHeight;
      var scrollPosition = item.offsetTop < heightContainer - heightItem * 3 ? 0 : item.offsetTop - (heightContainer - heightItem * 3);

      _utils2.default.scrollTo(container, scrollPosition, 100);
    }

    // Поиск в строке комментария поисковой строки пользователя
    // при нажати кнопки Backspace

  }, {
    key: 'searchUsersQueryReq',
    value: function searchUsersQueryReq(key) {
      var _props4 = this.props,
          value = _props4.value,
          options = _props4.options;

      if (key !== 'Backspace') return;
      var message = value.message;
      var users = options.users || [];
      var clearMessage = this.makeClearMessage(message);
      var leftPart = clearMessage.substring(0, this.cursorPosition);
      var splitLeftPart = leftPart.split('@');
      var query = splitLeftPart[splitLeftPart.length - 1];
      var userList = users.filter(function (user) {
        return user.value.toLowerCase().indexOf(query.toLowerCase()) !== -1;
      });
      var lastDog = leftPart.charAt(leftPart.length - 1);
      if (userList.length && (query.length || lastDog === '@')) {
        this.setState({
          showUsers: true,
          findUserMode: true,
          searchQuery: query,
          userList: userList
        });
      } else {
        this.hideUsers();
      }
    }

    // Выбрать смайлик

  }, {
    key: 'selectEmoji',
    value: function selectEmoji(emoji) {
      var smile = (0, _fromCodePoint2.default)(parseInt(emoji.unified, 16));
      this.insertAttachment('smile', smile + ' ');
    }

    // Показать список пользователей

  }, {
    key: 'showUsers',
    value: function showUsers() {
      this.setState({ showUsers: true });
      this.refEdit.current.focus();
      _cursor2.default.moveCursorToPosition(this.refEdit.current, this.cursorPosition);
    }

    // Скрыть список пользователей

  }, {
    key: 'hideUsers',
    value: function hideUsers() {
      var _this3 = this;

      this.setState({
        showUsers: false,
        findUserMode: false,
        searchQuery: null,
        activeUserItem: 0
      });
      // Задержка обнуления пользователей для плавной анимации скрытия
      // списка пользователей
      setTimeout(function () {
        if (!_this3._isMounted) return;
        _this3.setState({ userList: null });
      }, 500);
    }

    // Движение мышкой по спику пользователей. Сбрасываем индекс активного пользователя

  }, {
    key: 'mouseMoveUsers',
    value: function mouseMoveUsers() {
      this.setState({ activeUserItem: -1 });
    }

    // Выбрать пользователя по навигации стрелочек

  }, {
    key: 'selectUserUsingButtons',
    value: function selectUserUsingButtons(e) {
      e.preventDefault();
      var _state2 = this.state,
          showUsers = _state2.showUsers,
          userList = _state2.userList,
          activeUserItem = _state2.activeUserItem;
      var options = this.props.options;

      var users = userList || options.users;
      if (!showUsers) return;

      var newActiveItem = activeUserItem;

      if (e.key === 'ArrowDown' && activeUserItem < users.length - 1) {
        newActiveItem += 1;
      } else if (e.key === 'ArrowUp' && activeUserItem > 0) {
        newActiveItem -= 1;
      }
      if (!users[newActiveItem]) return;
      var item = this['itemRef' + newActiveItem];
      if (e.key === 'Enter') {
        this.selectUser({ value: item.props });
        newActiveItem = 0;
      }
      this.setState({
        activeUserItem: newActiveItem
      }, this.scrollUserList(_reactDom2.default.findDOMNode(item)));
    }

    // Выбрать пользователя из списка

  }, {
    key: 'selectUser',
    value: function selectUser(_ref) {
      var vItem = _ref.value;

      var userStr = '@' + vItem.value + ' ';
      this.insertAttachment('user', userStr);
    }

    // Вставить вложение в текст комментария по позиции курсора

  }, {
    key: 'insertAttachment',
    value: function insertAttachment(type, attachment) {
      var value = this.props.value;

      var clearMessage = this.makeClearMessage(value.message);
      var matchLieBreak = clearMessage.match(/\n/g);
      var lineBreakLen = matchLieBreak ? matchLieBreak.length : 0;
      var cursorPos = this.cursorPosition + lineBreakLen;
      var firstPart = clearMessage.substring(0, cursorPos);
      var lastPart = clearMessage.substring(cursorPos);
      var fix = this.replaceSearchReq(type, firstPart, lastPart);
      var newMessage = '' + fix.firstPart + attachment + fix.lastPart;

      var _highlightAttachments2 = this.highlightAttachments(newMessage),
          message = _highlightAttachments2.message,
          users = _highlightAttachments2.users;

      this.handleChange([{ id: 'message', value: message, error: false }, { id: 'users', value: users, error: false }]);
      this._setCursor(('' + fix.firstPart + attachment).length - lineBreakLen);
    }

    // Удалить поисковый запрос пользователя из строки комментария
    // при выборке пользователя из выпадающего списка

  }, {
    key: 'replaceSearchReq',
    value: function replaceSearchReq(type, firstPart, lastPart) {
      var _state3 = this.state,
          searchQuery = _state3.searchQuery,
          findUserMode = _state3.findUserMode;

      if (type !== 'user' || !findUserMode) return { firstPart: firstPart, lastPart: lastPart };
      var lastIndexOf = firstPart.lastIndexOf('@' + (searchQuery || ''));
      var fixFirstPart = firstPart.substring(0, lastIndexOf);
      return { firstPart: fixFirstPart, lastPart: lastPart };
    }

    // Удаляем из строки комментария все html теги.

  }, {
    key: 'makeClearMessage',
    value: function makeClearMessage(sourceMessage) {
      var regBr = new RegExp('<br>', 'gi');
      var regSpan = new RegExp('\\<span.*?\\>(.*?)\\<\\/span\\>\\&nbsp\\;', 'g');
      return sourceMessage.replace(regBr, '\n').replace(regSpan, '$1 ');
    }

    // Парсинг строки комментария, выделяем смайлики и пользователей

  }, {
    key: 'highlightAttachments',
    value: function highlightAttachments(sourceMessage) {
      var options = this.props.options;

      var users = options.users || [];
      var message = void 0;
      // Преобразовываем переносы строк
      var regBr = new RegExp('\n', 'gi'); // eslint-disable-line no-control-regex
      message = sourceMessage.replace(regBr, '<br>');
      // Оборачиваем все смайлики в span
      var match = void 0;
      var regex = _emojiRegex2.default;
      while (match = regex.exec(sourceMessage)) {
        // eslint-disable-line no-cond-assign
        var emoji = match[0];
        message = message.replace(emoji + ' ', '<span class="emoji">' + emoji + '</span>&nbsp;');
      }
      // Оборачиваем упоминания пользователей в span
      var foundUsers = [];
      users.forEach(function (user) {
        var nick = user.value;
        var copyMessage = message;
        var reg = new RegExp('\\@' + nick + '(\\&nbsp\\;|\\s){1,}', 'gim');
        message = message.replace(reg, '<span class="user">@' + nick + '</span>&nbsp;');
        // Если строка изменилась, то сохраняем пользователя
        if (message !== copyMessage) {
          foundUsers.push(user);
        }
      });
      return { message: message, users: foundUsers };
    }

    // Показать попап со списком пользователей

  }, {
    key: 'renderUsers',
    value: function renderUsers() {
      var _this4 = this;

      var _props5 = this.props,
          options = _props5.options,
          classes = _props5.classes;
      var _state4 = this.state,
          showUsers = _state4.showUsers,
          userList = _state4.userList,
          activeUserItem = _state4.activeUserItem;

      if (!options.users) return null;
      var users = userList || options.users;
      var activeItem = users[activeUserItem] ? users[activeUserItem].id : null;
      return _react2.default.createElement(
        _Menu2.default,
        {
          ref: function ref(el) {
            _this4.containerUsersList = el;
          },
          id: 'users',
          type: 'slaveMenu',
          className: classes.usersList,
          visibility: showUsers ? 'visible' : 'hidden',
          onClick: this.selectUser,
          onClose: this.hideUsers,
          onMouseMove: this.mouseMoveUsers
        },
        users.map(function (i, index) {
          return _react2.default.createElement(_AutocompleteItem2.default, (0, _extends3.default)({
            ref: function ref(el) {
              _this4['itemRef' + index] = el;
            },
            key: i.id,
            size: 'medium',
            activeItem: activeItem
          }, i));
        })
      );
    }
  }, {
    key: 'renderSign',
    value: function renderSign() {
      var _this5 = this;

      return _react2.default.createElement(_Chip2.default, {
        label: 'Signed',
        type: 'rectangular',
        icon: 'sign',
        closeClick: function closeClick() {
          return _this5.handleChange({ id: 'sign', value: false });
        }
      });
    }
  }, {
    key: 'renderRate',
    value: function renderRate(value) {
      var _this6 = this;

      var classes = this.props.classes;

      return _react2.default.createElement(
        _Chip2.default,
        {
          type: 'rectangular',
          className: classes.rating,
          closeClick: function closeClick() {
            return _this6.handleChange({ id: 'rating', value: false });
          }
        },
        _react2.default.createElement(_reactStars2.default, {
          count: 5,
          size: 12,
          half: false,
          value: value,
          color1: '#ACB3BE',
          color2: '#FFA701',
          onChange: function onChange(value) {
            return _this6.handleChange({ id: 'rating', value: value });
          }
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this7 = this;

      var focus = this.state.focus;
      var _props6 = this.props,
          id = _props6.id,
          classes = _props6.classes,
          className = _props6.className,
          visibility = _props6.visibility,
          placeholder = _props6.placeholder,
          value = _props6.value,
          type = _props6.type,
          sendButtonLabel = _props6.sendButtonLabel,
          cancelButtonLabel = _props6.cancelButtonLabel,
          autoFocus = _props6.autoFocus,
          error = _props6.error,
          options = _props6.options,
          onCancel = _props6.onCancel,
          maxFileSize = _props6.maxFileSize,
          maxFileSizeErrorText = _props6.maxFileSizeErrorText,
          onKeyPress = _props6.onKeyPress;


      var formClasses = (0, _clsx2.default)(className, classes.sendForm, classes[type], { focus: focus }, { error: !!error }, { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' });

      return _react2.default.createElement(
        'div',
        {
          id: id,
          className: formClasses,
          ref: function ref(el) {
            return _this7.sendForm = el;
          }
        },
        _react2.default.createElement(ForwardTextField, {
          ref: this.refEdit,
          id: 'message',
          className: classes.input,
          autoFocus: autoFocus,
          visibility: visibility,
          value: value.message,
          placeholder: placeholder,
          onChange: function onChange(e) {
            return _this7.handleChange(e, 'message');
          },
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown,
          onKeyPress: onKeyPress,
          onKeyUp: this.handleKeyUp,
          onBlur: this._saveCursorPosition,
          multiline: true
        }),
        _react2.default.createElement(
          'div',
          { className: classes.artifacts },
          value.sign ? this.renderSign() : null,
          value.rating && value.rating !== 0 ? this.renderRate(value.rating) : null
        ),
        _react2.default.createElement(
          'div',
          { className: classes.controls, ref: function ref(el) {
              return _this7.controls = el;
            } },
          _react2.default.createElement(
            'div',
            { className: classes.controlsIcons },
            options.users ? _react2.default.createElement(_Icon2.default, {
              className: classes.controlsIconsItem,
              type: 'dog',
              size: 'medium',
              onClick: this.showUsers
            }) : null,
            options.smiles ? _react2.default.createElement(_Emoji2.default, {
              className: classes.controlsIconsItem,
              visibility: visibility,
              size: 'medium',
              onChange: function onChange(_ref2) {
                var value = _ref2.value;
                return _this7.selectEmoji(value);
              }
            }) : null,
            options.files ? _react2.default.createElement(
              _Upload2.default,
              {
                id: 'files',
                visibility: visibility,
                className: classes.controlsIconsItem,
                multiple: options.files.multiple,
                preview: options.files.preview,
                accept: options.files.accept,
                value: value.files,
                portal: this.portalEl,
                maxFileSize: maxFileSize,
                maxFileSizeErrorText: maxFileSizeErrorText,
                onChange: function onChange(e) {
                  return _this7.handleChange(e, 'files');
                }
              },
              _react2.default.createElement(_Icon2.default, {
                type: 'attach',
                size: 'medium'
              })
            ) : null,
            options.sign ? _react2.default.createElement(_Icon2.default, {
              className: classes.controlsIconsItem,
              type: 'sign',
              size: 'medium',
              onClick: function onClick() {
                return _this7.handleChange({ id: 'sign', value: true });
              }
            }) : null,
            options.rating ? _react2.default.createElement(_Icon2.default, {
              className: classes.controlsIconsItem,
              type: 'star_full',
              size: 'medium',
              onClick: function onClick() {
                return _this7.handleChange({ id: 'rating', value: 1 });
              }
            }) : null
          ),
          _react2.default.createElement(
            'div',
            { className: classes.controlsBtn },
            cancelButtonLabel ? _react2.default.createElement(_Button2.default, {
              size: 'small',
              type: 'text',
              label: cancelButtonLabel,
              onClick: function onClick() {
                return onCancel({ id: id, value: value, error: error });
              }
            }) : null,
            sendButtonLabel ? _react2.default.createElement(_Button2.default, {
              size: 'small',
              label: sendButtonLabel,
              onClick: this.handleSubmit,
              visibility: !error && (value.message || value.files && value.files.length || value.users && value.users.length || value.sign || value.rating) ? 'visible' : 'disabled'
            }) : null
          )
        ),
        this.renderUsers()
      );
    }
  }]);
  return SendForm;
}(_react.PureComponent)) || _class) || _class);


SendForm.defaultProps = {
  visibility: 'visible',
  error: false,
  value: {
    message: '',
    files: [],
    users: [],
    sign: false,
    rating: 0
  },
  sendButtonLabel: 'Send',
  type: 'chat',
  options: {
    smiles: {},
    files: { multiple: true, preview: true },
    users: [],
    sign: false,
    rating: false
  },
  onSubmit: function onSubmit() {},
  onCancel: function onCancel() {},
  onChange: function onChange() {},
  onKeyDown: function onKeyDown() {},
  onKeyUp: function onKeyUp() {},
  onKeyPress: function onKeyPress() {}
};

SendForm.propTypes = {
  classes: _propTypes2.default.object,
  /** SendForm's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Does SendForm has an error */
  error: _propTypes2.default.bool.isRequired,
  /** SendForm's id */
  id: _propTypes2.default.string,
  /** SendForm's type */
  type: _propTypes2.default.oneOf(['chat', 'comment']).isRequired,
  /** SendForm's options */
  options: _propTypes2.default.object,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** form placeholder */
  placeholder: _propTypes2.default.string,
  /** send button label */
  sendButtonLabel: _propTypes2.default.string,
  /** cancel button label */
  cancelButtonLabel: _propTypes2.default.string,
  /** forms value */
  value: _propTypes2.default.object,
  /** form autoFocus */
  autoFocus: _propTypes2.default.bool,
  /** onSubmit callback */
  onSubmit: _propTypes2.default.func,
  /** onCancel callback */
  onCancel: _propTypes2.default.func,
  /** onChange callback */
  onChange: _propTypes2.default.func,
  /** onKeyDown callback */
  onKeyDown: _propTypes2.default.func,
  /** onKeyUp callback */
  onKeyUp: _propTypes2.default.func,
  /** onKeyPress callback */
  onKeyPress: _propTypes2.default.func,
  /** Use that property to pass a ref callback to the native input component. */
  forwardRef: _propTypes2.default.object,
  /** Max file size's id */
  maxFileSize: _propTypes2.default.number,
  /** Max File size error text */
  maxFileSizeErrorText: _propTypes2.default.string
};

exports.default = SendForm;