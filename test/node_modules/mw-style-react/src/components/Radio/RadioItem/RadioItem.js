import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './RadioItem.style';
import Icon from '../../Icon';
import Label from '../../Label';
import Utils from '../../utils/utils';

@injectSheet(styles)
class RadioItem extends PureComponent {
  constructor(props) {
    super(props);
    this.handleOnClick = ::this.handleOnClick;
  }

  handleOnClick() {
    const {value, visibility, onChange} = this.props;
    if (visibility === 'disabled') return;
    onChange(value);
  }

  render() {
    const {id, classes, className, visibility, value, label, activeItem, children} = this.props;
    const uniqId = Utils.random();
    const isChecked = activeItem === value;

    return (
      <div
        id={id}
        className={cn(
          className,
          classes.radioItem,
          {checked: isChecked},
          {hidden: visibility === 'hidden'},
          {disabled: visibility === 'disabled'},
        )}
      >
        <div className={classes.content}>
          <input
            className={classes.input}
            type="radio"
            value={isChecked}
            id={`id-${uniqId}`}
            onClick={this.handleOnClick}
          />
          <Icon
            className={classes.icon}
            type={isChecked ? 'radio_on' : 'radio_off'}
            size="medium"
            color="currentColor"
          />
          <label className={classes.label} htmlFor={`id-${uniqId}`}>
            <Label value={label}/>
          </label>
        </div>
        {children && <div className={classes.children}>{children}</div>}
      </div>
    );
  }
}

RadioItem.defaultProps = {
  id: null,
  children: null,
  error: false,
  value: false,
  visibility: 'visible',
  onChange: () => {
  },
};

RadioItem.propTypes = {
  classes: PropTypes.object,
  /** RadioItem's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** RadioItem's label */
  label: PropTypes.string.isRequired,
  /** RadioItem's child nodes */
  children: PropTypes.node,
  /** RadioItem value */
  value: PropTypes.string,
  /** active RadioItem */
  activeItem: PropTypes.string,
  /** element id */
  id: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** onChange callback */
  onChange: PropTypes.func,
};

export default RadioItem;
