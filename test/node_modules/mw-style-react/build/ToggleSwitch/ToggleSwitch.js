'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _ToggleSwitch = require('./ToggleSwitch.style');

var _ToggleSwitch2 = _interopRequireDefault(_ToggleSwitch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ToggleSwitch = (_dec = (0, _reactJss2.default)(_ToggleSwitch2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(ToggleSwitch, _PureComponent);

  function ToggleSwitch(props) {
    (0, _classCallCheck3.default)(this, ToggleSwitch);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ToggleSwitch.__proto__ || (0, _getPrototypeOf2.default)(ToggleSwitch)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(ToggleSwitch, [{
    key: 'handleChange',
    value: function handleChange(e) {
      e.preventDefault();
      e.stopPropagation();
      var _props = this.props,
          id = _props.id,
          value = _props.value,
          visibility = _props.visibility,
          onChange = _props.onChange;

      if (visibility === 'disabled') return;
      var error = false;
      onChange({ id: id, value: !value, error: error });
    }

    // render helper message

  }, {
    key: 'renderHelperText',
    value: function renderHelperText(error, helperText, classes) {
      if (!helperText) return null;
      return _react2.default.createElement(_Label2.default, { className: (0, _clsx2.default)(classes.helperText), value: helperText, error: error });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          classes = _props2.classes,
          className = _props2.className,
          id = _props2.id,
          size = _props2.size,
          visibility = _props2.visibility,
          value = _props2.value,
          error = _props2.error,
          helperText = _props2.helperText;


      return _react2.default.createElement(
        'div',
        { id: id },
        _react2.default.createElement(
          'div',
          {
            className: (0, _clsx2.default)(className, classes.switchWrap, classes[size], { active: !!value }, { disabled: visibility === 'disabled' }, { hidden: visibility === 'hidden' }, { error: !!error }),
            onClick: this.handleChange
          },
          _react2.default.createElement('div', { className: (0, _clsx2.default)(classes.switch, { active: !!value }, { error: !!error }) })
        ),
        this.renderHelperText(error, helperText, classes)
      );
    }
  }]);
  return ToggleSwitch;
}(_react.PureComponent)) || _class);


ToggleSwitch.defaultProps = {
  visibility: 'visible',
  error: false,
  value: false,
  size: 'medium',
  onChange: function onChange() {}
};

ToggleSwitch.propTypes = {
  classes: _propTypes2.default.object,
  /** ToggleSwitch's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']),
  /** Does ToggleSwitch has an error */
  error: _propTypes2.default.bool,
  /** ToggleSwitch's helperText */
  helperText: _propTypes2.default.string,
  /** ToggleSwitch's id */
  id: _propTypes2.default.string,
  /** ToggleSwitch's value */
  value: _propTypes2.default.bool,
  /** ToggleSwitch's size */
  size: _propTypes2.default.string,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** onChange callback */
  onChange: _propTypes2.default.func
};

exports.default = ToggleSwitch;