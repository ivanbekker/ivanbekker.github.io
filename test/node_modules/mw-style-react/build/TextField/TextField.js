'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _ContentEditable = require('../ContentEditable');

var _ContentEditable2 = _interopRequireDefault(_ContentEditable);

var _forwardRef = require('../HOC/forwardRef');

var _forwardRef2 = _interopRequireDefault(_forwardRef);

var _TextField = require('./TextField.style');

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ContentEditCom = (0, _forwardRef2.default)(_ContentEditable2.default);

var TextField = (_dec = (0, _reactJss2.default)(_TextField2.default), _dec(_class = (0, _reactClickOutside2.default)(_class = function (_PureComponent) {
  (0, _inherits3.default)(TextField, _PureComponent);

  function TextField(props) {
    (0, _classCallCheck3.default)(this, TextField);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call(this, props));

    _this.state = {
      selected: !!props.value,
      passShow: false,
      focus: false,
      error: !!props.value
    };
    _this.togglePass = _this.togglePass.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.handleChangeMult = _this.handleChangeMult.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(TextField, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var forwardRef = this.props.forwardRef;

      this.inputRef = forwardRef || _react2.default.createRef();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;

      if (autoFocus) this.handleFocus();
    }

    // Получить value поля ввода

  }, {
    key: 'getInputElValue',
    value: function getInputElValue() {
      var multiline = this.props.multiline;

      return multiline ? this.inputRef.innerHTML : this.inputRef.value;
    }

    // Handler for click outside of component

  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(e) {
      if (this.txtEl && this.txtEl.contains(e.target)) return;
      var _props = this.props,
          id = _props.id,
          value = _props.value,
          error = _props.error,
          type = _props.type,
          onBlur = _props.onBlur,
          onChange = _props.onChange,
          calendar = _props.calendar;
      var focus = this.state.focus;

      if (!value && !this.getInputElValue()) {
        this.setState({ selected: false });
      }
      if (focus && !calendar) {
        this.setState({ focus: false });
      }
      // trim value for all types except 'password'
      if (value && type !== 'password' && value !== value.trim()) {
        onChange({ id: id, value: value.trim(), error: error });
      }
      onBlur();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        this.setState({ selected: !!nextProps.value });
      }
    }

    // get input type

  }, {
    key: 'getInputType',
    value: function getInputType(type, passShow) {
      return type === 'password' && !passShow ? 'password' : 'text';
    }

    // focus for field

  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      var _props2 = this.props,
          visibility = _props2.visibility,
          onFocus = _props2.onFocus,
          id = _props2.id;

      if (visibility !== 'visible') return;
      this.inputRef.current.focus();
      this.setState({ selected: true, focus: true });
      onFocus(id);
    }

    // blur for field

  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      var _props3 = this.props,
          calendar = _props3.calendar,
          value = _props3.value,
          visibility = _props3.visibility,
          onBlur = _props3.onBlur,
          id = _props3.id;

      if (visibility !== 'visible') return;
      if (!calendar) {
        this.setState({
          selected: Boolean(value) || false,
          focus: false
        });
      }
      onBlur(id);
    }

    // Handle change for single line field

  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      var _props4 = this.props,
          id = _props4.id,
          onChange = _props4.onChange;

      var _formatAndCheck = this.formatAndCheck(e.target.value),
          error = _formatAndCheck.error,
          value = _formatAndCheck.value;

      onChange({ id: id, value: value, error: error });
    }

    // Handle change for multiple line field

  }, {
    key: 'handleChangeMult',
    value: function handleChangeMult(_ref) {
      var multVal = _ref.value;
      var _props5 = this.props,
          id = _props5.id,
          onChange = _props5.onChange;

      var _formatAndCheck2 = this.formatAndCheck(multVal),
          error = _formatAndCheck2.error,
          value = _formatAndCheck2.value;

      onChange({ id: id, value: value, error: error });
    }
  }, {
    key: 'formatAndCheck',
    value: function formatAndCheck(value) {
      var error = false;
      var _props6 = this.props,
          regexp = _props6.regexp,
          type = _props6.type,
          length = _props6.length,
          required = _props6.required;


      if (type === 'email') {
        // eslint-disable-next-line max-len
        var re = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
        if (!re.test(String(value))) {
          error = true;
        }
      }
      // Formatting type int
      if (type === 'int' || type === 'phone' && /\D/g.test(value)) {
        value = value.replace(/\D/g, '');
      }
      // Formatting type float
      if (type === 'float') {
        value = value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
      }
      // Restriction by string length
      if (length && value.length >= length) {
        value = value.substr(0, length);
      }
      // check regexp
      if (regexp) {
        var r = new RegExp(regexp);
        error = !r.test(value.trim());
      }
      if (required && (!value || !value.length)) {
        error = true;
      }
      return { error: error, value: value };
    }

    // show/hide password

  }, {
    key: 'togglePass',
    value: function togglePass() {
      var passShow = this.state.passShow;

      this.setState({ passShow: !passShow });
    }
  }, {
    key: 'handleClickRightIcon',
    value: function handleClickRightIcon() {
      var _props7 = this.props,
          onClickRightIcon = _props7.onClickRightIcon,
          id = _props7.id;

      onClickRightIcon(id);
    }

    // Render fake input fields for disabling browser autocomplete

  }, {
    key: 'renderFakePass',
    value: function renderFakePass() {
      if (this.props.type !== 'password') return null;
      return _react2.default.createElement(
        'div',
        { style: { display: 'none' } },
        _react2.default.createElement('input', { type: 'text' }),
        _react2.default.createElement('input', { type: 'password' })
      );
    }

    // render icon on the left side

  }, {
    key: 'renderIcon',
    value: function renderIcon(icon, classes, position, error, handleClick) {
      if (!icon) return null;
      var _props8 = this.props,
          size = _props8.size,
          bordered = _props8.bordered;

      return _react2.default.createElement(
        'div',
        { className: (0, _clsx2.default)(classes[position], position) },
        _react2.default.createElement(_Icon2.default, {
          type: icon,
          error: error,
          onClick: handleClick,
          size: bordered && size === 'small' ? 'small' : 'medium'
        })
      );
    }

    // render show\hide password button for text field's type password

  }, {
    key: 'renderShowPassBtn',
    value: function renderShowPassBtn(type, passShow, classes) {
      if (type !== 'password') return null;
      var _props9 = this.props,
          size = _props9.size,
          bordered = _props9.bordered;

      var iconType = passShow ? 'no_eye' : 'eye';
      return _react2.default.createElement(_Icon2.default, {
        type: iconType,
        size: bordered && size === 'small' ? 'small' : 'medium',
        className: classes.passIcon,
        onClick: this.togglePass
      });
    }

    // render error message

  }, {
    key: 'renderHelperText',
    value: function renderHelperText(error, helperText, classes) {
      if (!helperText) return null;
      return _react2.default.createElement(
        'div',
        { className: (0, _clsx2.default)(classes.helperText, { error: error }) },
        helperText
      );
    }

    // Отрисовать Calendar

  }, {
    key: 'renderCalendar',
    value: function renderCalendar(Calendar, classes) {
      var _this2 = this;

      var focus = this.state.focus;
      var onBlur = this.props.onBlur;

      var top = 10;
      if (this.field && window.innerHeight - this.field.offsetTop < 380) {
        top = window.innerHeight - this.field.offsetTop - 380;
      }

      if (focus && Calendar) {
        var calendar = Calendar();
        return _react2.default.createElement(
          'div',
          { className: (0, _clsx2.default)(classes.calendar), style: { top: top } },
          _react2.default.cloneElement(calendar, {
            onClose: function onClose() {
              _this2.setState({ focus: false });
              onBlur();
            }
          })
        );
      }
    }

    // Отрисовать placeholder

  }, {
    key: 'renderPlaceholder',
    value: function renderPlaceholder() {
      var _props10 = this.props,
          placeholder = _props10.placeholder,
          size = _props10.size,
          label = _props10.label,
          bordered = _props10.bordered;
      var selected = this.state.selected;

      if (!placeholder) return null;
      if (size === 'small' || selected || !label && !selected || bordered) return placeholder;
    }

    // Отрисовать однострочное поле ввода

  }, {
    key: 'renderInput',
    value: function renderInput() {
      var _props11 = this.props,
          type = _props11.type,
          visibility = _props11.visibility,
          value = _props11.value,
          onKeyPress = _props11.onKeyPress,
          onKeyUp = _props11.onKeyUp,
          onKeyDown = _props11.onKeyDown;
      var passShow = this.state.passShow;

      var tabIndex = visibility !== 'visible' ? -1 : 0;

      return _react2.default.createElement('input', {
        ref: this.inputRef,
        type: this.getInputType(type, passShow),
        value: value,
        onClick: this.handleFocus,
        onChange: this.handleChange,
        autoComplete: 'off',
        disabled: visibility === 'disabled',
        tabIndex: tabIndex,
        placeholder: this.renderPlaceholder(),
        onKeyPress: onKeyPress,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        onBlur: this.handleBlur
      });
    }

    // Отрисовать многострочное поле ввода

  }, {
    key: 'renderMultiline',
    value: function renderMultiline() {
      var _props12 = this.props,
          id = _props12.id,
          visibility = _props12.visibility,
          value = _props12.value,
          onKeyPress = _props12.onKeyPress,
          onKeyUp = _props12.onKeyUp,
          onKeyDown = _props12.onKeyDown;

      var tabIndex = visibility !== 'visible' ? -1 : 0;

      return _react2.default.createElement(ContentEditCom, {
        id: id,
        ref: this.inputRef,
        type: 'html',
        visibility: visibility,
        onFocus: this.handleFocus,
        onChange: this.handleChangeMult,
        onKeyPress: onKeyPress,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        tabIndex: tabIndex,
        placeholder: this.renderPlaceholder(),
        value: value,
        onBlur: this.handleBlur
      });
    }

    // Отрисовать label

  }, {
    key: 'renderLabel',
    value: function renderLabel() {
      var _props13 = this.props,
          label = _props13.label,
          size = _props13.size,
          bordered = _props13.bordered,
          classes = _props13.classes;

      if (!bordered && size === 'small') return null;
      return _react2.default.createElement(
        'div',
        { className: (0, _clsx2.default)(classes.label, 'label'), onClick: this.handleFocus },
        label
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props14 = this.props,
          classes = _props14.classes,
          className = _props14.className,
          id = _props14.id,
          type = _props14.type,
          size = _props14.size,
          visibility = _props14.visibility,
          error = _props14.error,
          rightIcon = _props14.rightIcon,
          helperText = _props14.helperText,
          calendar = _props14.calendar,
          multiline = _props14.multiline,
          bordered = _props14.bordered;
      var _state = this.state,
          passShow = _state.passShow,
          focus = _state.focus,
          selected = _state.selected;

      var leftIcon = type === 'phone' ? 'plus' : this.props.leftIcon;
      leftIcon = calendar ? 'calendar' : leftIcon;

      return _react2.default.createElement(
        'div',
        {
          id: id,
          className: (0, _clsx2.default)(className, classes.txt, classes[size], { error: !!error }, { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' }, { focus: !!focus }, { selected: !!selected }, { hasLeftIcon: !!leftIcon }, { bordered: bordered }),
          ref: function ref(el) {
            _this3.txtEl = el;
          }
        },
        this.renderLabel(),
        _react2.default.createElement(
          'div',
          {
            className: (0, _clsx2.default)(classes.field, 'field'),
            onClick: this.handleFocus,
            ref: function ref(el) {
              _this3.field = el;
            }
          },
          this.renderIcon(leftIcon, classes, 'leftIcon', error),
          multiline ? this.renderMultiline() : this.renderInput(),
          this.renderIcon(rightIcon, classes, 'rightIcon', error, this.handleClickRightIcon.bind(this)),
          this.renderShowPassBtn(type, passShow, classes),
          this.renderFakePass()
        ),
        this.renderHelperText(error, helperText, classes),
        this.renderCalendar(calendar, classes)
      );
    }
  }]);
  return TextField;
}(_react.PureComponent)) || _class) || _class);


TextField.defaultProps = {
  type: 'text',
  size: 'medium',
  visibility: 'visible',
  error: false,
  location: 'en',
  calendar: null,
  multiline: false,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onClickRightIcon: function onClickRightIcon() {},
  onKeyPress: function onKeyPress() {},
  onKeyUp: function onKeyUp() {},
  onKeyDown: function onKeyDown() {},
  bordered: false
};

TextField.propTypes = {
  classes: _propTypes2.default.object,
  /** text field's type */
  type: _propTypes2.default.oneOf(['text', 'password', 'phone', 'email', 'int', 'float']),
  /** text field's size */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  /** text field's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']),
  /** Does text field's has an error */
  error: _propTypes2.default.bool,
  /** text field's helper text under input */
  helperText: _propTypes2.default.string,
  /** text field's label */
  label: _propTypes2.default.string,
  /** Is text field required? */
  required: _propTypes2.default.bool,
  /** text field's value */
  value: _propTypes2.default.string,
  /** text field's regular expression */
  regexp: _propTypes2.default.string,
  /** text field's length */
  length: _propTypes2.default.number,
  /** text field's left icon */
  leftIcon: _propTypes2.default.string,
  /** text field's right icon */
  rightIcon: _propTypes2.default.string,
  /** placeholder */
  placeholder: _propTypes2.default.string,
  /** input autoFocus */
  autoFocus: _propTypes2.default.bool,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** element id */
  id: _propTypes2.default.string,
  /** onChange callback */
  onChange: _propTypes2.default.func,
  /** onFocus callback */
  onFocus: _propTypes2.default.func,
  /** onBlur callback */
  onBlur: _propTypes2.default.func,
  /** onKeyPress callback */
  onKeyPress: _propTypes2.default.func,
  /** onKeyUp callback */
  onKeyUp: _propTypes2.default.func,
  /** onKeyDown callback */
  onKeyDown: _propTypes2.default.func,
  /** onClickRightIcon callback */
  onClickRightIcon: _propTypes2.default.func,
  /** Calendar */
  calendar: _propTypes2.default.func,
  /** multiline field */
  multiline: _propTypes2.default.bool,
  /** Use that property to pass a ref callback to the native input component. */
  forwardRef: _propTypes2.default.object,
  /** bordered field */
  bordered: _propTypes2.default.bool
};

exports.default = TextField;