import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import cn from 'classnames/bind';
import injectSheet from 'react-jss';
import styles from './Icon.style';
import Utils from '../utils/utils';

import Add from './img/Add';
import Archive from './img/Archive';
import Arrow from './img/Arrow';
import Arrows from './img/Arrows';
import ArrowStat from './img/ArrowStat';
import Attach from './img/Attach';
import Calendar from './img/Calendar';
import Camera from './img/Camera';
import Check from './img/Check';
import CheckBox from './img/CheckBox';
import CheckboxOff from './img/CheckboxOff';
import CheckboxOn from './img/CheckboxOn';
import Clock from './img/Clock';
import Close from './img/Close';
import Comment from './img/Comment';
import Channels from './img/Channels';
import ContactUs from './img/ContactUs';
import Dashboard from './img/Dashboard';
import Delete from './img/Delete';
import Diagram from './img/Diagram';
import Document from './img/Document';
import Dog from './img/Dog';
import Dropdown from './img/Dropdown';
import Edit from './img/Edit';
import Exit from './img/Exit';
import Eye from './img/Eye';
import Files from './img/Files';
import Graph from './img/Graph';
import Hash from './img/Hash';
import Hide from './img/Hide';
import Hierarchy from './img/Hierarchy';
import Key from './img/Key';
import Link from './img/Link';
import List from './img/List';
import CleverLeaf from './img/CleverLeaf';
import Client from './img/Client';
import Mail from './img/Mail';
import Maxsize from './img/Maxsize';
import Message from './img/Message';
import Microphone from './img/Microphone';
import Minimize from './img/Minimize';
import More from './img/More';
import Mute from './img/Mute';
import NoEye from './img/NoEye';
import Notification from './img/Notification';
import PersonAdd from './img/PersonAdd';
import Persons from './img/Persons';
import Plus from './img/Plus';
import Process from './img/Process';
import QuestionMark from './img/QuestionMark';
import RadioOff from './img/RadioOff';
import RadioOn from './img/RadioOn';
import Reject from './img/Reject';
import Repeat from './img/Repeat';
import Search from './img/Search';
import Send from './img/Send';
import Settings from './img/Settings';
import SideView from './img/SideView';
import Sign from './img/Sign';
import Smile from './img/Smile';
import StarEmpty from './img/StarEmpty';
import StarFull from './img/StarFull';
import Stream from './img/Stream';
import Trash from './img/Trash';
import Picture from './img/Picture';
import TypeGroup from './img/TypeGroup';
import TypeSingle from './img/TypeSingle';
import Wallet from './img/Wallet';

const __TYPES__ = {
  Add,
  Archive,
  Arrow,
  Arrows,
  ArrowStat,
  Attach,
  Calendar,
  Camera,
  Check,
  CheckBox,
  CheckboxOff,
  CheckboxOn,
  Clock,
  Close,
  Comment,
  Channels,
  ContactUs,
  Dashboard,
  Delete,
  Diagram,
  Document,
  Dog,
  Dropdown,
  Edit,
  Exit,
  Eye,
  Files,
  Graph,
  Hash,
  Hide,
  Hierarchy,
  Key,
  Link,
  List,
  CleverLeaf,
  Client,
  Mail,
  Maxsize,
  Message,
  Microphone,
  Minimize,
  More,
  Mute,
  NoEye,
  Notification,
  PersonAdd,
  Persons,
  Plus,
  Process,
  RadioOff,
  RadioOn,
  Reject,
  Repeat,
  Search,
  Send,
  Stream,
  Settings,
  SideView,
  Sign,
  Smile,
  Picture,
  QuestionMark,
  StarEmpty,
  StarFull,
  Trash,
  TypeGroup,
  TypeSingle,
  Wallet,
};


@injectSheet(styles, {inject: ['classes', 'sheet']})
class Icon extends PureComponent {
  constructor(props, context) {
    super(props, context);
    this.state = {
      instanceId: Utils.random(),
      colorRule: null,
    };
  }

  componentDidMount() {
    this._isMounted = true;
    this.changeColor(this.props.color);
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  componentWillReceiveProps(nextProps) {
    if (!this._isMounted) return;
    this.changeColor(nextProps.color);
  }

  // Icon change color
  changeColor(color) {
    if (!color) return;
    const {sheet} = this.props;
    const {instanceId} = this.state;
    const colorRule = sheet.addRule(instanceId, {
      '& .fill': {
        fill: color,
      },
      '& .stroke': {
        stroke: color,
      },
    });
    this.setState({colorRule});
  }

  render() {
    const {type} = this.props;
    const {colorRule, instanceId} = this.state;
    const IconComp = __TYPES__[Utils.toPascalCase(type)];
    const {
      classes,
      size,
      className,
      id,
      onClick,
      onMouseEnter,
      onMouseLeave,
      error,
      visibility,
      forwardRef,
    } = this.props;
    const colorRuleClass = colorRule ? colorRule.options.classes[instanceId] : null;

    return (
      <i
        id={id}
        className={cn(className, classes.wrap, classes[size])}
        onClick={onClick}
        onMouseEnter={onMouseEnter}
        onMouseLeave={onMouseLeave}
        ref={forwardRef}
      >
        {IconComp ? (
          <IconComp
            className={cn(
              classes[size],
              classes.icon,
              colorRuleClass,
              {error: !!error},
              {hidden: visibility === 'hidden'},
              {disabled: visibility === 'disabled'},
            )}
          />
        ) : (
          ''
        )}
      </i>
    );
  }
}

Icon.defaultProps = {
  size: 'medium',
  visibility: 'visible',
  error: false,
  onClick: () => {
  },
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  },
};

Icon.propTypes = {
  classes: PropTypes.object,
  sheet: PropTypes.object,
  /** icon's type */
  type: PropTypes.string.isRequired,
  /** icon's size */
  size: PropTypes.oneOf(['micro', 'small', 'medium', 'large', 'xlarge']),
  /** icon's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** Does icon has an error */
  error: PropTypes.bool,
  /** icon's custom color */
  color: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** element id */
  id: PropTypes.string,
  /** callback onClick */
  onClick: PropTypes.func,
  /** callback onMouseEnter */
  onMouseEnter: PropTypes.func,
  /** callback onMouseLeave */
  onMouseLeave: PropTypes.func,
  /** Use that property to pass a ref callback to the native input component. */
  forwardRef: PropTypes.func,
};

export default Icon;
