import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import enhanceWithClickOutside from 'react-click-outside';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Menu.style';

@injectSheet(styles)
@enhanceWithClickOutside
class Menu extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {visibility: props.visibility};
    this.handleClick = ::this.handleClick;
  }

  handleClick(value) {
    const {id, visibility} = this.props;
    if (visibility === 'disabled') return;
    const error = false;
    this.props.onClick({id, value, error});
  }

  // Handler for click outside of component
  handleClickOutside() {
    const {visibility} = this.state;
    const {type} = this.props;
    if (type === 'sideBar') return;
    if (visibility === 'visible') {
      this.setState({visibility: 'hidden'});
      this.props.onClose();
    }
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.visibility !== nextProps.visibility) {
      this.setState({visibility: nextProps.visibility});
    }
  }

  render() {
    const {
      id,
      classes,
      className,
      children,
      width,
      activeItem,
      openType,
      type,
      visibility: visProps,
      onMouseMove,
      size,
    } = this.props;
    const {visibility: visState} = this.state;
    // Корректировка свойства visibility, когда контроль отображения меню
    // должен осуществлять только родительский компонент, то ставим тип меню slaveMenu
    const correctVisibility = type === 'slaveMenu' ? visProps : visState;
    return (
      <div
        id={id}
        className={cn(
          className,
          classes.menu,
          classes[size],
          {openUp: openType === 'top'},
          {hidden: correctVisibility === 'hidden'},
          {disabled: correctVisibility === 'disabled'},
        )}
        onMouseMove={onMouseMove}
        style={{maxWidth: width}}
      >
        {React.Children.map(children, child => {
          const params = {onClick: this.handleClick, size};
          if (activeItem && child.type.displayName === 'Jss(MenuItem)') {
            params.activeItem = activeItem;
          }
          return React.cloneElement(child, params);
        })}
      </div>
    );
  }
}

Menu.defaultProps = {
  children: null,
  id: null,
  visibility: 'visible',
  error: false,
  type: 'menu',
  onClick: () => {
  },
  onClose: () => {
  },
  onMouseMove: () => {
  },
  size: 'medium',
};

Menu.propTypes = {
  classes: PropTypes.object,
  /** menu's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** menu's options */
  children: PropTypes.node,
  /** menu's type */
  type: PropTypes.oneOf(['menu', 'sideBar', 'slaveMenu']),
  /** menu's type open */
  openType: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** menu's id */
  id: PropTypes.string,
  /** menu's width */
  width: PropTypes.number,
  /** active item */
  activeItem: PropTypes.string,
  /** onClick callback */
  onClick: PropTypes.func,
  /** onMouseMove callback */
  onMouseMove: PropTypes.func,
  /** onClose callback */
  onClose: PropTypes.func,
  /** menu's size */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
};

export default Menu;
