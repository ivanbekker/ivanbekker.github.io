import PropTypes from 'prop-types';
import React, {Fragment, PureComponent} from 'react';
import ReactDOM from 'react-dom';
import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Label from '../Label';
import Icon from '../Icon';
import UploadItem from './UploadItem';
import FileUtils from '../utils/fileUtils';
import styles from './Upload.style';

@injectSheet(styles)
class Upload extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.removeFile = ::this.removeFile;
  }

  componentWillMount() {
    this._setInitState(this.props);
  }

  componentWillReceiveProps(nextProps) {
    this._setInitState(nextProps);
  }

  _setInitState(props) {
    let hasAvatar = false;
    React.Children.forEach(props.children, child => {
      hasAvatar = hasAvatar || child.type.InnerComponent.name === 'Avatar';
    });
    const renderCustomBth = !!props.children;
    const allowMultiple = hasAvatar ? false : props.multiple;
    const files = props.value || [];
    this.setState({hasAvatar, allowMultiple, renderCustomBth, files});
  }

  mergeFiles(newFiles) {
    const {renderCustomBth, hasAvatar, files} = this.state;
    if (!renderCustomBth || hasAvatar) return newFiles;
    return files.concat(newFiles);
  }

  checkError(files, maxFileSize) {
    const bigFile = files.find(i => i.size > maxFileSize);
    return !!bigFile;
  }

  async selectFiles(filesSource) {
    const {id, onChange, visibility, maxFileSize} = this.props;
    if (visibility !== 'visible') return;
    const files = await FileUtils.makeFilesArr(filesSource);
    const nFiles = this.mergeFiles(files);
    this.setState({files: nFiles});
    const error = this.checkError(nFiles, maxFileSize);
    onChange({id, value: nFiles, error});
    this.input.value = '';
  }

  removeFile(fileId) {
    const {id, onChange, maxFileSize} = this.props;
    const files = this.state.files.slice();
    const fileIndex = files.findIndex(i => i.id === fileId);
    files.splice(fileIndex, 1);
    this.setState({files});
    const error = this.checkError(files, maxFileSize);
    onChange({id, value: files, error});
  }

  renderPreview(viewType) {
    const {classes, maxFileSize, maxFileSizeErrorText} = this.props;
    const {files} = this.state;
    const fListClasses = viewType === 'default' ? classes.filesList : cn(classes.portal, 'portal');
    return (
      <div className={fListClasses}>
        <ReactCSSTransitionGroup
          transitionName={{
            enter: classes.animEnter,
            enterActive: classes.animEnterActive,
            leave: classes.animLeave,
            leaveActive: classes.animLeaveActive,
          }}
          transitionEnterTimeout={100}
          transitionLeaveTimeout={300}
        >
          {files.map(item => (
            <UploadItem
              key={item.id}
              maxFileSize={maxFileSize}
              maxFileSizeErrorText={maxFileSizeErrorText}
              error={item.size > maxFileSize}
              viewType={viewType}
              onRemove={this.removeFile}
              {...item}
            />
          ))}
        </ReactCSSTransitionGroup>
      </div>
    );
  }

  renderPortalPreview() {
    const {portal} = this.props;
    return ReactDOM.createPortal(this.renderPreview('portal'), portal);
  }

  renderDefaultBtn() {
    const {classes, label, browseLinkLabel, accept, multiple, visibility, preview} = this.props;
    const {files} = this.state;
    return (
      <Fragment>
        <div className={classes.loadBtn}>
          <Icon className={classes.iconUpload} type="hide"/>
          <Label value={label}/>&nbsp;
          <div className={classes.browseLinkBox}>
            <Label className={classes.browseLink} value={browseLinkLabel}/>
            <input
              ref={(el) => (this.input = el)}
              type="file"
              accept={accept}
              disabled={visibility !== 'visible'}
              multiple={multiple}
              onChange={e => this.selectFiles(e.target.files)}
            />
          </div>
        </div>
        {files.length && preview ? this.renderPreview('default') : null}
      </Fragment>
    );
  }

  renderCustomBtn() {
    const {children, classes, accept, error, preview, portal, visibility} = this.props;
    const {files, hasAvatar, allowMultiple} = this.state;
    const file = files[0];
    const params = {};

    if (file) {
      params.src = file.value;
    }

    const Components = React.Children.map(children, child => React.cloneElement(child, params));

    return (
      <div className={classes.customBox}>
        {hasAvatar ? (
          <Icon className={classes.iconCamera} type="camera" size="large" error={error}/>
        ) : null}
        <input
          ref={(el) => (this.input = el)}
          type="file"
          disabled={visibility !== 'visible'}
          accept={accept}
          multiple={allowMultiple}
          onChange={e => this.selectFiles(e.target.files)}
        />
        {Components}
        {portal && preview && files.length ? this.renderPortalPreview() : null}
      </div>
    );
  }

  render() {
    const {classes, className, id, visibility, error, helperText} = this.props;
    const {renderCustomBth} = this.state;
    const clUpload = cn(
      className,
      classes.upload,
      {custom: renderCustomBth},
      {error: !!error},
      {hidden: visibility === 'hidden'},
      {disabled: visibility === 'disabled'},
    );
    const typeRender = renderCustomBth ? this.renderCustomBtn() : this.renderDefaultBtn();
    return (
      <div id={id} className={clUpload}>
        {typeRender}
        <Label className={classes.helperText} value={helperText} fontSize="small"/>
      </div>
    );
  }
}

Upload.defaultProps = {
  visibility: 'visible',
  error: false,
  multiple: false,
  preview: false,
  children: null,
  maxFileSize: null,
  label: 'Drop files to attach, or',
  maxFileSizeErrorText: 'Exceeds the maximum upload size',
  browseLinkLabel: 'browse',
  type: 'default',
  onChange: () => {
  },
};

Upload.propTypes = {
  classes: PropTypes.object,
  /** Upload's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Does Upload has an error */
  error: PropTypes.bool.isRequired,
  /** Upload values */
  value: PropTypes.array, // eslint-disable-line react/no-unused-prop-types
  /** additional external class name */
  className: PropTypes.string,
  /** Upload's preview */
  preview: PropTypes.bool.isRequired,
  /** Upload's id */
  id: PropTypes.string,
  /** Upload label for start state */
  label: PropTypes.string,
  /** Upload label for start state */
  browseLinkLabel: PropTypes.string,
  /** Upload helper text under input */
  helperText: PropTypes.string,
  /** accept file formats */
  accept: PropTypes.string,
  /** multiple files */
  multiple: PropTypes.bool,
  /** onChange callback */
  onChange: PropTypes.func,
  /** Max file size's id */
  maxFileSize: PropTypes.number,
  /** Max File size error text */
  maxFileSizeErrorText: PropTypes.string,
  /** Upload children */
  children: PropTypes.node,
  /** portal for preview */
  portal: PropTypes.any,
};

export default Upload;
