import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import {Picker} from 'emoji-mart';
import enhanceWithClickOutside from 'react-click-outside';
import cn from 'clsx';
import Icon from '../Icon';
import styles from './Emoji.style';

@injectSheet(styles)
@enhanceWithClickOutside
class Emoji extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      hidePicker: true,
      pickerOffset: 24,
    };
    this.showPicker = ::this.showPicker;
    this.handleChange = ::this.handleChange;
  }

  // Get EmojiMart settings ot get default settings
  getEmojiProps() {
    const {emojiMart} = this.props;
    if (emojiMart) return emojiMart;
    return {
      set: 'apple',
      sheetSize: 32,
      showPreview: false,
    };
  }

  // Handler for click outside of component
  handleClickOutside(e) {
    if (this.emojiBox && this.emojiBox.contains(e.target)) return;
    this.setState({hidePicker: true});
  }

  handleChange(value) {
    const {id, onChange} = this.props;
    onChange({id, value, error: false});
  }

  // Show emoji picker
  showPicker() {
    const {visibility} = this.props;
    if (visibility !== 'visible') return;
    const pickerOffset = this.calcPickerPosition();
    this.setState({
      hidePicker: false,
      pickerOffset,
    });
  }

  // Calculate picker position
  calcPickerPosition() {
    const pickerHeight = 321;
    const pickerMargin = 8;
    const emojiBoxOffsetTop = this.emojiBox.getBoundingClientRect().top;
    let top = this.icon.offsetWidth + pickerMargin;
    if (window.innerHeight - emojiBoxOffsetTop < pickerHeight + pickerMargin) {
      top = -(pickerHeight + pickerMargin);
    }
    return top;
  }

  render() {
    const {classes, className, id, size, visibility} = this.props;

    const {hidePicker, pickerOffset} = this.state;

    const emClasses = cn(
      className,
      classes.emoji,
      classes[size],
      {hidden: visibility === 'hidden'},
      {disabled: visibility === 'disabled'},
    );

    const emojiProps = this.getEmojiProps();

    return (
      <div ref={el => (this.emojiBox = el)} id={id} className={emClasses} onClick={this.showPicker}>
        <Icon forwardRef={el => (this.icon = el)} type="smile" size={size}/>
        <div className={cn(classes.picker, {hidden: hidePicker})} style={{top: pickerOffset}}>
          <Picker {...emojiProps} onSelect={this.handleChange}/>
        </div>
      </div>
    );
  }
}

Emoji.defaultProps = {
  visibility: 'visible',
  size: 'large',
  onChange: () => {
  },
};

Emoji.propTypes = {
  classes: PropTypes.object,
  /** Emoji's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Emoji's id */
  id: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** text Emoji's size */
  size: PropTypes.oneOf(['micro', 'small', 'medium', 'large', 'xlarge']).isRequired,
  /** EmojiMart props https://github.com/missive/emoji-mart*/
  emojiMart: PropTypes.object,
  /** onChange callback */
  onChange: PropTypes.func,
};

export default Emoji;
