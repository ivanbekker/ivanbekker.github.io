'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Select = require('./Select.style');

var _Select2 = _interopRequireDefault(_Select);

var _TextField = require('../TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Menu = require('../Menu');

var _Menu2 = _interopRequireDefault(_Menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Select = (_dec = (0, _reactJss2.default)(_Select2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(Select, _PureComponent);

  function Select(props) {
    (0, _classCallCheck3.default)(this, Select);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Select.__proto__ || (0, _getPrototypeOf2.default)(Select)).call(this, props));

    _this.state = {
      selected: false,
      activeTitle: null
    };
    _this.handleMenuItemClick = _this.handleMenuItemClick.bind(_this);
    _this.handleMenuClose = _this.handleMenuClose.bind(_this);
    _this.handleTextFieldFocus = _this.handleTextFieldFocus.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Select, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setValue();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setValue(nextProps.value);
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      var find = void 0;
      var children = this.props.children;

      value = typeof value === 'undefined' ? this.props.value : value;
      if (!value || !value.length) {
        this.setState({ activeTitle: null });
        return;
      }
      _react2.default.Children.forEach(children, function (child) {
        var childValue = child.props.value || '';
        var childValueF = childValue.toString().toLowerCase();
        var valueF = value.toString().toLowerCase();
        if (childValueF === valueF) {
          find = child;
        }
      });
      if (!find) {
        this.setState({ activeTitle: value });
        return;
      }
      this.setState({ activeTitle: find.props.label });
    }
  }, {
    key: 'handleMenuItemClick',
    value: function handleMenuItemClick(_ref) {
      var value = _ref.value;

      var error = false;
      var _props = this.props,
          id = _props.id,
          required = _props.required;

      if (required && typeof value === 'undefined') {
        error = true;
      }
      this.setValue(value);
      this.props.onChange({ id: id, value: value, error: error });
      this.setState({ selected: false });
    }
  }, {
    key: 'handleTextFieldFocus',
    value: function handleTextFieldFocus() {
      this.setState({ selected: true });
    }
  }, {
    key: 'handleTextFieldBlur',
    value: function handleTextFieldBlur() {
      this.setState({ selected: false });
    }
  }, {
    key: 'handleMenuClose',
    value: function handleMenuClose() {
      this.setState({ selected: false });
    }
  }, {
    key: 'renderTextField',
    value: function renderTextField(classes, label, error, helperText, visibility, bordered) {
      return _react2.default.createElement(_TextField2.default, {
        className: classes.edit,
        label: label,
        error: error,
        helperText: helperText,
        value: this.state.activeTitle || '',
        rightIcon: 'dropdown',
        onFocus: this.handleTextFieldFocus,
        visibility: visibility,
        bordered: bordered
      });
    }
  }, {
    key: 'renderMenu',
    value: function renderMenu(id, classes, children, visibility) {
      if (!this.state.selected || visibility === 'disabled') return null;
      return _react2.default.createElement(
        _Menu2.default,
        {
          id: id,
          className: (0, _clsx2.default)(classes.menu),
          openType: this.props.openType,
          onClick: this.handleMenuItemClick,
          onClose: this.handleMenuClose,
          activeItem: this.props.value
        },
        children
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          classes = _props2.classes,
          id = _props2.id,
          className = _props2.className,
          visibility = _props2.visibility,
          label = _props2.label,
          error = _props2.error,
          helperText = _props2.helperText,
          children = _props2.children,
          bordered = _props2.bordered;


      return _react2.default.createElement(
        'div',
        { id: id, className: (0, _clsx2.default)(className, classes.select) },
        this.renderTextField(classes, label, error, helperText, visibility, bordered),
        this.renderMenu(id, classes, children, visibility)
      );
    }
  }]);
  return Select;
}(_react.PureComponent)) || _class);


Select.defaultProps = {
  children: null,
  id: null,
  visibility: 'visible',
  error: false,
  bordered: false,
  onChange: function onChange() {}
};

Select.propTypes = {
  // TODO - добавить вид с бордерами
  classes: _propTypes2.default.object,
  /** select's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** select's options */
  children: _propTypes2.default.node.isRequired,
  /** select's id */
  id: _propTypes2.default.string,
  /** select's label */
  label: _propTypes2.default.string,
  /** select's value */
  value: _propTypes2.default.string,
  /** Is select field required? */
  required: _propTypes2.default.bool,
  /** onChange callback */
  onChange: _propTypes2.default.func,
  /** select's helperText */
  helperText: _propTypes2.default.string,
  /** Does select has an error */
  error: _propTypes2.default.bool.isRequired,
  /** Type open menu */
  openType: _propTypes2.default.string,
  /** bordered field */
  bordered: _propTypes2.default.bool
};

exports.default = Select;