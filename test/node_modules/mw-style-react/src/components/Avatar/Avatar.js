import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Avatar.style';

@injectSheet(styles)
class Avatar extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      imageError: false
    };
    this.handleClick = ::this.handleClick;
  }

  componentDidMount() {
    if (this.props.src) {
      this.setImage(this.props.src);
    }
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.src !== this.props.src) {
      this.setImage(nextProps.src);
    }
  }

  setImage(src) {
    const hdLoaderImg = new Image();
    hdLoaderImg.onload = () => {
      if (this.avatarEl) {
        this.avatarEl.setAttribute(
          'style',
          `background-image: url('${src}')`
        );
        this.setState({imageError: false});
      }
    };
    hdLoaderImg.onerror = () => {
      this.avatarEl.setAttribute(
        'style', ''
      );
      this.setState({imageError: true});
    };
    hdLoaderImg.src = src;
  }

  getInitials(label) {
    if (!label) return '';
    return label
      .trim()
      .split(/\s+/)
      .map(n => (n[0] ? n[0].toUpperCase() : ''))
      .splice(0, 2)
      .join('');
  }

  handleClick() {
    const {onClick} = this.props;
    onClick();
  }

  renderInitials() {
    const {label} = this.props;
    return <span>{this.getInitials(label)}</span>;
  }

  render() {
    const {
      children,
      className,
      classes,
      size,
      badge,
      id,
      src,
      bgColor,
      textColor,
      onMouseEnter,
      onMouseLeave
    } = this.props;
    const {imageError} = this.state;
    const baseClasses = cn(className, classes.avatar, classes[size]);
    return (
      <div
        id={id}
        ref={el => (this.avatarEl = el)}
        className={baseClasses}
        onMouseEnter={onMouseEnter}
        onMouseLeave={onMouseLeave}
        style={{
          backgroundColor: bgColor,
          color: textColor,
        }}
        onClick={this.handleClick}
      >
        {children || ((!src || imageError) && this.renderInitials())}
        {badge && React.cloneElement(badge, {className: 'status'})}
      </div>
    );
  }
}

Avatar.defaultProps = {
  size: 'medium',
  onClick: () => {
  },
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  },
  children: null,
  badge: null,
};

Avatar.propTypes = {
  classes: PropTypes.object,
  /** additional external class name */
  className: PropTypes.string,
  /** avatar size */
  size: PropTypes.oneOf(['small', 'medium', 'large', 'xlarge', 'xxlarge']),
  /** label */
  label: PropTypes.string,
  /** element id */
  id: PropTypes.string,
  /** avatar image src */
  src: PropTypes.string,
  /** callback onClick */
  onClick: PropTypes.func,
  /** color text if no image */
  textColor: PropTypes.string,
  /** color avatar if no image */
  bgColor: PropTypes.string,
  /** Avatar's inner node */
  children: PropTypes.node,
  /** Badge for status  */
  badge: PropTypes.node,
  /** callback onMouseEnter */
  onMouseEnter: PropTypes.func,
  /** callback onMouseLeave */
  onMouseLeave: PropTypes.func,
};

export default Avatar;
