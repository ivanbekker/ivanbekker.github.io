'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _UploadItem = require('./UploadItem');

var _UploadItem2 = _interopRequireDefault(_UploadItem);

var _fileUtils = require('../utils/fileUtils');

var _fileUtils2 = _interopRequireDefault(_fileUtils);

var _Upload = require('./Upload.style');

var _Upload2 = _interopRequireDefault(_Upload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Upload = (_dec = (0, _reactJss2.default)(_Upload2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(Upload, _PureComponent);

  function Upload(props) {
    (0, _classCallCheck3.default)(this, Upload);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Upload.__proto__ || (0, _getPrototypeOf2.default)(Upload)).call(this, props));

    _this.state = {};
    _this.removeFile = _this.removeFile.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Upload, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._setInitState(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this._setInitState(nextProps);
    }
  }, {
    key: '_setInitState',
    value: function _setInitState(props) {
      var hasAvatar = false;
      _react2.default.Children.forEach(props.children, function (child) {
        hasAvatar = hasAvatar || child.type.InnerComponent.name === 'Avatar';
      });
      var renderCustomBth = !!props.children;
      var allowMultiple = hasAvatar ? false : props.multiple;
      var files = props.value || [];
      this.setState({ hasAvatar: hasAvatar, allowMultiple: allowMultiple, renderCustomBth: renderCustomBth, files: files });
    }
  }, {
    key: 'mergeFiles',
    value: function mergeFiles(newFiles) {
      var _state = this.state,
          renderCustomBth = _state.renderCustomBth,
          hasAvatar = _state.hasAvatar,
          files = _state.files;

      if (!renderCustomBth || hasAvatar) return newFiles;
      return files.concat(newFiles);
    }
  }, {
    key: 'checkError',
    value: function checkError(files, maxFileSize) {
      var bigFile = files.find(function (i) {
        return i.size > maxFileSize;
      });
      return !!bigFile;
    }
  }, {
    key: 'selectFiles',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(filesSource) {
        var _props, id, onChange, visibility, maxFileSize, files, nFiles, error;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _props = this.props, id = _props.id, onChange = _props.onChange, visibility = _props.visibility, maxFileSize = _props.maxFileSize;

                if (!(visibility !== 'visible')) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt('return');

              case 3:
                _context.next = 5;
                return _fileUtils2.default.makeFilesArr(filesSource);

              case 5:
                files = _context.sent;
                nFiles = this.mergeFiles(files);

                this.setState({ files: nFiles });
                error = this.checkError(nFiles, maxFileSize);

                onChange({ id: id, value: nFiles, error: error });
                this.input.value = '';

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function selectFiles(_x) {
        return _ref.apply(this, arguments);
      }

      return selectFiles;
    }()
  }, {
    key: 'removeFile',
    value: function removeFile(fileId) {
      var _props2 = this.props,
          id = _props2.id,
          onChange = _props2.onChange,
          maxFileSize = _props2.maxFileSize;

      var files = this.state.files.slice();
      var fileIndex = files.findIndex(function (i) {
        return i.id === fileId;
      });
      files.splice(fileIndex, 1);
      this.setState({ files: files });
      var error = this.checkError(files, maxFileSize);
      onChange({ id: id, value: files, error: error });
    }
  }, {
    key: 'renderPreview',
    value: function renderPreview(viewType) {
      var _this2 = this;

      var _props3 = this.props,
          classes = _props3.classes,
          maxFileSize = _props3.maxFileSize,
          maxFileSizeErrorText = _props3.maxFileSizeErrorText;
      var files = this.state.files;

      var fListClasses = viewType === 'default' ? classes.filesList : (0, _clsx2.default)(classes.portal, 'portal');
      return _react2.default.createElement(
        'div',
        { className: fListClasses },
        _react2.default.createElement(
          _reactAddonsCssTransitionGroup2.default,
          {
            transitionName: {
              enter: classes.animEnter,
              enterActive: classes.animEnterActive,
              leave: classes.animLeave,
              leaveActive: classes.animLeaveActive
            },
            transitionEnterTimeout: 100,
            transitionLeaveTimeout: 300
          },
          files.map(function (item) {
            return _react2.default.createElement(_UploadItem2.default, (0, _extends3.default)({
              key: item.id,
              maxFileSize: maxFileSize,
              maxFileSizeErrorText: maxFileSizeErrorText,
              error: item.size > maxFileSize,
              viewType: viewType,
              onRemove: _this2.removeFile
            }, item));
          })
        )
      );
    }
  }, {
    key: 'renderPortalPreview',
    value: function renderPortalPreview() {
      var portal = this.props.portal;

      return _reactDom2.default.createPortal(this.renderPreview('portal'), portal);
    }
  }, {
    key: 'renderDefaultBtn',
    value: function renderDefaultBtn() {
      var _this3 = this;

      var _props4 = this.props,
          classes = _props4.classes,
          label = _props4.label,
          browseLinkLabel = _props4.browseLinkLabel,
          accept = _props4.accept,
          multiple = _props4.multiple,
          visibility = _props4.visibility,
          preview = _props4.preview;
      var files = this.state.files;

      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          'div',
          { className: classes.loadBtn },
          _react2.default.createElement(_Icon2.default, { className: classes.iconUpload, type: 'hide' }),
          _react2.default.createElement(_Label2.default, { value: label }),
          '\xA0',
          _react2.default.createElement(
            'div',
            { className: classes.browseLinkBox },
            _react2.default.createElement(_Label2.default, { className: classes.browseLink, value: browseLinkLabel }),
            _react2.default.createElement('input', {
              ref: function ref(el) {
                return _this3.input = el;
              },
              type: 'file',
              accept: accept,
              disabled: visibility !== 'visible',
              multiple: multiple,
              onChange: function onChange(e) {
                return _this3.selectFiles(e.target.files);
              }
            })
          )
        ),
        files.length && preview ? this.renderPreview('default') : null
      );
    }
  }, {
    key: 'renderCustomBtn',
    value: function renderCustomBtn() {
      var _this4 = this;

      var _props5 = this.props,
          children = _props5.children,
          classes = _props5.classes,
          accept = _props5.accept,
          error = _props5.error,
          preview = _props5.preview,
          portal = _props5.portal,
          visibility = _props5.visibility;
      var _state2 = this.state,
          files = _state2.files,
          hasAvatar = _state2.hasAvatar,
          allowMultiple = _state2.allowMultiple;

      var file = files[0];
      var params = {};

      if (file) {
        params.src = file.value;
      }

      var Components = _react2.default.Children.map(children, function (child) {
        return _react2.default.cloneElement(child, params);
      });

      return _react2.default.createElement(
        'div',
        { className: classes.customBox },
        hasAvatar ? _react2.default.createElement(_Icon2.default, { className: classes.iconCamera, type: 'camera', size: 'large', error: error }) : null,
        _react2.default.createElement('input', {
          ref: function ref(el) {
            return _this4.input = el;
          },
          type: 'file',
          disabled: visibility !== 'visible',
          accept: accept,
          multiple: allowMultiple,
          onChange: function onChange(e) {
            return _this4.selectFiles(e.target.files);
          }
        }),
        Components,
        portal && preview && files.length ? this.renderPortalPreview() : null
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          classes = _props6.classes,
          className = _props6.className,
          id = _props6.id,
          visibility = _props6.visibility,
          error = _props6.error,
          helperText = _props6.helperText;
      var renderCustomBth = this.state.renderCustomBth;

      var clUpload = (0, _clsx2.default)(className, classes.upload, { custom: renderCustomBth }, { error: !!error }, { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' });
      var typeRender = renderCustomBth ? this.renderCustomBtn() : this.renderDefaultBtn();
      return _react2.default.createElement(
        'div',
        { id: id, className: clUpload },
        typeRender,
        _react2.default.createElement(_Label2.default, { className: classes.helperText, value: helperText, fontSize: 'small' })
      );
    }
  }]);
  return Upload;
}(_react.PureComponent)) || _class);


Upload.defaultProps = {
  visibility: 'visible',
  error: false,
  multiple: false,
  preview: false,
  children: null,
  maxFileSize: null,
  label: 'Drop files to attach, or',
  maxFileSizeErrorText: 'Exceeds the maximum upload size',
  browseLinkLabel: 'browse',
  type: 'default',
  onChange: function onChange() {}
};

Upload.propTypes = {
  classes: _propTypes2.default.object,
  /** Upload's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Does Upload has an error */
  error: _propTypes2.default.bool.isRequired,
  /** Upload values */
  value: _propTypes2.default.array, // eslint-disable-line react/no-unused-prop-types
  /** additional external class name */
  className: _propTypes2.default.string,
  /** Upload's preview */
  preview: _propTypes2.default.bool.isRequired,
  /** Upload's id */
  id: _propTypes2.default.string,
  /** Upload label for start state */
  label: _propTypes2.default.string,
  /** Upload label for start state */
  browseLinkLabel: _propTypes2.default.string,
  /** Upload helper text under input */
  helperText: _propTypes2.default.string,
  /** accept file formats */
  accept: _propTypes2.default.string,
  /** multiple files */
  multiple: _propTypes2.default.bool,
  /** onChange callback */
  onChange: _propTypes2.default.func,
  /** Max file size's id */
  maxFileSize: _propTypes2.default.number,
  /** Max File size error text */
  maxFileSizeErrorText: _propTypes2.default.string,
  /** Upload children */
  children: _propTypes2.default.node,
  /** portal for preview */
  portal: _propTypes2.default.any
};

exports.default = Upload;