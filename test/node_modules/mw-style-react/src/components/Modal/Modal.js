import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Modal.style';
import Label from '../Label';

@injectSheet(styles)
class Modal extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      mountStyle: !!props.visibility,
      show: true,
    };
    this.transitionEnd = ::this.transitionEnd;
    this.onModalClick = ::this.onModalClick;
    this.onKeyDown = ::this.onKeyDown;
  }


  componentWillMount() {
    document.addEventListener('keydown', this.onKeyDown);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.onKeyDown);
  }

  componentWillReceiveProps(nextProps) {
    if (!nextProps.visibility) {
      this.setState({mountStyle: false});
    } else {
      this.setState({show: true});
      setTimeout(() => this.setState({mountStyle: true}), 10);
    }
  }

  transitionEnd() {
    const {visibility} = this.props;
    if (!visibility) {
      this.setState({show: false});
    }
  }

  onModalClick(e) {
    e.stopPropagation();
  }

  onKeyDown(e) {
    const {onClose} = this.props;
    const isEsc = e.key === 'Escape';
    if (isEsc) onClose();
  }

  render() {
    const {classes, className, size, id, children, label, onClose} = this.props;
    const {mountStyle: visible, show} = this.state;
    const bgClasses = cn(classes.bg, {visible});
    const modalClasses = cn(className, classes[size], classes.modal, {visible});

    return show ? (
      <div id={id} className={bgClasses} onTransitionEnd={this.transitionEnd} onClick={onClose}>
        <div className={modalClasses} onClick={this.onModalClick}>
          {label ? (
            <Label fontWeight="semibold" fontSize="large" value={label} className={classes.label}/>
          ) : null}
          {children}
        </div>
      </div>
    ) : null;
  }
}

Modal.defaultProps = {
  visibility: true,
  size: 'medium',
  onClose: () => {
  },
};

Modal.propTypes = {
  classes: PropTypes.object,
  /** icon's size */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /** Modal's visibility */
  visibility: PropTypes.bool,
  /** additional external class name */
  className: PropTypes.string,
  /** Modal's id */
  id: PropTypes.string,
  /** children */
  children: PropTypes.node,
  /** Modal's label */
  label: PropTypes.string,
  /** onClose callback */
  onClose: PropTypes.func
};

export default Modal;
