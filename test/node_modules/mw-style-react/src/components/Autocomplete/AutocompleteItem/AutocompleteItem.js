import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import cn from 'clsx';
import injectSheet from 'react-jss';
import styles from './AutocompleteItem.style';
import Label from '../../Label';
import Avatar from '../../Avatar';

@injectSheet(styles)
class AutocompleteItem extends PureComponent {
  constructor(props) {
    super(props);
    this.handleClick = ::this.handleClick;
  }

  handleClick() {
    const {id, value, avatar, visibility} = this.props;
    if (visibility === 'disabled') return;
    this.props.onClick({id, value, avatar, error: false});
  }

  render() {
    const {id, classes, className, visibility, value, avatar, size, activeItem} = this.props;

    return (
      <div
        name={id}
        className={cn(
          className,
          size,
          classes.autocompleteItem,
          {hidden: visibility === 'hidden'},
          {disabled: visibility === 'disabled'},
          {active: activeItem === id},
          {unActive: activeItem && activeItem !== id},
        )}
        onClick={this.handleClick}
      >
        <div className={'nameContainer'}>
          <Avatar label={value} src={avatar} size={size}/>
          <Label className={'label'} value={value} color={'inherit'}/>
        </div>
      </div>
    );
  }
}

AutocompleteItem.defaultProps = {
  id: null,
  value: null,
  visibility: 'visible',
  leftIcon: null,
  rightIcon: null,
  error: false,
  avatar: '',
  activeItem: null,
  size: 'large',
  onClick: () => {
  },
};

AutocompleteItem.propTypes = {
  classes: PropTypes.object,
  /** autocomplete item's id */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** autocomplete item's value */
  value: PropTypes.string.isRequired,
  /** autocomplete item's avatar */
  avatar: PropTypes.string,
  /** autocomplete item's size */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /** autocomplete item's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** additional external class name */
  className: PropTypes.string,
  /** onClick callback */
  onClick: PropTypes.func,
  /** Active item id */
  activeItem: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
};

export default AutocompleteItem;
