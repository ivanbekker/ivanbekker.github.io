import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Icon from '../../Icon/index';
import Label from '../../Label/index';
import styles from './ListItem.style';

@injectSheet(styles)
class ListItem extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      showNested: false,
    };
    this.toggleNestedList = ::this.toggleNestedList;
    this.handleClick = ::this.handleClick;
  }

  handleClick(e) {
    const {rootId, value, activeItem, onClick} = this.props;
    e.preventDefault();
    e.stopPropagation();
    if (activeItem === value) return;
    onClick({id: rootId, value, error: false});
  }

  toggleNestedList(e) {
    const {showNested} = this.state;
    e.preventDefault();
    e.stopPropagation();
    this.setState({showNested: !showNested});
  }

  renderNestedList() {
    const {rootId, classes, children, activeItem, offset, onClick} = this.props;
    const {showNested} = this.state;
    const newOffset = offset + 24;
    const ch = React.Children.map(children, child =>
      React.cloneElement(child, {id: rootId, activeItem, offset: newOffset, onClick}),
    );
    return <div className={cn(classes.nested, {show: showNested})}>{ch}</div>;
  }

  renderArrow(classes, children) {
    const {showNested} = this.state;
    if (!children) {
      return <div className={classes.emptyArrow}/>;
    }
    return (
      <div className={cn(classes.arrow, {show: showNested})} onClick={this.toggleNestedList}>
        <Icon type="arrow" size="small"/>
      </div>
    );
  }

  render() {
    const {
      classes,
      id,
      value,
      className,
      label,
      leftIcon,
      activeItem,
      offset,
      children,
    } = this.props;
    const chClasses = cn(className, classes.listItem, {active: activeItem === value});

    return (
      <div id={id} className={chClasses} onClick={this.handleClick}>
        <div className={classes.row} style={{paddingLeft: offset}}>
          {this.renderArrow(classes, children)}
          {leftIcon ? <Icon className={classes.leftIcon} type={leftIcon}/> : null}
          <Label className={classes.label} value={label}/>
        </div>
        {this.renderNestedList()}
      </div>
    );
  }
}

ListItem.defaultProps = {
  visibility: 'visible',
  error: false,
  active: false,
  onClick: () => {
  },
};

ListItem.propTypes = {
  classes: PropTypes.object,
  /** label's id */
  label: PropTypes.string.isRequired,
  /** List's rootId */
  rootId: PropTypes.string,
  /** List's id */
  id: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** List's value */
  value: PropTypes.string.isRequired,
  /** List's options */
  children: PropTypes.node,
  /** listItem's id */
  leftIcon: PropTypes.string,
  /** active item */
  activeItem: PropTypes.string,
  /** offset of nested list */
  offset: PropTypes.number,
  /** onClick callback */
  onClick: PropTypes.func,
};

export default ListItem;
