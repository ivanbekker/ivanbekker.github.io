import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Label from '../../Label';
import Icon from '../../Icon';
import Utils from '../../utils/utils';
import FileUtils from '../../utils/fileUtils';
import styles from './UploadItem.style';

@injectSheet(styles)
class UploadItem extends PureComponent {
  constructor(props) {
    super(props);
    this.removeFile = ::this.removeFile;
  }

  removeFile() {
    const {onRemove, id} = this.props;
    onRemove(id);
  }

  renderPortalImg() {
    const {type, classes, label, value} = this.props;
    if (type.indexOf('image') === -1) {
      return (
        <Icon type={'picture'} size={'large'}/>
      );
    }
    return <img className={classes.chipImg} alt={label} src={value}/>;
  }

  renderDefaultImg() {
    const {type, classes, label, value} = this.props;
    if (type.indexOf('image') === -1) return null;
    return <img className={classes.fileImg} alt={label} src={value}/>;
  }

  // превью во внешнем потрале
  renderPortal() {
    const {
      classes,
      className,
      id,
      label,
      error,
      size,
      maxFileSizeErrorText,
      maxFileSize,
      closeIcon,
      onClick
    } = this.props;
    return (
      <div
        id={id}
        onClick={() => onClick(id)}
        className={cn(
          className,
          classes.fileItemChip,
          'fileItemChip',
          {error},
        )}
      >
        {this.renderPortalImg()}
        <div className={classes.chipTextBox}>
          <Label
            value={label}
            textColor={'inherit'}
            className={classes.chipText}
          />
          <Label
            fontSize={'small'}
            value={error ? `${maxFileSizeErrorText} ${FileUtils.biteToSize(maxFileSize)}` : `${FileUtils.biteToSize(size)}`}
            visibility={error ? 'visible' : 'disabled'}
            className={classes.chipHelperText}
          />
        </div>
        {closeIcon ?
          <Icon
            type="close"
            size="small"
            color={'currentColor'}
            className={cn(classes.delFileIcon)}
            onClick={this.removeFile}
          /> : null}
      </div>
    );
  }

  // превью по умолчанию
  renderDefault() {
    const {classes, className, id, label, size, closeIcon, onClick} = this.props;

    return (
      <div id={id} className={cn(className, classes.fileItem)} onClick={() => onClick(id)}>
        <div className={classes.fileItemInfo}>
          <Label value={label} fontWeight="semibold"/>
          <br/>
          <Label value={`File size: ${FileUtils.biteToSize(size)}`} fontSize="small"/>
          <br/>
          {this.renderDefaultImg()}
        </div>
        <div className={classes.fileItemControls}>
          {closeIcon ? <Icon
            className={classes.delFileBtn}
            type="close"
            size="small"
            onClick={this.removeFile}
          /> : null}
        </div>
      </div>
    );
  }

  render() {
    const {viewType} = this.props;
    return this[`render${Utils.toUpperLatter(viewType)}`]();
  }
}

UploadItem.defaultProps = {
  closeIcon: true,
  visibility: 'visible',
  viewType: 'default',
  maxFileSize: null,
  onRemove: () => {
  },
  onClick: () => {
  },
  maxFileSizeErrorText: '',
  error: false,
};

UploadItem.propTypes = {
  classes: PropTypes.object,
  /** Files's visibility */
  // visibility: PropTypes.oneOf(['visible', 'hidden']).isRequired,
  /** additional external class name */
  className: PropTypes.string,
  /** File's id */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** File name  */
  label: PropTypes.string,
  /** File source  */
  value: PropTypes.string,
  /** File type source  */
  type: PropTypes.string,
  /** File view type  */
  viewType: PropTypes.oneOf(['default', 'portal']).isRequired,
  /** File size  */
  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Error */
  error: PropTypes.bool,
  /** Max File size  */
  maxFileSize: PropTypes.number,
  /** Max File size error text */
  maxFileSizeErrorText: PropTypes.string,
  /** onRemove callback */
  onRemove: PropTypes.func,
  /** show closeIcon */
  closeIcon: PropTypes.bool,
  /** onClick callback */
  onClick: PropTypes.func,
};

export default UploadItem;
