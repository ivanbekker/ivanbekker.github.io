'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _sanitizeHtml2 = require('sanitize-html');

var _sanitizeHtml3 = _interopRequireDefault(_sanitizeHtml2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Utils
 */
var Utils = {
  createRequestTypes: function createRequestTypes(base) {
    var REQUEST = 'REQUEST';
    var SUCCESS = 'SUCCESS';
    var FAILURE = 'FAILURE';
    return [REQUEST, SUCCESS, FAILURE].reduce(function (acc, type) {
      acc[type] = base + '_' + type;
      return acc;
    }, {});
  },
  random: function random() {
    return Math.floor(Math.random() * 0xFFFF);
  },
  tryToBool: function tryToBool(str) {
    if (str === 'false') return false;
    if (str === 'true') return true;
    return str;
  },
  toPascalCase: function toPascalCase(str) {
    var _this = this;

    if (!str) return;
    var arr = str.split('_');
    arr = arr.map(function (i) {
      return _this.toUpperLatter(i.toLocaleLowerCase());
    });
    return arr.join('');
  },
  range: function range(min, max) {
    var list = [];
    for (var i = min; i <= max; i += 1) {
      list.push(i);
    }
    return list;
  },


  // function to animate scroll
  scrollTo: function scrollTo(element, to, duration, animationType) {
    var start = element.scrollTop;
    var change = to - start;
    var currentTime = 0;
    var increment = 20;
    var easeInOutQuad = function easeInOutQuad(t, b, c, d) {
      t /= d / 2;
      if (t < 1) return c / 2 * t * t + b;
      t -= 1;
      return -c / 2 * (t * (t - 2) - 1) + b;
    };
    var linearTween = function linearTween(t, b, c, d) {
      return c * t / d + b;
    };
    var animateScroll = function animateScroll() {
      currentTime += increment;
      var value = void 0;
      switch (animationType) {
        case 'easeInOutQuad':
          value = easeInOutQuad(currentTime, start, change, duration);
          break;
        default:
          value = linearTween(currentTime, start, change, duration);
          break;
      }
      element.scrollTop = value;
      if (currentTime < duration) {
        setTimeout(animateScroll, increment);
      }
    };
    animateScroll();
  },


  // Перевести строку в CamelCase из underscore стиля
  toCamelCase: function toCamelCase(str, firstUpper) {
    var camelCase = str.replace(/_([a-z])/g, function (m, w) {
      return w.toUpperCase();
    });
    if (!firstUpper) return camelCase;
    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
  },
  toUnderscoreCase: function toUnderscoreCase(str) {
    return str.split(/(?=[A-Z])/).join('_').toLowerCase();
  },


  // Перевести  CamelCase в  CONSTANT_CASE
  toConstantCase: function toConstantCase(str) {
    return str.split(/(?=[A-Z])/).join('_').toUpperCase();
  },


  // Перевести первую букву в верхний регистр
  toUpperLatter: function toUpperLatter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  },


  // Сделать заглавной первую букву
  capitalize: function capitalize(str) {
    if (!str) return;
    var s = str.toLocaleLowerCase();
    return this.toUpperLatter(s);
  },
  toStorage: function toStorage(key, value) {
    if (this.isLocalStorageSupported()) {
      window.localStorage.setItem(key, value);
    }
  },
  fromStorage: function fromStorage(key) {
    if (this.isLocalStorageSupported()) {
      return window.localStorage.getItem(key);
    }
  },
  delStorage: function delStorage(key) {
    if (this.isLocalStorageSupported()) {
      return window.localStorage.removeItem(key);
    }
  },
  toSessionStorage: function toSessionStorage(key, value) {
    if (this.isLocalStorageSupported()) {
      window.sessionStorage.setItem(key, value);
    }
  },
  fromSessionStorage: function fromSessionStorage(key) {
    if (this.isLocalStorageSupported()) {
      return window.sessionStorage.getItem(key);
    }
  },
  delSessionStorage: function delSessionStorage(key) {
    if (this.isLocalStorageSupported()) {
      return window.sessionStorage.removeItem(key);
    }
  },


  // Проверка работает ли LocalStorage
  isLocalStorageSupported: function isLocalStorageSupported() {
    var testKey = 'testWULS';
    var storage = window.sessionStorage;
    try {
      storage.setItem(testKey, '1');
      storage.removeItem(testKey);
      return true;
    } catch (error) {
      return false;
    }
  },


  // Преобразовать объект в url строку
  serialize: function serialize() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var str = [];
    (0, _keys2.default)(params).forEach(function (p) {
      if (params[p]) {
        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(params[p]));
      }
    });
    return str.join('&');
  },


  // Удалить объект из массива
  removeObjFormArray: function removeObjFormArray(arr, field, val) {
    return arr.filter(function (i) {
      return i[field] !== val;
    });
  },


  // Сортировка массима объектов по полю
  sort: function sort(arr, field) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ask';

    return arr.sort(function (a, b) {
      if (a[field] > b[field]) return type === 'ask' ? 1 : -1;
      if (a[field] < b[field]) return type === 'ask' ? -1 : 1;
      return 0;
    });
  },


  // Получить GET параметры в виде объекта
  getQueryParam: function getQueryParam(url) {
    if (!url) return {};
    var r = /^.*\?(.+)$/;
    var get = url.replace(r, '$1');
    var split = get.split('&');
    if (split[0] === url) return {};
    var mapGet = split.reduce(function (acc, el) {
      var spEl = el.split('=');
      acc[decodeURIComponent(spEl[0])] = decodeURIComponent(spEl[1]);
      return acc;
    }, {});
    return mapGet;
  },


  // Экранируем html
  stripHtml: function stripHtml(str, allowedTags) {
    if (!str) return '';
    var tagsToReplace = {
      '<': '&lt;',
      '>': '&gt;'
    };
    str = str.replace(/[<>]/g, function (tag) {
      return tagsToReplace[tag] || tag;
    });

    if (allowedTags) {
      allowedTags.forEach(function (tag) {
        var re1 = new RegExp('&lt;' + tag + '&gt;', 'gi');
        var re2 = new RegExp('&lt;/' + tag + '&gt;', 'gi');
        str = str.replace(re1, '<' + tag + '>').replace(re2, '</' + tag + '>');
      });
    }
    return str;
  },


  // Убираем html теги из строки
  removeHtmlTags: function removeHtmlTags(str) {
    str = str || '';
    return str.replace(/<[^>]*>/g, '');
  },


  // Конвертируем bbcode в html
  bbCodeToHtml: function bbCodeToHtml() {
    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    text = this.stripHtml(text);
    var rB = /\[b\](.*?)\[\/b\]/ig;
    var rUrl = /\[url=(.*?)\](.*?)\[\/url\]/ig;
    var rIUrl = /\[iurl=(.*?)\](.*?)\[\/iurl\]/ig;
    var rSize = /\[size=(.*?)\](.*?)\[\/size\]/ig;
    var rColor = /\[color=(.*?)\](.*?)\[\/color\]/ig;
    var rBg = /\[bg=(.*?)\](.*?)\[\/bg\]/ig;
    var rP = /\[p\](.*?)\[\/p\]/ig;
    var rSup = /\[sup\](.*?)\[\/sup\]/ig;
    var rBr = /\[br\]/ig;
    var rUl = /\[ul\](.*?)\[\/ul\]/ig;
    var rLi = /\[\*\](.*?)\[\/\*\]/ig;
    text = text.replace(rB, '<b>$1</b>').replace(rUrl, '<a href="$1" target="_blank" rel="noopener noreferrer">$2</a>').replace(rIUrl, '<a href="$1">$2</a>').replace(rP, '<p>$1</p>').replace(rSup, '<sup>$1</sup>').replace(rBr, '<br/>').replace(rUl, '<ul>$1</ul>').replace(rLi, '<li>$1</li>').replace(rSize, '<span style="font-size:$1px">$2</span>').replace(rColor, '<span style="color:$1">$2</span>').replace(rBg, '<span style="background-color:$1">$2</span>');

    return text;
  },
  debounce: function debounce(f, ms) {
    var _this2 = this;

    var timer = null;
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var onComplete = function onComplete() {
        f.apply(_this2, args);
        timer = null;
      };
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(onComplete, ms);
    };
  },
  throttle: function throttle(fn, wait) {
    var _this3 = this;

    var time = Date.now();
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (time + wait - Date.now() < 0) {
        fn.apply(_this3, args);
        time = Date.now();
      }
    };
  },


  // Нотификация в браузере
  browserNotify: function browserNotify(_ref) {
    var title = _ref.title,
        icon = _ref.icon,
        body = _ref.body,
        link = _ref.link;

    if (Notification.permission !== 'granted') {
      Notification.requestPermission();
    } else {
      var notification = new Notification(title, {
        icon: icon,
        body: body
      });
      if (link) {
        notification.onclick = function () {
          window.open(link);
        };
      }
    }
  },
  brToN: function brToN(str) {
    var re = new RegExp('<br>', 'gi');
    var re1 = new RegExp('&nbsp;', 'gi');
    var tSpan = /\<span(.*?)\>(.*?)\<\/span\>/ig; // eslint-disable-line no-useless-escape
    var tDiv = /\<div\>(.*?)\<\/div\>/ig; // eslint-disable-line no-useless-escape
    var tP = /\<p\>(.*?)\<\/p\>/ig; // eslint-disable-line no-useless-escape

    return str.replace(re, '\n').replace(re1, ' ').replace(tSpan, '[span$1]$2[/span]').replace(tDiv, '\n$1').replace(tP, '\n$1');
  },
  nToBr: function nToBr(str) {
    var re = new RegExp('\n', 'gi'); // eslint-disable-line no-control-regex
    var tSpan = /\[span(.*?)\](.*?)\[\/span\]/ig;
    return str.replace(re, '<br>').replace(tSpan, '<span$1>$2</span>');
  },
  splitText: function splitText(str, countSymbols) {
    var numChunks = Math.ceil(str.length / countSymbols);
    var chunks = new Array(numChunks);
    /*eslint-disable */
    for (var i = 0, j = 0; i < numChunks; ++i, j += countSymbols) {
      chunks[i] = str.substr(j, countSymbols);
    }
    return chunks;
  },
  uniqArrayOfObjects: function uniqArrayOfObjects(arr, uniqField) {
    return arr.filter(function (item, index, self) {
      return index === self.findIndex(function (t) {
        return t[uniqField] === item[uniqField];
      });
    });
  },
  max: function max(arr, field) {
    return Math.max.apply(Math, (0, _toConsumableArray3.default)(arr.map(function (obj) {
      return obj[field];
    })));
  },
  min: function min(arr, field) {
    return Math.min.apply(Math, (0, _toConsumableArray3.default)(arr.map(function (obj) {
      return obj[field];
    })));
  },
  sanitizeHtml: function sanitizeHtml(str) {
    return (0, _sanitizeHtml3.default)(str, {
      allowedTags: ['div', 'p', 'span', 'a', 'img', 'br'],
      selfClosing: ['img', 'br'],
      allowedAttributes: {
        img: ['src', 'id', 'alt'],
        span: ['class']
      }
    });
  }
};

exports.default = Utils;