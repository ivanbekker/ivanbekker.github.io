'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class; /**
                   * Дни месяца
                   * */


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Days = require('./Days.style');

var _Days2 = _interopRequireDefault(_Days);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Days = (_dec = (0, _reactJss2.default)(_Days2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(Days, _PureComponent);

  function Days(props) {
    (0, _classCallCheck3.default)(this, Days);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Days.__proto__ || (0, _getPrototypeOf2.default)(Days)).call(this, props));

    _this.state = {
      currentDate: {
        currentDay: new Date().getDate(),
        currentMonth: new Date().getMonth() + 1,
        currentYear: new Date().getFullYear()
      }
    };
    return _this;
  }

  // Клик на дату


  (0, _createClass3.default)(Days, [{
    key: 'handleClickDay',
    value: function handleClickDay(item) {
      var onChange = this.props.onChange;
      var day = item.day,
          month = item.month,
          year = item.year,
          disabledDay = item.disabledDay;

      if (disabledDay) return;
      // установка выбранной даты
      onChange({ selectedDay: day, selectedMonth: month, selectedYear: year });
    }

    // Получить количиство дней в месяце (month, year)

  }, {
    key: 'getCountDaysMonth',
    value: function getCountDaysMonth(month, year) {
      return 33 - new Date(year, month - 1, 33).getDate();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          isoDays = _props.isoDays,
          classes = _props.classes,
          className = _props.className,
          maxValue = _props.maxValue,
          minValue = _props.minValue,
          viewDate = _props.viewDate,
          selectedDate = _props.selectedDate,
          size = _props.size;
      var currentDate = this.state.currentDate;
      var currentDay = currentDate.currentDay,
          currentMonth = currentDate.currentMonth,
          currentYear = currentDate.currentYear;
      var selectedDay = selectedDate.selectedDay,
          selectedMonth = selectedDate.selectedMonth,
          selectedYear = selectedDate.selectedYear;

      var month = viewDate.getMonth() + 1;
      var year = viewDate.getFullYear();
      var daysInMonth = this.getCountDaysMonth(month, year);
      var firstDay = new Date(year, month - 1, 1).getDay();
      var days = [];

      // Расчет дней в предидущем месяце с правкой на локализацию
      var countPrevDays = void 0;
      if (isoDays) {
        countPrevDays = firstDay === 0 ? firstDay + 5 : firstDay - 2;
      } else {
        countPrevDays = firstDay - 1;
      }

      // Дни в предидущем месяце
      var daysInPrevMonth = this.getCountDaysMonth(month - 1, year);
      for (var i = countPrevDays; i >= 0; i -= 1) {
        days.push({
          day: daysInPrevMonth - i,
          month: month - 1 === 0 ? 12 : month - 1,
          year: month - 1 === 0 ? year - 1 : year,
          actualMonth: false
        });
      }

      // Дни в текущем месяце
      for (var _i = 1; _i <= daysInMonth; _i += 1) {
        days.push({
          day: _i,
          month: month,
          year: year,
          actualMonth: true
        });
      }

      // Дни следующего месяца
      var countNextDays = days.length;
      for (var _i2 = 1; _i2 <= 42 - countNextDays; _i2 += 1) {
        days.push({
          day: _i2,
          month: month + 1 === 13 ? 1 : month + 1,
          year: month + 1 === 13 ? year + 1 : year,
          actualMonth: false
        });
      }

      return _react2.default.createElement(
        'div',
        { className: (0, _clsx2.default)(className, classes[size], classes.days) },
        days.map(function (item, index) {
          var actualMonth = item.actualMonth,
              day = item.day,
              month = item.month,
              year = item.year;

          var disabledDay = false;
          if (!!maxValue && (year > maxValue.getFullYear() || year >= maxValue.getFullYear() && month - 1 > maxValue.getMonth() || year >= maxValue.getFullYear() && month - 1 >= maxValue.getMonth() && day > maxValue.getDate()) || !!minValue && (year < minValue.getFullYear() || year <= minValue.getFullYear() && month - 1 < minValue.getMonth() || year <= minValue.getFullYear() && month - 1 <= minValue.getMonth() && day < minValue.getDate())) {
            disabledDay = true;
          }
          var updatedItem = (0, _assign2.default)({}, item, { disabledDay: disabledDay });
          return _react2.default.createElement(
            'div',
            {
              key: index,
              className: (0, _clsx2.default)(classes.day, { disabled: disabledDay }, {
                active: day === currentDay && month === currentMonth && year === currentYear
              }, { otherMonth: !actualMonth }, {
                selected: day === selectedDay && month === selectedMonth && year === selectedYear && !disabledDay
              }),
              onClick: function onClick() {
                return _this2.handleClickDay(updatedItem);
              }
            },
            day
          );
        })
      );
    }
  }]);
  return Days;
}(_react.PureComponent)) || _class);


Days.propTypes = {
  classes: _propTypes2.default.object,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** Days size */
  size: _propTypes2.default.oneOf(['small', 'medium']).isRequired,
  /** Days first day of the week is Monday by ISO-8601 */
  isoDays: _propTypes2.default.bool.isRequired,
  /** Days max date */
  maxValue: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.string]).isRequired,
  /** Days min date */
  minValue: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.string]).isRequired,
  /** Days callback */
  onChange: _propTypes2.default.func.isRequired,
  /** Days selected date */
  selectedDate: _propTypes2.default.shape({
    selectedDay: _propTypes2.default.number, // eslint-disable-line react/no-unused-prop-types
    selectedMonth: _propTypes2.default.number, // eslint-disable-line react/no-unused-prop-types
    selectedYear: _propTypes2.default.number // eslint-disable-line react/no-unused-prop-types
  }).isRequired,
  /** Days view date */
  viewDate: _propTypes2.default.instanceOf(Date)
};

exports.default = Days;