import React from 'react';
import {storiesOf} from '@storybook/react';
import {select, boolean, text} from '@storybook/addon-knobs/react';
import Table, {TableHead, TableRow, TableCell, TableBody} from '../src/components/Table';
import infoDecorator from '../.storybook/customDecorators/infoDecorator';
import themeDecorator from '../.storybook/customDecorators/themeDecorator';

const stories = storiesOf('Table', module);
const visibility = ['visible', 'disabled', 'hidden'];
const paddingSize = ['small', 'medium'];

infoDecorator(stories);
themeDecorator(stories);

const headers = ['Active', 'Owner', 'Changed'];

const basicData = [
  {
    id: 1,
    name: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.',
    name2: 'Lorem ipsum dolor sit amet.',
    active: true,
    owner: 'Zachary Fields',
    changed: '14 Apr 2015; 17:48:08',
  },
  {
    id: 2,
    name:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. A culpa delectus dolore eligendi enim explicabo in magnam maiores molestiae possimus provident',
    active: true,
    owner: 'Zachary Fields',
    changed: '14 Apr 2015; 17:48:08',
  },
  {
    id: 3,
    name:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. A culpa delectus dolore eligendi enim explicabo',
    active: false,
    owner: 'Zachary Fields',
    changed: '14 Apr 2015; 17:48:08',
  },
];

const nestedData = [
  {
    id: 1,
    name: 'Apple1',
    active: true,
    owner: 'Zachary Fields',
    changed: '14 Apr 2015; 17:48:08',
  },
  {
    id: 2,
    name: 'Apple2',
    active: true,
    owner: 'Zachary Fields',
    changed: '14 Apr 2015; 17:48:08',
    children: [
      {
        id: 21,
        name: 'Apple2.1',
        active: true,
        owner: 'Zachary Fields',
        changed: '14 Apr 2015; 17:48:08',
      },
      {
        id: 22,
        name: 'Apple2.2',
        active: false,
        owner: 'Zachary Fields',
        changed: '14 Apr 2015; 17:48:08',
        children: [
          {
            id: 221,
            name: 'Apple2.2.1',
            active: true,
            owner: 'Zachary Fields',
            changed: '14 Apr 2015; 17:48:08',
          },
          {
            id: 222,
            name: 'Apple2.2.2',
            active: true,
            owner: 'Zachary Fields',
            changed: '14 Apr 2015; 17:48:08',
          },
          {
            id: 223,
            name: 'Apple2.2.3',
            active: true,
            owner: 'Zachary Fields',
            changed: '14 Apr 2015; 17:48:08',
          },
        ],
      },
      {
        id: 23,
        name: 'Apple2.3',
        active: true,
        owner: 'Zachary Fields',
        changed: '14 Apr 2015; 17:48:08',
      },
    ],
  },
  {
    id: 3,
    name: 'Apple3',
    active: false,
    owner: 'Zachary Fields',
    changed: '14 Apr 2015; 17:48:08',
  },
];

function RenderRowHOC(data, index = 1, columnSize, isOpened) {
  return data.map(item => (
    <TableRow
      key={item.id}
      id={item.id.toString()}
      value={item}
      nestedChildren={item.children}
      // nested children template
      renderNestedChildren={RenderRowHOC}
      // boolean to show children
      showNestedChildren={isOpened}
      // example to visible
      visibility={item.id === 21 ? 'disabled' : 'visible'}
      // size children
      size={item.children && item.children.length}
      // nested Index
      index={index}
      // active item
      active={item.id === 2}
      // column size
      columnSize={columnSize}
    >
      <TableCell>{item.id}</TableCell>
      {item.name && item.name2 ? (
        <TableCell>
          <div>{item.name}</div>
          <div>{item.name2}</div>
        </TableCell>
      ) : (
        <TableCell>{item.name}</TableCell>
      )}
      <TableCell>{item.active ? 'Active' : 'Blocked'}</TableCell>
      <TableCell>{item.owner}</TableCell>
      <TableCell>{item.changed}</TableCell>
    </TableRow>
  ));
}

function renderHeaderColls(list) {
  return list.map(item => <TableCell key={item}>{item}</TableCell>);
}

stories.add('default', () => (
  <Table
    visibility={select('Visibility', visibility, 'visible')}
    paddingSize={select('paddingSize', paddingSize, 'small')}
    className={text('className', 'tableClass')}
  >
    <TableHead>
      <TableRow>
        <TableCell width="100" key="item1">
          {'Id'}
        </TableCell>
        <TableCell width="auto" key="item2">
          {'Name'}
        </TableCell>
        {renderHeaderColls(headers)}
      </TableRow>
    </TableHead>
    <TableBody>{RenderRowHOC(basicData)}</TableBody>
  </Table>
));

stories.add('default scrolled with fixed header', () => (
  <Table
    visibility={select('Visibility', visibility, 'visible')}
    paddingSize={select('paddingSize', paddingSize, 'small')}
    className={text('className', 'tableClass')}
    scrolled={boolean('Scrolled', true)}
  >
    <TableHead fixed={boolean('Fixed header', true)}>
      <TableRow>
        <TableCell width="100" key="item1">
          {'Id'}
        </TableCell>
        <TableCell width="auto" key="item2">
          {'Name'}
        </TableCell>
        {renderHeaderColls(headers)}
      </TableRow>
    </TableHead>
    <TableBody>{RenderRowHOC(basicData)}</TableBody>
  </Table>
));

stories.add('nested', () => (
  <Table
    visibility={select('Visibility', visibility, 'visible')}
    paddingSize={select('paddingSize', paddingSize, 'small')}
    className={text('className', 'tableClass')}
  >
    <TableHead>
      <TableRow>
        <TableCell width="auto" key="item1">
          {'Id'}
        </TableCell>
        <TableCell width="100" key="item2">
          {'Name'}
        </TableCell>
        {renderHeaderColls(headers)}
      </TableRow>
    </TableHead>
    <TableBody>{RenderRowHOC(nestedData)}</TableBody>
  </Table>
));

stories.add('nested with scrolled content and fixed header', () => (
  <Table
    visibility={select('Visibility', visibility, 'visible')}
    paddingSize={select('paddingSize', paddingSize, 'medium')}
    scrolled={boolean('Scrolled', true)}
    className={text('className', 'tableClass')}
  >
    <TableHead fixed={boolean('Fixed header', true)}>
      <TableRow>
        <TableCell width="200" key="item1">
          {'Id'}
        </TableCell>
        <TableCell width="100" key="item2">
          {'Name'}
        </TableCell>
        {renderHeaderColls(headers)}
      </TableRow>
    </TableHead>
    <TableBody>{RenderRowHOC(nestedData, undefined, undefined, true)}</TableBody>
  </Table>
));
