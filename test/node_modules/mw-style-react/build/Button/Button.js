'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Menu = require('../Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _Button = require('./Button.style');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Button = (_dec = (0, _reactJss2.default)(_Button2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(Button, _PureComponent);

  function Button(props) {
    (0, _classCallCheck3.default)(this, Button);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Button.__proto__ || (0, _getPrototypeOf2.default)(Button)).call(this, props));

    _this.state = { menu: false };
    _this.handleMenuClose = _this.handleMenuClose.bind(_this);
    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleKeyPress = _this.handleKeyPress.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Button, [{
    key: 'handleClick',
    value: function handleClick(e) {
      var _props = this.props,
          children = _props.children,
          visibility = _props.visibility,
          onKeyPress = _props.onKeyPress,
          onClick = _props.onClick;

      if (visibility !== 'visible') return;
      if (children) {
        this.setState({ menu: true });
      }
      if (e.type === 'keypress') {
        onKeyPress(e);
      } else {
        onClick(e);
      }
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(e) {
      this.handleClick(e);
    }
  }, {
    key: 'handleMenuClose',
    value: function handleMenuClose() {
      this.setState({ menu: false });
    }
  }, {
    key: 'renderMenu',
    value: function renderMenu() {
      var _props2 = this.props,
          classes = _props2.classes,
          children = _props2.children;

      if (!children) return null;
      var menu = this.state.menu;

      var visibility = menu ? 'visible' : 'hidden';
      return _react2.default.createElement(
        _Menu2.default,
        { className: (0, _clsx2.default)(classes.menu), visibility: visibility, onClose: this.handleMenuClose },
        children
      );
    }
  }, {
    key: 'getIconSize',
    value: function getIconSize(label, size) {
      var iconSize = void 0;
      if (label) {
        iconSize = size === 'large' ? 'medium' : 'small';
      } else {
        iconSize = size === 'small' ? 'small' : 'medium';
      }
      return iconSize;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props3 = this.props,
          id = _props3.id,
          classes = _props3.classes,
          className = _props3.className,
          type = _props3.type,
          size = _props3.size,
          label = _props3.label,
          icon = _props3.icon,
          error = _props3.error,
          visibility = _props3.visibility,
          onMouseEnter = _props3.onMouseEnter,
          onMouseLeave = _props3.onMouseLeave,
          rounded = _props3.rounded,
          iconAfter = _props3.iconAfter;


      var btnClasses = (0, _clsx2.default)(className, classes.button, classes[type], classes[size], { error: !!error }, { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' }, { hideLabel: !label || !label.length }, { hideIcon: !icon || !icon.length }, { hideIconAfter: !iconAfter || !iconAfter.length }, { rounded: rounded });
      var iconSize = this.getIconSize(label, size);
      var tabIndex = visibility !== 'visible' ? -1 : 0;
      return _react2.default.createElement(
        'div',
        {
          ref: function ref(el) {
            return _this2.btn = el;
          },
          id: id,
          className: btnClasses,
          onClick: this.handleClick,
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          onKeyPress: this.handleKeyPress,
          tabIndex: tabIndex
        },
        icon ? _react2.default.createElement(_Icon2.default, { type: icon, size: iconSize, color: 'currentColor' }) : null,
        _react2.default.createElement(_Label2.default, { value: label, fontSize: 'medium', textColor: 'inherit', fontWeight: 'semibold' }),
        iconAfter ? _react2.default.createElement(_Icon2.default, { type: iconAfter, size: iconSize, color: 'currentColor' }) : null,
        this.renderMenu()
      );
    }
  }]);
  return Button;
}(_react.PureComponent)) || _class);


Button.defaultProps = {
  type: 'default',
  size: 'medium',
  visibility: 'visible',
  error: false,
  onClick: function onClick() {},
  onKeyPress: function onKeyPress() {},
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {},
  rounded: false
};

Button.propTypes = {
  classes: _propTypes2.default.object,
  /** button type */
  type: _propTypes2.default.oneOf(['default', 'text', 'secondary']),
  /** button size */
  size: _propTypes2.default.oneOf(['small', 'smallplus', 'medium', 'large']),
  /** button visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']),
  /** Does button has an error */
  error: _propTypes2.default.bool,
  /** button label */
  label: _propTypes2.default.string,
  /** Icon element */
  icon: _propTypes2.default.string,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** element id */
  id: _propTypes2.default.string,
  /** callback onClick */
  onClick: _propTypes2.default.func,
  /** callback onKeyPress */
  onKeyPress: _propTypes2.default.func,
  /** callback onMouseEnter */
  onMouseEnter: _propTypes2.default.func,
  /** callback onMouseLeave */
  onMouseLeave: _propTypes2.default.func,
  /** Menu Items */
  children: _propTypes2.default.node,
  /** Rounded corners */
  rounded: _propTypes2.default.bool,
  /** Icon element after label */
  iconAfter: _propTypes2.default.string
};

exports.default = Button;