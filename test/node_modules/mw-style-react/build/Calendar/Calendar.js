'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends4 = require('babel-runtime/helpers/extends');

var _extends5 = _interopRequireDefault(_extends4);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _Divider = require('../Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _TextField = require('../TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Select = require('../Select');

var _Select2 = _interopRequireDefault(_Select);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _MenuItem = require('../Menu/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _timezone = require('./timezone.js');

var _timezone2 = _interopRequireDefault(_timezone);

var _remindList = require('./remindList.js');

var _remindList2 = _interopRequireDefault(_remindList);

var _dateUtils = require('../utils/dateUtils');

var _dateUtils2 = _interopRequireDefault(_dateUtils);

var _Calendar = require('./Calendar.style');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _PeriodChange = require('./PeriodChange');

var _PeriodChange2 = _interopRequireDefault(_PeriodChange);

var _WeekDays = require('./WeekDays');

var _WeekDays2 = _interopRequireDefault(_WeekDays);

var _Days = require('./Days');

var _Days2 = _interopRequireDefault(_Days);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_TIMEZONE_OFFSET = new Date().getTimezoneOffset();

var Calendar = (_dec = (0, _reactJss2.default)(_Calendar2.default), _dec(_class = (0, _reactClickOutside2.default)(_class = function (_PureComponent) {
  (0, _inherits3.default)(Calendar, _PureComponent);

  function Calendar(props) {
    (0, _classCallCheck3.default)(this, Calendar);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Calendar.__proto__ || (0, _getPrototypeOf2.default)(Calendar)).call(this, props));

    var _this$props$value = _this.props.value,
        unix = _this$props$value.unix,
        timeZoneOffset = _this$props$value.timeZoneOffset,
        remindTime = _this$props$value.remindTime;

    var date = unix ? new Date(unix * 1000) : _this.setBaseDateAndHours();

    var _this$correctTime = _this.correctTime(date.getHours(), date.getMinutes()),
        hours = _this$correctTime.hours,
        minutes = _this$correctTime.minutes;

    _this.state = {
      viewDate: date,
      changedTime: {
        hours: hours,
        minutes: minutes
      },
      selectedDate: {
        selectedDay: date.getDate(),
        selectedMonth: date.getMonth() + 1,
        selectedYear: date.getFullYear()
      },
      timeZoneOffset: timeZoneOffset || DEFAULT_TIMEZONE_OFFSET,
      maxValue: props.maxValue && new Date(props.maxValue * 1000),
      minValue: props.minValue && new Date(props.minValue * 1000),
      remindValue: _remindList2.default[0].value,
      remindTime: remindTime || null
    };
    _this.handleChangeTimeZoneOffset = _this.handleChangeTimeZoneOffset.bind(_this);
    _this.handleChangeTime = _this.handleChangeTime.bind(_this);
    _this.handleBlurTime = _this.handleBlurTime.bind(_this);
    _this.handleFocusTime = _this.handleFocusTime.bind(_this);
    _this.handleChangeRemind = _this.handleChangeRemind.bind(_this);
    _this.handlePeriodChange = _this.handlePeriodChange.bind(_this);
    _this.handleDaysChange = _this.handleDaysChange.bind(_this);
    _this.handleClickConfirmButton = _this.handleClickConfirmButton.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Calendar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setState({ remindValue: this.getRemindValue() });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, props) {
      var _nextProps$value = nextProps.value,
          unix = _nextProps$value.unix,
          timeZoneOffset = _nextProps$value.timeZoneOffset;

      if (unix !== props.unix || timeZoneOffset !== props.timeZoneOffset) {
        var date = new Date(unix * 1000);

        var _correctTime = this.correctTime(date.getHours(), date.getMinutes()),
            hours = _correctTime.hours,
            minutes = _correctTime.minutes;

        this.setState({
          viewDate: date,
          changedTime: {
            hours: hours,
            minutes: minutes
          },
          timeZoneOffset: timeZoneOffset || DEFAULT_TIMEZONE_OFFSET
        });
      }
    }

    // Установить время по умолчанию в 12:00

  }, {
    key: 'setBaseDateAndHours',
    value: function setBaseDateAndHours() {
      var date = new Date();
      date.setHours(12, 0, 0, 0);
      return new Date(date);
    }

    // Handler for click outside of component

  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(e) {
      if (this.timeZoneOffsetRef && this.timeZoneOffsetRef.contains(e.target)) return;
      if (this.remindRef && this.remindRef.contains(e.target)) return;
      var onClose = this.props.onClose;

      onClose();
    }

    // Изменить минуты/секунды

  }, {
    key: 'handleChangeTime',
    value: function handleChangeTime(data) {
      this.setState({
        changedTime: (0, _extends5.default)({}, this.state.changedTime, (0, _defineProperty3.default)({}, data.id, data.value))
      });
    }

    // Сохранить минуты/секунды

  }, {
    key: 'handleBlurTime',
    value: function handleBlurTime() {
      var _state = this.state,
          viewDate = _state.viewDate,
          changedTime = _state.changedTime;

      var changedDate = new Date(viewDate);

      var _correctTime2 = this.correctTime(changedTime.hours, changedTime.minutes),
          hours = _correctTime2.hours,
          minutes = _correctTime2.minutes;

      changedDate.setHours(hours);
      changedDate.setMinutes(minutes);
      this.setState({
        viewDate: changedDate,
        changedTime: {
          hours: hours,
          minutes: minutes
        }
      });
    }

    // Обработчик смены года/месяца

  }, {
    key: 'handlePeriodChange',
    value: function handlePeriodChange(value) {
      this.setState({
        viewDate: value
      });
    }

    // Обработчик выбора дня

  }, {
    key: 'handleDaysChange',
    value: function handleDaysChange(value) {
      var viewDate = this.state.viewDate;

      var changedDate = new Date(viewDate);
      changedDate.setMonth(value.selectedMonth - 1, 1);
      changedDate.setFullYear(value.selectedYear);
      // console.log('changedDate ', changedDate);
      this.setState({
        selectedDate: value,
        viewDate: changedDate
      });
    }

    // Очистить поле ввода минут/секунд

  }, {
    key: 'handleFocusTime',
    value: function handleFocusTime(e) {
      var id = this[e + 'Ref'].props.id;

      this.setState({
        changedTime: (0, _extends5.default)({}, this.state.changedTime, (0, _defineProperty3.default)({}, id, ''))
      });
    }

    // Изменить таймзону

  }, {
    key: 'handleChangeTimeZoneOffset',
    value: function handleChangeTimeZoneOffset(data) {
      this.setState({
        timeZoneOffset: +data.value
      });
    }

    // Получить значение remindValue

  }, {
    key: 'getRemindValue',
    value: function getRemindValue() {
      var unix = this.props.value.unix;
      var remindTime = this.state.remindTime;

      var remindValue = 0;
      if (remindTime && unix) {
        var selectedUnix = this.getSelectedUnixtime();
        _remindList2.default.forEach(function (item, index) {
          var value = item.value;

          if (selectedUnix - remindTime === value) {
            remindValue = index.toString();
          }
        });
      }
      return remindValue.toString();
    }

    // Получить время напоминания

  }, {
    key: 'getRemindTime',
    value: function getRemindTime(remindValue) {
      if (+remindValue) {
        return this.getSelectedUnixtime() - _remindList2.default[remindValue].value;
      }
      return null;
    }

    // Изменить время напоминания

  }, {
    key: 'handleChangeRemind',
    value: function handleChangeRemind(_ref) {
      var value = _ref.value;

      this.setState({
        remindValue: value,
        remindTime: this.getRemindTime(value)
      });
    }

    // Корректировка времени для правильного сохранения и отображения

  }, {
    key: 'correctTime',
    value: function correctTime(h, m) {
      var hours = +h;
      var minutes = +m;
      if (isNaN(hours)) {
        hours = 0;
      } else if (h > 23) {
        hours = 23;
      }
      if (isNaN(minutes)) {
        minutes = 0;
      } else if (m > 59) {
        minutes = 59;
      }
      return {
        hours: _dateUtils2.default.addZero(hours),
        minutes: _dateUtils2.default.addZero(minutes)
      };
    }

    // Получить текущую выбранную дату в unixtime

  }, {
    key: 'getSelectedUnixtime',
    value: function getSelectedUnixtime() {
      var _state2 = this.state,
          viewDate = _state2.viewDate,
          selectedDate = _state2.selectedDate;
      var selectedDay = selectedDate.selectedDay,
          selectedMonth = selectedDate.selectedMonth;

      var callbackDate = new Date(viewDate);
      callbackDate.setDate(selectedDay);
      callbackDate.setMonth(selectedMonth - 1);
      return _dateUtils2.default.dateToUnixtime(callbackDate);
    }

    // Применить выбранную дату, таймзону, время напоминания

  }, {
    key: 'handleClickConfirmButton',
    value: function handleClickConfirmButton(e) {
      e.stopPropagation();
      var _props = this.props,
          id = _props.id,
          onChange = _props.onChange,
          onClose = _props.onClose;
      var _state3 = this.state,
          timeZoneOffset = _state3.timeZoneOffset,
          remindValue = _state3.remindValue;

      var value = {
        unix: this.getSelectedUnixtime(),
        timeZoneOffset: timeZoneOffset,
        remindTime: this.getRemindTime(remindValue)
      };
      // выполнение колбэков
      onChange({ id: id, value: value, error: false });
      onClose();
    }

    // Контейнер с выбором и корректирой времени

  }, {
    key: 'renderTimeContainer',
    value: function renderTimeContainer() {
      var _this2 = this;

      var _props2 = this.props,
          classes = _props2.classes,
          time = _props2.time,
          timeZone = _props2.timeZone,
          remind = _props2.remind,
          size = _props2.size;
      var _state4 = this.state,
          changedTime = _state4.changedTime,
          timeZoneOffset = _state4.timeZoneOffset,
          remindValue = _state4.remindValue;
      var hours = changedTime.hours,
          minutes = changedTime.minutes;

      return time || timeZone || remind ? _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(_Divider2.default, null),
        _react2.default.createElement(
          'div',
          { className: (0, _clsx2.default)(classes.footer) },
          timeZone ? _react2.default.createElement(
            'div',
            { className: (0, _clsx2.default)(classes.footerRow) },
            _react2.default.createElement(_Label2.default, { className: (0, _clsx2.default)(classes.footerLabel), fontSize: size, value: 'Timezone' }),
            _react2.default.createElement(
              'div',
              {
                ref: function ref(el) {
                  _this2.timeZoneOffsetRef = el;
                },
                className: (0, _clsx2.default)(classes.selectContainer)
              },
              _react2.default.createElement(
                _Select2.default,
                {
                  className: (0, _clsx2.default)(classes.select),
                  value: timeZoneOffset.toString(),
                  onChange: this.handleChangeTimeZoneOffset
                },
                _timezone2.default.map(function (t, index) {
                  return _react2.default.createElement(_MenuItem2.default, {
                    key: index,
                    label: t.label,
                    value: t.value.toString(),
                    activeItem: timeZoneOffset.toString()
                  });
                })
              )
            )
          ) : null,
          time ? _react2.default.createElement(
            'div',
            { className: (0, _clsx2.default)(classes.footerRow) },
            _react2.default.createElement(_Label2.default, { className: (0, _clsx2.default)(classes.footerLabel), fontSize: size, value: 'End time' }),
            _react2.default.createElement(
              'div',
              { className: (0, _clsx2.default)(classes.timeContainer) },
              _react2.default.createElement(_TextField2.default, {
                className: (0, _clsx2.default)(classes.time),
                id: 'hours',
                type: 'int',
                size: 'small',
                value: hours.toString(),
                length: 2,
                autoFocus: false,
                onChange: this.handleChangeTime,
                onBlur: this.handleBlurTime,
                onFocus: this.handleFocusTime,
                ref: function ref(el) {
                  _this2.hoursRef = el;
                }
              }),
              _react2.default.createElement(_Label2.default, { className: (0, _clsx2.default)(classes.timeSeparator), value: ':' }),
              _react2.default.createElement(_TextField2.default, {
                className: (0, _clsx2.default)(classes.time),
                id: 'minutes',
                type: 'int',
                size: 'small',
                value: minutes.toString(),
                length: 2,
                autoFocus: false,
                onChange: this.handleChangeTime,
                onBlur: this.handleBlurTime,
                onFocus: this.handleFocusTime,
                ref: function ref(el) {
                  _this2.minutesRef = el;
                }
              })
            )
          ) : null,
          remind ? _react2.default.createElement(
            'div',
            { className: (0, _clsx2.default)(classes.footerRow) },
            _react2.default.createElement(_Label2.default, { className: (0, _clsx2.default)(classes.footerLabel), fontSize: size, value: 'Remind' }),
            _react2.default.createElement(
              'div',
              {
                ref: function ref(el) {
                  _this2.remindRef = el;
                },
                className: (0, _clsx2.default)(classes.selectContainer)
              },
              _react2.default.createElement(
                _Select2.default,
                {
                  className: (0, _clsx2.default)(classes.select),
                  value: remindValue,
                  onChange: this.handleChangeRemind
                },
                _remindList2.default.map(function (item, index) {
                  return _react2.default.createElement(_MenuItem2.default, {
                    key: index,
                    label: item.label,
                    value: index.toString(),
                    activeItem: remindValue
                  });
                })
              )
            )
          ) : null
        )
      ) : null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          classes = _props3.classes,
          className = _props3.className,
          id = _props3.id,
          visibility = _props3.visibility,
          size = _props3.size,
          time = _props3.time,
          isoDays = _props3.isoDays;
      var _state5 = this.state,
          viewDate = _state5.viewDate,
          maxValue = _state5.maxValue,
          minValue = _state5.minValue,
          selectedDate = _state5.selectedDate;

      return _react2.default.createElement(
        'div',
        { id: id, className: (0, _clsx2.default)(className, classes.calendar, classes[size], classes[visibility]) },
        _react2.default.createElement(_PeriodChange2.default, {
          size: size,
          viewDate: viewDate,
          onChange: this.handlePeriodChange,
          maxValue: maxValue,
          minValue: minValue
        }),
        _react2.default.createElement(_WeekDays2.default, { size: size, isoDays: isoDays }),
        _react2.default.createElement(_Days2.default, {
          size: size,
          minValue: minValue,
          maxValue: maxValue,
          isoDays: isoDays,
          onChange: this.handleDaysChange,
          selectedDate: selectedDate,
          viewDate: viewDate
        }),
        this.renderTimeContainer(),
        _react2.default.createElement(_Button2.default, {
          className: (0, _clsx2.default)(classes.confirmButton),
          label: time ? 'Choose the date and time' : 'Choose the date',
          onClick: this.handleClickConfirmButton,
          size: size
        })
      );
    }
  }]);
  return Calendar;
}(_react.PureComponent)) || _class) || _class);


Calendar.defaultProps = {
  size: 'medium',
  visibility: 'visible',
  isoDays: true,
  value: {},
  maxValue: '',
  minValue: '',
  onChange: function onChange() {},
  onClose: function onClose() {}
};

Calendar.propTypes = {
  classes: _propTypes2.default.object,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** Calendar's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'hidden']),
  /** Calendar's size */
  size: _propTypes2.default.oneOf(['small', 'medium']),
  /** Calendar's id */
  id: _propTypes2.default.string,
  /** Calendar's first day of the week is Monday by ISO-8601 */
  isoDays: _propTypes2.default.bool,
  /** Calendar's value */
  value: _propTypes2.default.shape({
    unix: _propTypes2.default.number,
    timeZoneOffset: _propTypes2.default.number,
    remindTime: _propTypes2.default.number
  }),
  /** Calendar's max date */
  maxValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  /** Calendar's min date */
  minValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  /** Calendar's time */
  time: _propTypes2.default.bool,
  /** Calendar's time zone */
  timeZone: _propTypes2.default.bool,
  /** Calendar's time zone */
  remind: _propTypes2.default.bool,
  /** Calendar's callback */
  onChange: _propTypes2.default.func,
  /** Calendar's callback */
  onClose: _propTypes2.default.func
};

exports.default = Calendar;