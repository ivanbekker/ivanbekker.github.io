'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _emojiMart = require('emoji-mart');

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Emoji = require('./Emoji.style');

var _Emoji2 = _interopRequireDefault(_Emoji);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Emoji = (_dec = (0, _reactJss2.default)(_Emoji2.default), _dec(_class = (0, _reactClickOutside2.default)(_class = function (_PureComponent) {
  (0, _inherits3.default)(Emoji, _PureComponent);

  function Emoji(props) {
    (0, _classCallCheck3.default)(this, Emoji);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Emoji.__proto__ || (0, _getPrototypeOf2.default)(Emoji)).call(this, props));

    _this.state = {
      hidePicker: true,
      pickerOffset: 24
    };
    _this.showPicker = _this.showPicker.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  // Get EmojiMart settings ot get default settings


  (0, _createClass3.default)(Emoji, [{
    key: 'getEmojiProps',
    value: function getEmojiProps() {
      var emojiMart = this.props.emojiMart;

      if (emojiMart) return emojiMart;
      return {
        set: 'apple',
        sheetSize: 32,
        showPreview: false
      };
    }

    // Handler for click outside of component

  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(e) {
      if (this.emojiBox && this.emojiBox.contains(e.target)) return;
      this.setState({ hidePicker: true });
    }
  }, {
    key: 'handleChange',
    value: function handleChange(value) {
      var _props = this.props,
          id = _props.id,
          onChange = _props.onChange;

      onChange({ id: id, value: value, error: false });
    }

    // Show emoji picker

  }, {
    key: 'showPicker',
    value: function showPicker() {
      var visibility = this.props.visibility;

      if (visibility !== 'visible') return;
      var pickerOffset = this.calcPickerPosition();
      this.setState({
        hidePicker: false,
        pickerOffset: pickerOffset
      });
    }

    // Calculate picker position

  }, {
    key: 'calcPickerPosition',
    value: function calcPickerPosition() {
      var pickerHeight = 321;
      var pickerMargin = 8;
      var emojiBoxOffsetTop = this.emojiBox.getBoundingClientRect().top;
      var top = this.icon.offsetWidth + pickerMargin;
      if (window.innerHeight - emojiBoxOffsetTop < pickerHeight + pickerMargin) {
        top = -(pickerHeight + pickerMargin);
      }
      return top;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          classes = _props2.classes,
          className = _props2.className,
          id = _props2.id,
          size = _props2.size,
          visibility = _props2.visibility;
      var _state = this.state,
          hidePicker = _state.hidePicker,
          pickerOffset = _state.pickerOffset;


      var emClasses = (0, _clsx2.default)(className, classes.emoji, classes[size], { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' });

      var emojiProps = this.getEmojiProps();

      return _react2.default.createElement(
        'div',
        { ref: function ref(el) {
            return _this2.emojiBox = el;
          }, id: id, className: emClasses, onClick: this.showPicker },
        _react2.default.createElement(_Icon2.default, { forwardRef: function forwardRef(el) {
            return _this2.icon = el;
          }, type: 'smile', size: size }),
        _react2.default.createElement(
          'div',
          { className: (0, _clsx2.default)(classes.picker, { hidden: hidePicker }), style: { top: pickerOffset } },
          _react2.default.createElement(_emojiMart.Picker, (0, _extends3.default)({}, emojiProps, { onSelect: this.handleChange }))
        )
      );
    }
  }]);
  return Emoji;
}(_react.PureComponent)) || _class) || _class);


Emoji.defaultProps = {
  visibility: 'visible',
  size: 'large',
  onChange: function onChange() {}
};

Emoji.propTypes = {
  classes: _propTypes2.default.object,
  /** Emoji's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Emoji's id */
  id: _propTypes2.default.string,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** text Emoji's size */
  size: _propTypes2.default.oneOf(['micro', 'small', 'medium', 'large', 'xlarge']).isRequired,
  /** EmojiMart props https://github.com/missive/emoji-mart*/
  emojiMart: _propTypes2.default.object,
  /** onChange callback */
  onChange: _propTypes2.default.func
};

exports.default = Emoji;