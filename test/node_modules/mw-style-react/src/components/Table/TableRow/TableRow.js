import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import ReactDOM from 'react-dom';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './TableRow.style';
import Icon from '../../Icon';
import Utils from '../../utils/utils';
import Divider from '../../Divider/Divider';

const NESTING_PADDING = 22;

@injectSheet(styles)
class TableRow extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      showNestedChildren: props.showNestedChildren,
      hasNestedChildren: props.size > 0,
    };
    this.handleClick = ::this.handleClick;
    this.handleListIconClick = ::this.handleListIconClick;
  }

  static contextTypes = {
    visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']).isRequired,
    paddingSize: PropTypes.oneOf(['small', 'medium']).isRequired,
  };

  componentDidMount() {
    const {index} = this.props;
    const {hasNestedChildren} = this.state;
    if (hasNestedChildren || index > 1) {
      ReactDOM.findDOMNode(this.itemRef0).style.paddingLeft = `${index * NESTING_PADDING}px`;
    }
  }

  handleListIconClick(e) {
    e.stopPropagation();
    if (this.context.visibility === 'disabled') return;
    const {id, value, visibility, nestedChildren} = this.props;
    if (visibility === 'disabled') return;
    const showNestedChildren = !this.state.showNestedChildren;
    this.setState({
      showNestedChildren,
    });
    this.props.onChange({id, value, showNestedChildren, nestedChildren});
  }

  handleClick() {
    if (this.context.visibility === 'disabled') return;
    const {id, value} = this.props;
    const error = false;
    this.props.onClick({id, value, error});
  }

  render() {
    const {
      className,
      classes,
      visibility,
      children,
      renderNestedChildren,
      nestedChildren,
      index,
      active,
      columnSize,
      id,
    } = this.props;
    const {showNestedChildren, hasNestedChildren} = this.state;
    const {paddingSize} = this.context;

    return (
      <div
        className={cn(classes.tableRowContainer, 'scTableRowContainer', {
          nested: hasNestedChildren,
        })}
      >
        <div
          id={id}
          className={cn(
            classes.tableRow,
            className,
            {active},
            classes[visibility],
            classes[`paddingSize${Utils.toUpperLatter(paddingSize)}`],
            'scTableRow',
          )}
          onClick={this.handleClick}
        >
          {hasNestedChildren && (
            <div
              className={cn(classes.arrowContainer)}
              style={{left: index > 1 ? (index - 1) * NESTING_PADDING : 0}}
            >
              <Icon
                className={cn(
                  classes.arrow,
                  {isOpen: showNestedChildren},
                  {active},
                  'scTableRowArrow',
                )}
                type="arrow"
                size="small"
                onClick={this.handleListIconClick}
                color="currentColor"
              />
            </div>
          )}
          <div className={cn(classes.tableList, 'scTableRowList')}>
            {React.Children.map(children, (child, index) =>
              React.cloneElement(child, {
                ref: el => {
                  this[`itemRef${index}`] = el;
                },
                width: columnSize[index],
              }),
            )}
          </div>
        </div>
        <Divider
          className={cn(classes[`divider${Utils.toUpperLatter(paddingSize)}`], 'scTableRowDivider')}
        />
        {showNestedChildren && (
          <div className={classes.nestedChildrenContainer}>
            {renderNestedChildren(nestedChildren, index + 1, columnSize)}
          </div>
        )}
      </div>
    );
  }
}

TableRow.defaultProps = {
  visibility: 'visible',
  value: {},
  nestedChildren: [],
  size: 0,
  index: 1,
  children: null,
  showNestedChildren: false,
  renderNestedChildren: () => {
  },
  onClick: () => {
  },
  onChange: () => {
  },
  columnSize: {},
};

TableRow.propTypes = {
  /** React-JSS injects a classes, which is a simple map of rule names and generated class names */
  classes: PropTypes.object,
  /** additional class name */
  className: PropTypes.string,
  /** table's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** table's Content */
  children: PropTypes.node,
  /** table's id */
  id: PropTypes.string,
  /** table's nested Children */
  renderNestedChildren: PropTypes.func,
  /** table's value */
  value: PropTypes.object,
  /** table's value children */
  nestedChildren: PropTypes.array,
  /** show children */
  showNestedChildren: PropTypes.bool,
  /** nested index */
  index: PropTypes.number,
  /** size children */
  size: PropTypes.number,
  /** is active children */
  active: PropTypes.bool,
  /** callback */
  onClick: PropTypes.func,
  /** callback open list */
  onChange: PropTypes.func,
  /** table's columnSize Content */
  columnSize: PropTypes.object,
};

export default TableRow;
