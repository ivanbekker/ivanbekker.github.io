import React, {PureComponent} from 'react';
import {storiesOf} from '@storybook/react';
import {select, boolean} from '@storybook/addon-knobs/react';
import Calendar from '../src/components/Calendar';
import TextField from '../src/components/TextField';
import DateUtils from '../src/components/utils/dateUtils';
import infoDecorator from '../.storybook/customDecorators/infoDecorator';
import themeDecorator from '../.storybook/customDecorators/themeDecorator';

const stories = storiesOf('Calendar', module);

infoDecorator(stories);
themeDecorator(stories);

const date = new Date();
const dateCopy = new Date(date);
dateCopy.setDate(date.getDate() + 42);
const MIN_VALUE = DateUtils.dateToUnixtime(DateUtils.startOf(date.getTime(), 'day'));
const MAX_VALUE = DateUtils.dateToUnixtime(DateUtils.startOf(dateCopy.getTime(), 'day'));
const BASE_VALUE = {
  unix: DateUtils.dateToUnixtime(new Date()),
};

class CalendarExample extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      calendar: false,
      value: {},
    };
  }

  handleOnChange({value}) {
    console.log(value);
    this.setState({calendar: false, value});
  }

  render() {
    const {value} = this.state;
    const {unix} = value;
    return (
      <TextField
        id="expirationDate"
        placeholder={'Due date'}
        helperText={'Set the due date for event'}
        value={unix ? DateUtils.toDate(unix, 'DD M YYYY, HH:mm') : ''}
        error={false}
        calendar={() => (
          <Calendar
            id="expirationDate"
            minValue={MIN_VALUE}
            maxValue={MAX_VALUE}
            value={value}
            onChange={::this.handleOnChange}
            time={true}
            timeZone={true}
            size="small"
            remind={true}
          />
        )}
      />
    );
  }
}

stories.add('default', () => (
  <Calendar
    visibility={select('Visibility', ['visible', 'hidden'], 'visible')}
    isoDays={boolean('isoDays', true)}
    time={boolean('Time', false)}
    timeZone={boolean('Time Zone', false)}
    remind={boolean('Remind', false)}
    value={BASE_VALUE}
    size={select('Size', ['small', 'medium'], 'small')}
  />
));

stories.add('empty value', () => (
  <Calendar
    visibility={select('Visibility', ['visible', 'hidden'], 'visible')}
    isoDays={boolean('isoDays', true)}
    time={boolean('Time', true)}
    timeZone={boolean('Time Zone', true)}
    remind={boolean('Remind', true)}
    size={select('Size', ['small', 'medium'], 'small')}
  />
));

stories.add('example', () => <CalendarExample/>);
