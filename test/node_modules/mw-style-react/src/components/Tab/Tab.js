import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Tab.style';

@injectSheet(styles)
class Tab extends PureComponent {
  constructor(props) {
    super(props);
    this.handleChange = ::this.handleChange;
  }

  handleChange(value) {
    const {id, onChange} = this.props;
    const error = false;
    onChange({id, value, error});
  }

  render() {
    const {
      children,
      className,
      id,
      classes,
      size,
      underline,
      error,
      value,
      type,
      tabItemIndent,
    } = this.props;

    const tabClasses = cn(className, classes.tabContainer, classes[size], classes[type], {
      bottomLine: !!underline,
    });
    const childrenTabs = Array.isArray(children) ? children : [children];
    const visibilityTabs = childrenTabs.filter(c => c.props.visibility !== 'hidden');

    return (
      <div id={id} className={tabClasses}>
        <div ref={container => (this.container = container)} className={cn(classes.tabs)}>
          {React.Children.map(visibilityTabs, tab =>
            React.cloneElement(tab, {
              itemRef: el => {
                this[`itemRef${tab.props.value}`] = el;
              },
              onChange: this.handleChange,
              activeItem: value,
              error,
              size,
              type,
              tabItemIndent,
            }),
          )}
        </div>
      </div>
    );
  }
}

Tab.defaultProps = {
  id: null,
  children: null,
  value: null,
  visibility: 'visible',
  type: 'fixed',
  size: 'medium',
  tabItemIndent: 'medium',
  underline: false,
  onChange: () => {
  },
};

Tab.propTypes = {
  classes: PropTypes.object,
  /** additional external class name */
  className: PropTypes.string,
  /** Tab's id */
  id: PropTypes.string,
  /** Tab's bottom line */
  type: PropTypes.oneOf(['fixed', 'auto']),
  /** Tab's bottom line */
  underline: PropTypes.bool,
  /** Tab options */
  children: PropTypes.node,
  /** Tab's active tab id */
  value: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ]),
  /** Tab's callback */
  onChange: PropTypes.func,
  /** Tab's size */
  size: PropTypes.oneOf(['small', 'medium']),
  /** TabItem indent */
  tabItemIndent: PropTypes.oneOf(['small', 'medium', 'large']),
  /** Error Tab id */
  error: PropTypes.bool,
};

export default Tab;
