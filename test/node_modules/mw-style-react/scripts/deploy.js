import shelljs from 'shelljs';
import fs from 'fs';
import path from 'path';
import os from 'os';
import colors from 'colors';


function getBuildVersion() {
  const packageData = fs.readFileSync(path.resolve(__dirname, '../package.json'), 'utf8');
  const p = JSON.parse(packageData);
  return p.version;
}

const buildVersion = getBuildVersion();

function pushChangesToDevelop() {
  const username = os.userInfo().username;
  if (shelljs.exec('git pull').code !== 0) {
    shelljs.echo('Error: Git pull failed');
    shelljs.exit(1);
  }
  if (shelljs.exec('git add ./').code !== 0) {
    shelljs.echo('Error: Git add failed');
    shelljs.exit(1);
  }
  if (shelljs.exec(`git commit -m "Lib new version: ${buildVersion} by ${username}"`).code !== 0) {
    shelljs.echo('Error: Git commit failed');
    shelljs.exit(1);
  }
  if (shelljs.exec('git push').code !== 0) {
    shelljs.echo('Error: Git push failed');
    shelljs.exit(1);
  }
  console.log(colors.green('SUCCESS. Push changes to repository, branch: develop'));
}


function mergeToMaster() {
  if (shelljs.exec('git checkout master').code !== 0) {
    shelljs.echo('Error: Git checkout master failed');
    shelljs.exit(1);
  }
  if (shelljs.exec('git pull').code !== 0) {
    shelljs.echo('Error: Git pull failed');
    shelljs.exit(1);
  }
  if (shelljs.exec('git merge develop').code !== 0) {
    shelljs.echo('Error: Git merge develop failed');
    shelljs.exit(1);
  }
  if (shelljs.exec('git push').code !== 0) {
    shelljs.echo('Error: Git push failed');
    shelljs.exit(1);
  }
  console.log(colors.green('SUCCESS. Merge to branch master'));
}


function createTag() {
  if (shelljs.exec(`git tag -a ${buildVersion} -m "version ${buildVersion}"`).code !== 0) {
    shelljs.echo('Error: Git create tag failed');
    shelljs.exit(1);
  }
  if (shelljs.exec('git push --tag').code !== 0) {
    shelljs.echo('Error: Git push tag failed');
    shelljs.exit(1);
  }
  console.log(colors.green(`SUCCESS. Create tag: ${buildVersion}`));
}

function backToDevelopBranch() {
  if (shelljs.exec('git checkout develop').code !== 0) {
    shelljs.echo('Error: Git checkout develop failed');
    shelljs.exit(1);
  }
  console.log(colors.green('SUCCESS. Back to develop branch'));
}

pushChangesToDevelop();
mergeToMaster();
createTag();
backToDevelopBranch();
