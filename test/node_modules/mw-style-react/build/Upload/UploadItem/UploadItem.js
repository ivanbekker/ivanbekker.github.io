'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _Label = require('../../Label');

var _Label2 = _interopRequireDefault(_Label);

var _Icon = require('../../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _utils = require('../../utils/utils');

var _utils2 = _interopRequireDefault(_utils);

var _fileUtils = require('../../utils/fileUtils');

var _fileUtils2 = _interopRequireDefault(_fileUtils);

var _UploadItem = require('./UploadItem.style');

var _UploadItem2 = _interopRequireDefault(_UploadItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UploadItem = (_dec = (0, _reactJss2.default)(_UploadItem2.default), _dec(_class = function (_PureComponent) {
  (0, _inherits3.default)(UploadItem, _PureComponent);

  function UploadItem(props) {
    (0, _classCallCheck3.default)(this, UploadItem);

    var _this = (0, _possibleConstructorReturn3.default)(this, (UploadItem.__proto__ || (0, _getPrototypeOf2.default)(UploadItem)).call(this, props));

    _this.removeFile = _this.removeFile.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(UploadItem, [{
    key: 'removeFile',
    value: function removeFile() {
      var _props = this.props,
          onRemove = _props.onRemove,
          id = _props.id;

      onRemove(id);
    }
  }, {
    key: 'renderPortalImg',
    value: function renderPortalImg() {
      var _props2 = this.props,
          type = _props2.type,
          classes = _props2.classes,
          label = _props2.label,
          value = _props2.value;

      if (type.indexOf('image') === -1) {
        return _react2.default.createElement(_Icon2.default, { type: 'picture', size: 'large' });
      }
      return _react2.default.createElement('img', { className: classes.chipImg, alt: label, src: value });
    }
  }, {
    key: 'renderDefaultImg',
    value: function renderDefaultImg() {
      var _props3 = this.props,
          type = _props3.type,
          classes = _props3.classes,
          label = _props3.label,
          value = _props3.value;

      if (type.indexOf('image') === -1) return null;
      return _react2.default.createElement('img', { className: classes.fileImg, alt: label, src: value });
    }

    // превью во внешнем потрале

  }, {
    key: 'renderPortal',
    value: function renderPortal() {
      var _props4 = this.props,
          classes = _props4.classes,
          className = _props4.className,
          id = _props4.id,
          label = _props4.label,
          error = _props4.error,
          size = _props4.size,
          maxFileSizeErrorText = _props4.maxFileSizeErrorText,
          maxFileSize = _props4.maxFileSize,
          closeIcon = _props4.closeIcon,
          _onClick = _props4.onClick;

      return _react2.default.createElement(
        'div',
        {
          id: id,
          onClick: function onClick() {
            return _onClick(id);
          },
          className: (0, _clsx2.default)(className, classes.fileItemChip, 'fileItemChip', { error: error })
        },
        this.renderPortalImg(),
        _react2.default.createElement(
          'div',
          { className: classes.chipTextBox },
          _react2.default.createElement(_Label2.default, {
            value: label,
            textColor: 'inherit',
            className: classes.chipText
          }),
          _react2.default.createElement(_Label2.default, {
            fontSize: 'small',
            value: error ? maxFileSizeErrorText + ' ' + _fileUtils2.default.biteToSize(maxFileSize) : '' + _fileUtils2.default.biteToSize(size),
            visibility: error ? 'visible' : 'disabled',
            className: classes.chipHelperText
          })
        ),
        closeIcon ? _react2.default.createElement(_Icon2.default, {
          type: 'close',
          size: 'small',
          color: 'currentColor',
          className: (0, _clsx2.default)(classes.delFileIcon),
          onClick: this.removeFile
        }) : null
      );
    }

    // превью по умолчанию

  }, {
    key: 'renderDefault',
    value: function renderDefault() {
      var _props5 = this.props,
          classes = _props5.classes,
          className = _props5.className,
          id = _props5.id,
          label = _props5.label,
          size = _props5.size,
          closeIcon = _props5.closeIcon,
          _onClick2 = _props5.onClick;


      return _react2.default.createElement(
        'div',
        { id: id, className: (0, _clsx2.default)(className, classes.fileItem), onClick: function onClick() {
            return _onClick2(id);
          } },
        _react2.default.createElement(
          'div',
          { className: classes.fileItemInfo },
          _react2.default.createElement(_Label2.default, { value: label, fontWeight: 'semibold' }),
          _react2.default.createElement('br', null),
          _react2.default.createElement(_Label2.default, { value: 'File size: ' + _fileUtils2.default.biteToSize(size), fontSize: 'small' }),
          _react2.default.createElement('br', null),
          this.renderDefaultImg()
        ),
        _react2.default.createElement(
          'div',
          { className: classes.fileItemControls },
          closeIcon ? _react2.default.createElement(_Icon2.default, {
            className: classes.delFileBtn,
            type: 'close',
            size: 'small',
            onClick: this.removeFile
          }) : null
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var viewType = this.props.viewType;

      return this['render' + _utils2.default.toUpperLatter(viewType)]();
    }
  }]);
  return UploadItem;
}(_react.PureComponent)) || _class);


UploadItem.defaultProps = {
  closeIcon: true,
  visibility: 'visible',
  viewType: 'default',
  maxFileSize: null,
  onRemove: function onRemove() {},
  onClick: function onClick() {},
  maxFileSizeErrorText: '',
  error: false
};

UploadItem.propTypes = {
  classes: _propTypes2.default.object,
  /** Files's visibility */
  // visibility: PropTypes.oneOf(['visible', 'hidden']).isRequired,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** File's id */
  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /** File name  */
  label: _propTypes2.default.string,
  /** File source  */
  value: _propTypes2.default.string,
  /** File type source  */
  type: _propTypes2.default.string,
  /** File view type  */
  viewType: _propTypes2.default.oneOf(['default', 'portal']).isRequired,
  /** File size  */
  size: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /** Error */
  error: _propTypes2.default.bool,
  /** Max File size  */
  maxFileSize: _propTypes2.default.number,
  /** Max File size error text */
  maxFileSizeErrorText: _propTypes2.default.string,
  /** onRemove callback */
  onRemove: _propTypes2.default.func,
  /** show closeIcon */
  closeIcon: _propTypes2.default.bool,
  /** onClick callback */
  onClick: _propTypes2.default.func
};

exports.default = UploadItem;