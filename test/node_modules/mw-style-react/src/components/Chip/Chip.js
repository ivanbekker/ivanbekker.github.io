import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Icon from '../Icon/Icon.js';
import Avatar from '../Avatar/Avatar.js';
import Label from '../Label/Label.js';
import styles from './Chip.style';

@injectSheet(styles)
class Chip extends PureComponent {
  constructor(props) {
    super(props);
    this.closeClick = ::this.closeClick;
  }

  closeClick(e) {
    e.stopPropagation();
    const {closeClick} = this.props;
    closeClick();
  }

  render() {
    const {
      id,
      classes,
      className,
      label,
      src,
      icon,
      closeIcon,
      onClick,
      onMouseEnter,
      onMouseLeave,
      type,
      size,
      fontSize,
      fontWeight,
      children
    } = this.props;
    const chipClasses = cn(className, classes.chip, classes[type], classes[size]);
    const hasSrc = src && src.length;

    return (
      <div
        id={id}
        className={chipClasses}
        onClick={onClick}
        onMouseEnter={onMouseEnter}
        onMouseLeave={onMouseLeave}
      >
        {hasSrc && <Avatar size="medium" src={src} className={cn(classes.avatar)}/>}
        {icon && !hasSrc && (
          <Icon type={icon} size="small" className={cn(classes.icon)}/>
        )}
        {label && <Label
          fontSize={fontSize}
          fontWeight={fontWeight}
          value={label}
          textColor="inherit"
          className={cn(classes.label)}
        />}
        {children}
        {closeIcon && (
          <Icon
            type="close"
            size="micro"
            color="currentColor"
            className={cn(classes.closeIcon)}
            onClick={this.closeClick}
          />
        )}
      </div>
    );
  }
}

Chip.defaultProps = {
  closeIcon: true,
  closeClick: () => {
  },
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  },
  size: 'medium',
  fontSize: 'medium',
  fontWeight: 'semibold',
  type: 'rounded',
  children: null
};

Chip.propTypes = {
  classes: PropTypes.object,
  /** additional external class name */
  className: PropTypes.string,
  /** type */
  type: PropTypes.oneOf(['rounded', 'rectangular']),
  /** size */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /** label font size */
  fontSize: PropTypes.oneOf(['small', 'medium']),
  /** label weight */
  fontWeight: PropTypes.oneOf(['normal', 'semibold']),
  /** label text */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** element id */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** avatar src */
  src: PropTypes.string,
  /** icon chip */
  icon: PropTypes.string,
  /** is close icon */
  closeIcon: PropTypes.bool,
  /** callback click chip */
  onClick: PropTypes.func,
  /** callback MouseEnter chip */
  onMouseEnter: PropTypes.func,
  /** callback MouseLeave chip */
  onMouseLeave: PropTypes.func,
  /** callback click close icon */
  closeClick: PropTypes.func,
  /** child components */
  children: PropTypes.node,
};

export default Chip;
