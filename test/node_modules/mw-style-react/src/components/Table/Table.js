import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Table.style';

@injectSheet(styles)
class Table extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      columnSize: {},
    };
    this.handleColumnSize = ::this.handleColumnSize;
  }

  static childContextTypes = {
    scrolled: PropTypes.bool,
    visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
    paddingSize: PropTypes.oneOf(['small', 'medium']),
  };

  getChildContext() {
    const {scrolled, visibility, paddingSize} = this.props;
    return {scrolled, visibility, paddingSize};
  }

  handleColumnSize(columnSize) {
    this.setState({
      columnSize,
    });
  }

  renderTable(tableClasses, children) {
    return (
      <div className={tableClasses}>
        {React.Children.map(children, child =>
          React.cloneElement(child, {
            getColumnSize: this.handleColumnSize,
            columnSize: this.state.columnSize,
          }),
        )}
      </div>
    );
  }

  render() {
    const {className, classes, visibility, children, scrolled} = this.props;

    const tableClasses = cn(
      classes.table,
      {[`${className}`]: !scrolled},
      {hidden: visibility === 'hidden'},
      {disabled: visibility === 'disabled'},
    );

    const tableWrapClasses = cn(
      classes.tableWrap,
      className,
      {hidden: visibility === 'hidden'},
      {disabled: visibility === 'disabled'},
      {scrolled},
    );

    return scrolled ? (
      <div className={tableWrapClasses}>{this.renderTable(tableClasses, children)}</div>
    ) : (
      this.renderTable(tableClasses, children)
    );
  }
}

Table.defaultProps = {
  visibility: 'visible',
  scrolled: false,
  paddingSize: 'medium',
};

Table.propTypes = {
  /** React-JSS injects a classes, which is a simple map of rule names and generated class names */
  classes: PropTypes.object,
  /** additional class name */
  className: PropTypes.string,
  /** table's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** table's horizontal padding */
  paddingSize: PropTypes.oneOf(['small', 'medium']),
  /** table's Content */
  children: PropTypes.node.isRequired,
  /** is scrollable */
  scrolled: PropTypes.bool,
};

export default Table;
