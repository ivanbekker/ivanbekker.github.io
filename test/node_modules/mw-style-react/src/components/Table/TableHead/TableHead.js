import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './TableHead.style';

@injectSheet(styles)
class TableHead extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      columnSize: {},
    };
  }

  componentWillMount() {
    const columnSize = {};
    // Делаем один массив если часть tableCell добавляется динамически
    const newChildren = this.props.children.props.children.reduce((acc, e) => acc.concat(e), []);

    newChildren.forEach((item, index) => {
      columnSize[index] = item.props.width;
    });
    this.setState({
      columnSize,
    });
    this.props.getColumnSize(columnSize);
  }

  render() {
    const {columnSize} = this.state;
    const {className, classes, children, fixed} = this.props;

    return (
      <div className={cn(classes.tableHead, className, {fixed})}>
        {React.Children.map(children, child =>
          React.cloneElement(child, {
            columnSize,
          }),
        )}
      </div>
    );
  }
}

TableHead.defaultProps = {
  visibility: 'visible',
  getColumnSize: () => {
  },
  fixed: false,
};

TableHead.propTypes = {
  /** React-JSS injects a classes, which is a simple map of rule names and generated class names */
  classes: PropTypes.object,
  /** additional class name */
  className: PropTypes.string,
  /** table's Content */
  children: PropTypes.node,
  /** table's column size Content */
  getColumnSize: PropTypes.func,
  /** table's header position*/
  fixed: PropTypes.bool,
};

export default TableHead;
