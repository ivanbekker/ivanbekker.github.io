'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FileUtils = {
  download: function download(url, name) {
    var link = document.createElement('a');
    link.href = url;

    if (link.download !== undefined) {
      // Set HTML5 download attribute. This will prevent file from opening if supported.
      var fileName = name || url.substring(url.lastIndexOf('/') + 1, url.length);
      link.download = fileName;

      // Dispatching click event.
      if (document.createEvent) {
        var e = document.createEvent('MouseEvents');
        e.initEvent('click', true, true);
        link.dispatchEvent(e);
        return true;
      }

      // Force file download (whether supported by server).
      var query = '?download';

      window.open(url + query, '_self');
    } else {
      document.location.href = url;
    }
  },
  _promiseFileReader: function _promiseFileReader(file) {
    var reader = new FileReader();

    return new _promise2.default(function (resolve, reject) {
      reader.onerror = function () {
        reader.abort();
        reject(new DOMException('Problem parsing input file'));
      };
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.readAsDataURL(file);
    });
  },
  makeFilesArr: function makeFilesArr(filesSource) {
    var _this = this;

    return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var files, i, file, value, fileObj;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              files = [];
              i = 0;

            case 2:
              if (!(i < filesSource.length)) {
                _context.next = 12;
                break;
              }

              file = filesSource[i];
              _context.next = 6;
              return _this._promiseFileReader(file);

            case 6:
              value = _context.sent;
              fileObj = {
                id: i.toString() + '_' + _utils2.default.random(),
                label: file.name,
                size: file.size,
                type: file.type,
                value: value,
                fileSource: file
              };

              files.push(fileObj);

            case 9:
              i += 1;
              _context.next = 2;
              break;

            case 12:
              return _context.abrupt('return', files);

            case 13:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }))();
  },
  biteToSize: function biteToSize(bites) {
    var KB = 1024;
    var MB = KB * 1024;
    if (bites >= MB) {
      return (bites / MB).toFixed(2) + ' MB';
    } else if (bites >= KB) {
      return (bites / KB).toFixed(2) + ' KB';
    }
    return bites + ' B';
  }
};
exports.default = FileUtils;