import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Radio.style';

@injectSheet(styles)
class Radio extends PureComponent {
  constructor(props) {
    super(props);
    this.handleChange = ::this.handleChange;
  }

  handleChange(value) {
    const {id, visibility, onChange} = this.props;
    if (visibility === 'disabled') return;
    const error = false;
    onChange({id, value, error});
  }

  render() {
    const {id, classes, className, value, children, visibility, align} = this.props;
    return (
      <div
        id={id}
        className={cn(
          className,
          classes.radio,
          {hidden: visibility === 'hidden'},
          {disabled: visibility === 'disabled'},
          {horizontal: align === 'horizontal'},
        )}
      >
        {React.Children.map(children, child =>
          React.cloneElement(child, {
            className: classes.item,
            activeItem: value,
            onChange: this.handleChange,
          }),
        )}
      </div>
    );
  }
}

Radio.defaultProps = {
  id: null,
  value: null,
  visibility: 'visible',
  align: 'vertical',
  error: false,
  onChange: () => {
  },
};

Radio.propTypes = {
  classes: PropTypes.object,
  /** Radio visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** Radio options */
  children: PropTypes.node.isRequired,
  /** Radio align */
  align: PropTypes.oneOf(['vertical', 'horizontal']),
  /** Radio value */
  value: PropTypes.string,
  /** element id */
  id: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** onChange callback */
  onChange: PropTypes.func,
};

export default Radio;
