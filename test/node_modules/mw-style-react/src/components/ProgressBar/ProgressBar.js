import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Label from '../Label';
import styles from './ProgressBar.style';

@injectSheet(styles)
class ProgressBar extends PureComponent {
  calcCirclePercent(r, value) {
    if (!value) return {};
    const cLen = Math.PI * (r * 2);
    const per = value / 100 * cLen;
    return {
      strokeDasharray: `${per}px, 200px`,
      strokeDashoffset: '0px',
    };
  }

  correctValue(value) {
    // correct value min 0, max 100;
    const min = 0;
    const max = 100;
    if (value < min) value = min;
    if (value > max) value = max;
    // check for a number
    if (!Number(value)) value = false;

    return value;
  }

  renderCircle(classes, value) {
    const cls = cn(classes.circleBar, {circleAnimation: !value});
    const r = 20;
    const styleProgress = this.calcCirclePercent(r, value);
    return (
      <div className={classes.circleWrap}>
        <svg className={cls} viewBox="0 0 50 50">
          {value ? (
            <circle cx="25" cy="25" r={r} fill="none" className={classes.circleBackground}/>
          ) : null}
          <circle cx="25" cy="25" r={r} fill="none" style={styleProgress}/>
        </svg>
        {value ? <Label className={classes.circleLabel} value={`${value}%`}/> : null}
      </div>
    );
  }

  renderLine(classes, value) {
    return (
      <div className={classes.lineWrap}>
        <div className={classes.progressLineBackground}>
          <div
            className={cn(classes.progressLine, {animation: !value})}
            style={{width: `${value}%`}}
          />
        </div>
        {value ? <Label className={classes.lineLabel} value={`${value}%`}/> : null}
      </div>
    );
  }

  render() {
    const {id, classes, className, size, type, value, visibility} = this.props;
    const corValue = this.correctValue(value);

    return (
      <div
        id={id}
        className={cn(className, classes.progressBar, classes[size], classes[type], {
          hidden: visibility === 'hidden',
        })}
      >
        {type === 'circle'
          ? this.renderCircle(classes, corValue, size)
          : this.renderLine(classes, corValue)}
      </div>
    );
  }
}

ProgressBar.defaultProps = {
  visibility: 'visible',
  type: 'circle',
  size: 'medium',
};

ProgressBar.propTypes = {
  classes: PropTypes.object,
  /** ProgressBar's visibility */
  visibility: PropTypes.oneOf(['visible', 'hidden']),
  /** additional external class name */
  className: PropTypes.string,
  /** ProgressBar's id */
  id: PropTypes.string,
  /** ProgressBar's type */
  type: PropTypes.string,
  /** ProgressBar's size */
  size: PropTypes.string,
  /** ProgressBar's value for type "loader" */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
};

export default ProgressBar;
