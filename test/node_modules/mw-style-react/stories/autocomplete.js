import React, {Fragment, PureComponent} from 'react';
import {storiesOf} from '@storybook/react';
import {text, select, boolean, number} from '@storybook/addon-knobs/react';
import Autocomplete, {AutocompleteItem} from '../src/components/Autocomplete';
import Label from '../src/components/Label';
import Chip from '../src/components/Chip';
import infoDecorator from '../.storybook/customDecorators/infoDecorator';
import themeDecorator from '../.storybook/customDecorators/themeDecorator';

const stories = storiesOf('Autocomplete', module);
infoDecorator(stories);
themeDecorator(stories);

class AutocompleteExample extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      value: '',
      selected: [],
      list: [
        {id: '1', value: 'Albania'},
        {id: '2', value: 'Afganistan'},
        {id: '3', value: 'Aland Islands'},
        {id: '4', value: 'Algeria'},
        {id: '5', value: 'American Samoa'},
        {id: '6', value: 'aAmerican Samoa'},
        {id: '7', value: 'aFAmerican Samoa'},
        {id: '8', value: 'aVFAmerican Samoa'},
      ]
    };
  }

  handleChange({value}) {
    this.setState({value});
  }

  handleListItemClick({id, value}) {
    const {selected} = this.state;
    const selectedItem = selected.map((i) => (i.id)).indexOf(id);
    if (selectedItem !== -1) return;
    const newItems = selected.slice(0);
    newItems.push({id, value});
    this.setState({selected: newItems, value: ''});
  }

  handleChipCloseClick(id) {
    const {selected} = this.state;
    const newItems = selected.slice(0);
    const removeIndex = newItems.map((i) => (i.id)).indexOf(id);
    newItems.splice(removeIndex, 1);
    this.setState({selected: newItems});
  }

  renderChipsItems() {
    const {selected} = this.state;
    return selected.map(item => (
      <Chip
        key={item.id}
        className="create__content__chip"
        label={item.value}
        closeClick={() => this.handleChipCloseClick(item.id)}
      />
    ));
  }

  renderSearchResult() {
    const {value, list, selected} = this.state;
    const inputValue = value.toLowerCase().trim();
    let count = 0;
    const items =
      list
        .filter(item => {
          const itemValue = item.value.toLowerCase();
          const itemIsNotSelected = !(selected.findIndex((i) => i.id === item.id) !== -1);
          const keep =
            inputValue &&
            itemValue.indexOf(inputValue) !== -1 &&
            itemValue.indexOf(inputValue) !== -1 &&
            itemIsNotSelected &&
            count < 8;

          if (keep) {
            count += 1;
          }
          return keep;
        })
        .map(item => (
          <AutocompleteItem
            value={item.value}
            id={item.id}
            key={item.id}
            onClick={::this.handleListItemClick}
          />
        ));
    if (!items.length) {
      return null;
    }

    return (
      <div>
        {items}
      </div>);
  }

  render() {
    const {value} = this.state;
    return (
      <Autocomplete
        placeholder={'Search a country (starts with a)'}
        value={value}
        label={'Some text'}
        onChange={::this.handleChange}
        chipsItems={::this.renderChipsItems}
        searchResult={::this.renderSearchResult}
      />);
  }
}

stories
  .add('default',
    () => (
      <Autocomplete
        visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
        label={text('Label', 'Label text')}
        value={text('Value', 'test field')}
        error={boolean('Error', false)}
        helperText={text('helperText')}
        rightText={text('RightText', 'right text')}
        length={number('length', 100)}
        placeholder={text('Placeholder', '')}
        autoFocus={boolean('autoFocus', true)}
        chipsItems={() => (
          <Fragment>
            <Chip
              key={'1'}
              label={'name 1'}
              src={''}
            />
            <Chip
              src={'http://localhost:4002/download/ipfs?hash=QmRc2JDcG8fRXrMyp2Kuut5BJLpJDnsA46Rj4GQX6S4FUb&udid=152631751443024&secret=BddQM1L0376ca2LxOLdPKQ%3D%3D'}
              key={'2'}
              label={'name 2'}
            />
          </Fragment>
        )}
        searchTitle={() => (
          <Label value={'Users'}/>
        )}
        searchResult={() => (
          <div>
            <AutocompleteItem
              value={'name 3name 3name 3name 3name 3name 3name 3name 3name 3'}
              avatar={'https://www.corezoid.com/avatars/59439.jpg'}
              id={'1'}
            />
            <AutocompleteItem
              value={'name 4'}
              id={'4'}
            />
          </div>)
        }
      />
    )
  );

stories
  .add('example',
    () => (
      <AutocompleteExample/>
    )
  );
