import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './TableCell.style';

@injectSheet(styles)
class TableCell extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {};
  }

  static contextTypes = {
    scrolled: PropTypes.bool.isRequired,
  };

  render() {
    const {className, classes, visibility, children, width} = this.props;
    const {scrolled} = this.context;

    const style = {
      flexGrow: width === 'auto' ? 1 : 0,
      minWidth: scrolled ? `${width}px` : 0,
      width: width === 'auto' ? '200px' : `${width}px`,
    };
    if (width !== 'auto') style.padding = 0;

    return (
      <div
        className={cn(
          classes.tableCell,
          className,
          {hidden: visibility === 'hidden'},
          {disabled: visibility === 'disabled'},
          'scTableCell',
          {ellipsis: typeof children === 'string'},
        )}
        style={style}
      >
        {children}
      </div>
    );
  }
}

TableCell.defaultProps = {
  visibility: 'visible',
  width: '200',
};

TableCell.propTypes = {
  /** React-JSS injects a classes, which is a simple map of rule names and generated class names */
  classes: PropTypes.object,
  /** additional class name */
  className: PropTypes.string,
  /** table's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** table's Content */
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /** table's Cell Content */
  width: PropTypes.string,
};

export default TableCell;
