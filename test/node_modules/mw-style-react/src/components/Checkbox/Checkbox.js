import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Icon from '../Icon';
import Label from '../Label';
import Utils from '../utils/utils';
import styles from './Checkbox.style';

@injectSheet(styles)
class Checkbox extends PureComponent {
  constructor(props) {
    super(props);
    this.handleOnChange = ::this.handleOnChange;
  }

  handleOnChange() {
    const {id, value, visibility, required, onChange} = this.props;
    if (visibility === 'disabled') return;
    const valueF = !Utils.tryToBool(value);
    const error = required && !value;
    onChange({id, value: valueF, error});
  }

  render() {
    const {id, classes, className, error, visibility, value, children, helperText} = this.props;
    const uniqId = Utils.random();
    const isChecked = Utils.tryToBool(value);

    return (
      <div
        id={id}
        className={cn(
          className,
          classes.checkbox,
          {checked: isChecked},
          {error: !!error},
          {hidden: visibility === 'hidden'},
          {disabled: visibility === 'disabled'},
        )}
      >
        <div className={classes.content}>
          <input
            className={classes.input}
            type="checkbox"
            value={isChecked}
            id={`id-${uniqId}`}
            onChange={this.handleOnChange}
          />
          <Icon
            className={classes.icon}
            type={isChecked ? 'checkbox_on' : 'checkbox_off'}
            error={error}
            size="medium"
            color="currentColor"
          />
          <label className={classes.label} htmlFor={`id-${uniqId}`}>
            {children}
          </label>
        </div>
        {helperText && (
          <Label
            className={cn(classes.helperText, {error})}
            value={helperText}
            fontSize="small"
            error={error}
          />
        )}
      </div>
    );
  }
}

Checkbox.defaultProps = {
  visibility: 'visible',
  error: false,
  value: false,
  onChange: () => {
  },
};

Checkbox.propTypes = {
  classes: PropTypes.object,
  /** text field's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** checkbox child nodes */
  children: PropTypes.node.isRequired,
  /** Does text field's has an error */
  error: PropTypes.bool,
  /** checkbox helperText */
  helperText: PropTypes.string,
  /** checkbox value */
  value: PropTypes.bool,
  /** Is checkbox required? */
  required: PropTypes.bool,
  /** element id */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** additional external class name */
  className: PropTypes.string,
  /** onChange callback */
  onChange: PropTypes.func,
};

export default Checkbox;
