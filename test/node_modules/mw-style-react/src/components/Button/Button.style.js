export default theme => ({
  button: {
    position: 'relative',
    display: 'inline-flex',
    outline: 0,
    justifyContent: 'center',
    alignItems: 'center',
    boxSizing: 'border-box',
    borderRadius: theme.button.borderRadius,
    border: theme.button.border,
    borderStyle: 'solid',
    boxShadow: theme.button.boxShadow,
    transition: theme.transition(['background', 'border']),
    cursor: 'pointer',
    '&.hidden': {
      display: 'none',
    },
    padding: '0 15px',
    '& > span': {
      margin: '0 8px',
      lineHeight: '19px',
      position: 'relative',
      top: -1,
    },
    '&.hideIcon > span': {
      marginLeft: 0,
    },
    '&.hideIconAfter > span': {
      marginRight: 0,
    },
    '&.hideLabel > span': {
      display: 'none',
    },
    '&.rounded': {
      borderRadius: '50%',
    },
  },
  default: Object.assign(theme.button.default.normal, {
    '&.disabled': {
      cursor: theme.button.default.disabled.cursor,
      backgroundColor: theme.button.default.disabled.backgroundColor,
      borderColor: theme.button.default.disabled.borderColor,
      color: theme.button.default.disabled.color
    },
    '&:not(.disabled):hover': {
      backgroundColor: theme.button.default.hover.backgroundColor,
      color: theme.button.default.hover.color,
      borderColor: theme.button.default.hover.borderColor,
    },
    '&:not(.disabled):active, &:not(.disabled):focus': {
      backgroundColor: theme.button.default.normal.backgroundColor,
      color: theme.button.default.normal.color,
      borderColor: theme.button.default.normal.borderColor
    }
  }),
  secondary: Object.assign(theme.button.secondary.normal, {
    '&.disabled': {
      cursor: theme.button.secondary.disabled.cursor,
      backgroundColor: theme.button.secondary.disabled.backgroundColor,
      borderColor: theme.button.secondary.disabled.borderColor,
      color: theme.button.secondary.disabled.color
    },
    '&:not(.disabled):hover': {
      backgroundColor: theme.button.secondary.hover.backgroundColor,
      color: theme.button.secondary.hover.color,
      borderColor: theme.button.secondary.hover.borderColor,
    },
    '&:not(.disabled):active, &:not(.disabled):focus': {
      backgroundColor: theme.button.secondary.normal.backgroundColor,
      color: theme.button.secondary.normal.color,
      borderColor: theme.button.secondary.normal.borderColor
    }
  }),
  text: Object.assign(theme.button.text.normal, {
    '&.disabled': {
      cursor: theme.button.text.disabled.cursor,
      backgroundColor: theme.button.text.disabled.backgroundColor,
      borderColor: theme.button.text.disabled.borderColor,
      color: theme.button.text.disabled.color
    },
    '&:not(.disabled):hover': {
      backgroundColor: theme.button.text.hover.backgroundColor,
      color: theme.button.text.hover.color,
      borderColor: theme.button.text.hover.borderColor,
    },
    '&:not(.disabled):active, &:not(.disabled):focus': {
      backgroundColor: theme.button.text.normal.backgroundColor,
      color: theme.button.text.normal.color,
      borderColor: theme.button.text.normal.borderColor
    }
  }),
  small: {
    height: 32,
    '&.hideLabel': {
      padding: '0 9px',
    },
  },
  smallplus: {
    height: 36,
    '&.hideLabel': {
      padding: '0 9px',
    },
  },
  medium: {
    height: 40,
    '&.hideLabel': {
      padding: '0 11px',
    },
  },
  large: {
    height: 44,
    padding: '0 23px',
    '&.hideLabel': {
      padding: '0 13px',
    },
  },
  menu: {
    position: 'absolute',
    left: 0,
    top: 'calc(100% + 4px)',
    color: theme.textColor,
    // TODO доработать открытие вверх
  },
});
