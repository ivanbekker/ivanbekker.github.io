import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './TabItem.style';
import Label from '../../Label/index';
import Icon from '../../Icon/index';

@injectSheet(styles)
class TabItem extends PureComponent {
  constructor(props) {
    super(props);
    this.handleClick = ::this.handleClick;
  }

  handleClick() {
    const {value, visibility, onChange} = this.props;
    if (visibility === 'disabled') return;
    onChange(value);
  }

  render() {
    const {
      id,
      classes,
      value,
      visibility,
      leftIcon,
      rightIcon,
      leftIconSize,
      rightIconSize,
      label,
      size,
      type,
      error,
      activeItem,
      itemRef,
      className,
      tabItemIndent,
    } = this.props;

    return (
      <div
        ref={itemRef}
        id={id}
        className={cn(
          className,
          classes.tab,
          classes[size],
          classes[type],
          classes[`indent${tabItemIndent}`],
          {error: !!error},
          {disabled: visibility === 'disabled'},
          {hidden: visibility === 'hidden'},
          {active: activeItem === value},
          'tabItem',
        )}
        onClick={this.handleClick}
      >
        {leftIcon && <Icon
          type={leftIcon}
          className={cn(classes.icon, classes.leftIcon, 'leftIcon')}
          size={leftIconSize}
        />}
        {label && (
          <Label
            className={cn(classes.label)}
            value={label}
            fontSize={size === 'small' ? 'small' : 'medium'}
          />
        )}
        {rightIcon && <Icon
          type={rightIcon}
          className={cn(classes.icon, classes.rightIcon, 'rightIcon')}
          size={rightIconSize}
        />}
      </div>
    );
  }
}

TabItem.defaultProps = {
  id: null,
  error: false,
  visibility: 'visible',
  type: 'fixed',
  size: 'medium',
  tabItemIndent: 'medium',
  leftIconSize: 'small',
  rightIconSize: 'small',
  onChange: () => {
  },
};

TabItem.propTypes = {
  classes: PropTypes.object,
  /** TabItem's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** TabItem's id */
  id: PropTypes.string,
  /** TabItem's value */
  value: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ]).isRequired,
  /** active item */
  activeItem: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ]),
  /** TabItem's callback */
  onChange: PropTypes.func,
  /** TabItem's leftIcon */
  leftIcon: PropTypes.string,
  /** TabItem's leftIcon */
  leftIconSize: PropTypes.oneOf(['small', 'micro']),
  /** TabItem's rightIcon */
  rightIcon: PropTypes.string,
  /** TabItem's leftIcon */
  rightIconSize: PropTypes.oneOf(['small', 'micro']),
  /** TabItem's label */
  label: PropTypes.string,
  /** TabItem's size */
  size: PropTypes.oneOf(['small', 'medium']),
  /** TabItem's type */
  type: PropTypes.string,
  /** Error Tab id */
  error: PropTypes.bool,
  /** TabItem's reference */
  itemRef: PropTypes.func,
  /** additional external class name */
  className: PropTypes.string,
  /** TabItem indent */
  tabItemIndent: PropTypes.oneOf(['small', 'medium', 'large']),
};

export default TabItem;
