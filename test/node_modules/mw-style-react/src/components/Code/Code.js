import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Label from '../Label';
import Button from '../Button';
import styles from './Code.style';

@injectSheet(styles)
class Code extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      copied: false,
    };
    this.copy = ::this.copy;
  }

  componentWillMount() {
    this._isMounted = true;
    const {forwardRef} = this.props;
    this.source = forwardRef || React.createRef();
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  copy(e) {
    const {onCopy, visibility} = this.props;
    if (!this._isMounted || visibility === 'disabled') return;
    if (onCopy) {
      onCopy(e);
      return;
    }

    let range;
    let selection;
    if (document.body.createTextRange) {
      range = document.body.createTextRange();
      range.moveToElementText(this.source.current);
      range.select();
    } else if (window.getSelection) {
      selection = window.getSelection();
      range = document.createRange();
      range.selectNodeContents(this.source.current);
      selection.removeAllRanges();
      selection.addRange(range);
    }
    document.execCommand('copy');
    this.setState({copied: true});
    setTimeout(() => {
      if (!this._isMounted) return;
      this.setState({copied: false});
    }, 2000);
  }

  render() {
    const {classes, className, id, visibility, value, label, buttonLabel} = this.props;

    const coClasses = cn(
      className,
      classes.code,
      {hidden: visibility === 'hidden'},
      {disabled: visibility === 'disabled'},
    );
    return (
      <div id={id} className={coClasses}>
        <Label className={classes.label} value={label}/>
        <div className={classes.source}>
          <pre className={classes.pre} ref={this.source}>
            <code className={classes.value}>{value}</code>
          </pre>
          <Button
            className={classes.btn}
            size="small"
            label={buttonLabel}
            onClick={this.copy}
            icon={this.state.copied ? 'check' : null}
          />
        </div>
      </div>
    );
  }
}

Code.defaultProps = {
  visibility: 'visible',
  buttonLabel: 'Copy',
};

Code.propTypes = {
  classes: PropTypes.object,
  /** Code's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Code's id */
  id: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** Code's value */
  value: PropTypes.string,
  /** Code's label */
  label: PropTypes.string,
  /** Code's copy button text */
  buttonLabel: PropTypes.string,
  /** Code's onCopy */
  onCopy: PropTypes.string,
  /** Use that property to pass a ref callback to the native input component. */
  forwardRef: PropTypes.object,
};

export default Code;
