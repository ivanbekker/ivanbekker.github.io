'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = withForm;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function withForm(formProps, Form) {
  /**
   * Default handlers
   */
  var defFormProps = {
    handleSubmit: function handleSubmit() {},
    handleOnChange: function handleOnChange(field) {
      return field;
    },
    setValues: function setValues(values) {
      return values;
    },
    mapPropsToValues: function mapPropsToValues() {
      return {};
    },
    defaultErrorMsg: {},
    validate: function validate() {
      return {};
    },
    yup: null
  };

  /**
   * Handlers merge
   */
  var customFormProps = (0, _assign2.default)({}, defFormProps, formProps);

  /**
   * HOC for handle form
   */

  var WithForm = function (_React$Component) {
    (0, _inherits3.default)(WithForm, _React$Component);

    function WithForm(props) {
      (0, _classCallCheck3.default)(this, WithForm);

      var _this = (0, _possibleConstructorReturn3.default)(this, (WithForm.__proto__ || (0, _getPrototypeOf2.default)(WithForm)).call(this, props));

      _this.state = {
        values: customFormProps.mapPropsToValues(props),
        errors: {},
        isSubmit: false
      };
      _this.setSubmitting = _this.setSubmitting.bind(_this);
      _this.setErrors = _this.setErrors.bind(_this);
      _this.setValues = _this.setValues.bind(_this);
      _this.handleSubmit = _this.handleSubmit.bind(_this);
      _this.handleOnChange = _this.handleOnChange.bind(_this);
      _this.removeError = _this.removeError.bind(_this);
      _this.handleKeyPress = _this.handleKeyPress.bind(_this);
      return _this;
    }

    (0, _createClass3.default)(WithForm, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var prevData = (0, _stringify2.default)(customFormProps.mapPropsToValues(this.props));
        var nextData = (0, _stringify2.default)(customFormProps.mapPropsToValues(nextProps));
        if (prevData !== nextData) {
          this.setState({
            values: customFormProps.mapPropsToValues(nextProps)
          });
        }
      }

      // Handler on change field

    }, {
      key: 'handleOnChange',
      value: function handleOnChange(field) {
        var _customFormProps$hand = customFormProps.handleOnChange(field, this.props),
            id = _customFormProps$hand.id,
            value = _customFormProps$hand.value,
            error = _customFormProps$hand.error;

        var objVal = (0, _defineProperty3.default)({}, id, value);
        var values = (0, _extends3.default)({}, this.state.values, objVal);
        this.setValues(values);
        if (error) {
          var errorMsg = this.getDefaultErrorMsg(id);
          this.setErrors((0, _defineProperty3.default)({}, id, errorMsg));
        } else {
          this.removeError(id);
        }
      }

      // Handler on submit form

    }, {
      key: 'handleSubmit',
      value: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(arg) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { skipValidation: false };

          var dispatch, _state, values, errors, validationErrors, allErrors, findErrors;

          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  dispatch = this.props.dispatch;
                  _state = this.state, values = _state.values, errors = _state.errors;

                  if (options.skipValidation) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 5;
                  return this.runValidation(values);

                case 5:
                  validationErrors = _context.sent;
                  allErrors = (0, _assign2.default)({}, errors, validationErrors);

                  this.setErrors(allErrors);

                  findErrors = (0, _keys2.default)(allErrors).filter(function (key) {
                    return !!allErrors[key];
                  });

                  if (!(findErrors.length > 0)) {
                    _context.next = 11;
                    break;
                  }

                  return _context.abrupt('return');

                case 11:

                  this.setSubmitting(true);
                  customFormProps.handleSubmit(values, dispatch, {
                    setSubmitting: this.setSubmitting,
                    setErrors: this.setErrors,
                    setValues: this.setValues
                  }, this.props, arg);

                case 13:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handleSubmit(_x) {
          return _ref.apply(this, arguments);
        }

        return handleSubmit;
      }()

      // Handler on field key press

    }, {
      key: 'handleKeyPress',
      value: function handleKeyPress(e) {
        if (customFormProps.handleKeyPress) {
          customFormProps.handleKeyPress(e, this.props, {
            setSubmitting: this.setSubmitting,
            setErrors: this.setErrors,
            setValues: this.setValues,
            handleSubmit: this.handleSubmit,
            handleOnChange: this.handleOnChange
          });
        } else if (e && e.key === 'Enter') {
          this.handleSubmit();
        }
      }

      // Set form status

    }, {
      key: 'setSubmitting',
      value: function setSubmitting(isSubmit) {
        this.setState({ isSubmit: isSubmit });
      }

      // Set error message from defaultErrorMsg

    }, {
      key: 'getDefaultErrorMsg',
      value: function getDefaultErrorMsg(id) {
        var defaultErrorMsg = customFormProps.defaultErrorMsg;
        return defaultErrorMsg[id] || 'Incorrect data';
      }

      // Set fileds errors

    }, {
      key: 'setErrors',
      value: function setErrors(errors) {
        this.setSubmitting(false);
        this.setState({
          errors: (0, _extends3.default)({}, this.state.errors, errors)
        });
      }

      // Remove error from fields

    }, {
      key: 'removeError',
      value: function removeError(id) {
        var errors = (0, _assign2.default)({}, this.state.errors);
        delete errors[id];
        this.setState({ errors: errors });
      }

      // Set fields values

    }, {
      key: 'setValues',
      value: function setValues(values) {
        values = customFormProps.setValues(values);
        this.setState({
          values: (0, _extends3.default)({}, this.state.values, values)
        });
      }

      // Form validation

    }, {
      key: 'runValidation',
      value: function () {
        var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(values) {
          var customValidator, yup, yupError;
          return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  customValidator = customFormProps.validate(values);

                  if (!customFormProps.yup) {
                    _context2.next = 12;
                    break;
                  }

                  _context2.prev = 2;
                  yup = typeof customFormProps.yup === 'function' ? customFormProps.yup(this.props) : customFormProps.yup;
                  _context2.next = 6;
                  return yup.validate(values, { abortEarly: false });

                case 6:
                  _context2.next = 12;
                  break;

                case 8:
                  _context2.prev = 8;
                  _context2.t0 = _context2['catch'](2);
                  yupError = this.yupToFormErrors(_context2.t0);
                  return _context2.abrupt('return', (0, _assign2.default)({}, yupError, customValidator));

                case 12:
                  return _context2.abrupt('return', customValidator);

                case 13:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[2, 8]]);
        }));

        function runValidation(_x3) {
          return _ref2.apply(this, arguments);
        }

        return runValidation;
      }()

      // Convert errors from YUP to form format

    }, {
      key: 'yupToFormErrors',
      value: function yupToFormErrors(yupError) {
        var errors = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(yupError.inner), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var err = _step.value;

            if (err.path) {
              errors[err.path] = err.message;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return errors;
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Form, (0, _extends3.default)({}, this.props, this.state, {
          setValues: this.setValues,
          setErrors: this.setErrors,
          removeError: this.removeError,
          handleOnChange: this.handleOnChange,
          handleSubmit: this.handleSubmit,
          handleKeyPress: this.handleKeyPress
        }));
      }
    }]);
    return WithForm;
  }(_react2.default.Component);

  WithForm.propTypes = {
    dispatch: _propTypes2.default.func.isRequired
  };

  return WithForm;
}