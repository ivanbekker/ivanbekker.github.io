'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJss = require('react-jss');

var _reactJss2 = _interopRequireDefault(_reactJss);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

var _reactClickOutside = require('react-click-outside');

var _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _utils = require('../utils/utils');

var _utils2 = _interopRequireDefault(_utils);

var _Autocomplete = require('./Autocomplete.style');

var _Autocomplete2 = _interopRequireDefault(_Autocomplete);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Autocomplete = (_dec = (0, _reactJss2.default)(_Autocomplete2.default), _dec(_class = (0, _reactClickOutside2.default)(_class = function (_PureComponent) {
  (0, _inherits3.default)(Autocomplete, _PureComponent);

  function Autocomplete(props) {
    (0, _classCallCheck3.default)(this, Autocomplete);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Autocomplete.__proto__ || (0, _getPrototypeOf2.default)(Autocomplete)).call(this, props));

    _this.state = {
      selected: !!props.value,
      passShow: false,
      focus: false,
      error: !!props.value,
      activeItem: -1
    };
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.handleMouseMove = _this.handleMouseMove.bind(_this);
    _this.handleClickRightText = _this.handleClickRightText.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Autocomplete, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;

      if (autoFocus) this.handleFocus();
    }

    // Handler for click outside of component

  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(e) {
      if (this.txtEl && this.txtEl.contains(e.target)) return;
      var _props = this.props,
          id = _props.id,
          value = _props.value,
          error = _props.error,
          onBlur = _props.onBlur,
          onChange = _props.onChange;

      if (!value && !this.input.value) {
        this.setState({ selected: false });
      }
      this.setState({ focus: false });
      if (value && value !== value.trim()) {
        onChange({ id: id, value: value.trim(), error: error });
      }
      onBlur();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        this.setState({ selected: !!nextProps.value });
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      var _props2 = this.props,
          visibility = _props2.visibility,
          onFocus = _props2.onFocus;

      if (visibility !== 'visible') return;
      this.input.focus();
      this.setState({ selected: true, focus: true });
      onFocus(this.props.id);
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      var _props3 = this.props,
          id = _props3.id,
          onChange = _props3.onChange;

      var _formatAndCheck = this.formatAndCheck(e.target.value),
          error = _formatAndCheck.error,
          value = _formatAndCheck.value;

      onChange({ id: id, value: value, error: error });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      var _props4 = this.props,
          value = _props4.value,
          onKeyDown = _props4.onKeyDown;

      var hotKeys = ['ArrowDown', 'ArrowUp', 'Enter'];
      // delete
      if (e.key === 'Backspace' && value === '') {
        this.removeChip();
      }
      if (hotKeys.indexOf(e.key) !== -1) {
        this.selectionUsingButtons(e);
      }
      onKeyDown(e);
    }
  }, {
    key: 'handleClickRightText',
    value: function handleClickRightText() {
      var onClickRightText = this.props.onClickRightText;

      onClickRightText();
    }
  }, {
    key: 'removeChip',
    value: function removeChip() {
      var children = this.props.chipsItems();
      if (children.length === 0) return;
      this['chipRef' + (children.length - 1)].props.closeClick();
    }
  }, {
    key: 'selectionUsingButtons',
    value: function selectionUsingButtons(e) {
      e.preventDefault();

      var children = this.props.searchResult();
      if (!children) return;

      var childrenList = children.props.children;
      var activeItem = this.state.activeItem;

      var newActiveItem = activeItem;

      if (e.key === 'ArrowDown' && activeItem < childrenList.length - 1) {
        newActiveItem += 1;
      } else if (e.key === 'ArrowUp' && activeItem > 0) {
        newActiveItem -= 1;
      }

      if (!childrenList[newActiveItem]) return;
      var item = this['itemRef' + childrenList[newActiveItem].props.id];

      if (e.key === 'Enter') {
        var _item$props = item.props,
            id = _item$props.id,
            value = _item$props.value,
            avatar = _item$props.avatar,
            visibility = _item$props.visibility;

        if (visibility === 'disabled') return;
        item.props.onClick({ id: id, value: value, avatar: avatar, error: false });
        newActiveItem = 0;
      }

      this.setState({
        activeItem: newActiveItem
      }, this.scrollList(_reactDom2.default.findDOMNode(item)));
    }
  }, {
    key: 'scrollList',
    value: function scrollList(item) {
      var container = _reactDom2.default.findDOMNode(this.containerSearchList);
      var heightContainer = container.offsetHeight;
      var heightItem = item.offsetHeight;
      var scrollPosition = item.offsetTop < heightContainer - heightItem * 3 ? 0 : item.offsetTop - (heightContainer - heightItem * 3);

      _utils2.default.scrollTo(container, scrollPosition, 100);
    }
  }, {
    key: 'formatAndCheck',
    value: function formatAndCheck(value) {
      var error = false;
      var _props5 = this.props,
          length = _props5.length,
          required = _props5.required;

      if (!value.length) {
        return { error: error, value: value };
      }
      // Restriction by string length
      if (length && value.length >= length) {
        value = value.substr(0, length);
      }
      if (required && (!value || !value.length)) {
        error = true;
      }
      return { error: error, value: value };
    }
  }, {
    key: 'renderChips',
    value: function renderChips(chipsItems) {
      var _this2 = this;

      var children = chipsItems();
      if (!children) return null;
      return _react2.default.Children.map(children, function (child, index) {
        return _react2.default.cloneElement(child, {
          ref: function ref(el) {
            _this2['chipRef' + index] = el;
          }
        });
      });
    }
  }, {
    key: 'renderRightText',
    value: function renderRightText(text, classes) {
      if (!text) return null;
      return _react2.default.createElement(_Label2.default, { value: text, className: classes, onClick: this.handleClickRightText });
    }
  }, {
    key: 'renderHelperText',
    value: function renderHelperText(helperText, classes) {
      if (!helperText) return null;
      return _react2.default.createElement(
        'div',
        { className: classes },
        helperText
      );
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove() {
      var activeItem = this.state.activeItem;

      if (activeItem !== -1) {
        this.setState({
          activeItem: -1
        });
      }
    }
  }, {
    key: 'renderSearchList',
    value: function renderSearchList(searchTitle, searchResult, classes) {
      var _this3 = this;

      var children = searchResult();
      var title = searchTitle();
      var index = this.state.activeItem;
      if (!children) return null;
      return _react2.default.createElement(
        'div',
        {
          className: (0, _clsx2.default)(classes, 'searchList'),
          onMouseMove: this.handleMouseMove,
          ref: function ref(el) {
            _this3.containerSearchList = el;
          }
        },
        title,
        _react2.default.Children.map(children.props.children, function (child) {
          var activeItem = children.props.children[index] ? children.props.children[index].props.id : null;

          return _react2.default.cloneElement(child, {
            ref: function ref(el) {
              _this3['itemRef' + child.props.id] = el;
            },
            activeItem: activeItem
          });
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props6 = this.props,
          classes = _props6.classes,
          className = _props6.className,
          id = _props6.id,
          value = _props6.value,
          visibility = _props6.visibility,
          label = _props6.label,
          error = _props6.error,
          placeholder = _props6.placeholder,
          helperText = _props6.helperText,
          rightText = _props6.rightText,
          onKeyUp = _props6.onKeyUp,
          onKeyPress = _props6.onKeyPress,
          chipsItems = _props6.chipsItems,
          searchTitle = _props6.searchTitle,
          searchResult = _props6.searchResult;
      var _state = this.state,
          focus = _state.focus,
          selected = _state.selected;

      var tabIndex = visibility !== 'visible' ? -1 : 0;
      var txtClasses = (0, _clsx2.default)(className, classes.txt, { error: !!error }, { hidden: visibility === 'hidden' }, { disabled: visibility === 'disabled' }, { focus: !!focus }, { selected: !!selected || chipsItems });
      var helperTextClasses = (0, _clsx2.default)(classes.helperText, { error: error });
      var searchListClasses = classes.searchList;
      var rightTextClasses = (0, _clsx2.default)(classes.rightText, 'rightText');
      var chipsClasses = 'chipsContainer';

      return _react2.default.createElement(
        'div',
        {
          id: id,
          className: txtClasses,
          ref: function ref(el) {
            _this4.txtEl = el;
          },
          onClick: this.handleFocus
        },
        _react2.default.createElement(
          'div',
          { className: classes.label },
          label
        ),
        _react2.default.createElement(
          'div',
          { className: classes.field },
          _react2.default.createElement(
            'div',
            { className: classes.fieldInput },
            this.renderChips(chipsItems, chipsClasses),
            _react2.default.createElement('input', {
              ref: function ref(el) {
                return _this4.input = el;
              },
              value: value,
              onFocus: this.handleFocus,
              onChange: this.handleChange,
              autoComplete: 'off',
              disabled: visibility === 'disabled',
              tabIndex: tabIndex,
              placeholder: placeholder,
              onKeyPress: onKeyPress,
              onKeyDown: this.handleKeyDown,
              onKeyUp: onKeyUp
            })
          ),
          this.renderRightText(rightText, rightTextClasses)
        ),
        this.renderHelperText(helperText, helperTextClasses),
        this.renderSearchList(searchTitle, searchResult, searchListClasses)
      );
    }
  }]);
  return Autocomplete;
}(_react.PureComponent)) || _class) || _class);


Autocomplete.defaultProps = {
  visibility: 'visible',
  error: false,
  chipsItems: null,
  searchResult: null,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onClickRightText: function onClickRightText() {},
  onKeyPress: function onKeyPress() {},
  onKeyUp: function onKeyUp() {},
  onKeyDown: function onKeyDown() {},
  searchTitle: function searchTitle() {}
};

Autocomplete.propTypes = {
  classes: _propTypes2.default.object,
  /** autocomplet's visibility */
  visibility: _propTypes2.default.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** Does autocomplet's's has an error */
  error: _propTypes2.default.bool.isRequired,
  /** autocomplet's helper text under input */
  helperText: _propTypes2.default.string,
  /** autocomplet's label */
  label: _propTypes2.default.string,
  /** Is autocomplete required? */
  required: _propTypes2.default.bool,
  /** autocomplet's value */
  value: _propTypes2.default.string,
  /** autocomplet's length */
  length: _propTypes2.default.number,
  /** autocomplet's right text */
  rightText: _propTypes2.default.string,
  /** placeholder */
  placeholder: _propTypes2.default.string,
  /** input autoFocus */
  autoFocus: _propTypes2.default.bool,
  /** additional external class name */
  className: _propTypes2.default.string,
  /** element id */
  id: _propTypes2.default.string,
  /** onChange callback */
  onChange: _propTypes2.default.func,
  /** onFocus callback */
  onFocus: _propTypes2.default.func,
  /** onBlur callback */
  onBlur: _propTypes2.default.func,
  /** onKeyPress callback */
  onKeyPress: _propTypes2.default.func,
  /** onKeyUp callback */
  onKeyUp: _propTypes2.default.func,
  /** onKeyDown callback */
  onKeyDown: _propTypes2.default.func,
  /** onClickRightIcon callback */
  onClickRightText: _propTypes2.default.func,
  /** chipsItems */
  chipsItems: _propTypes2.default.func,
  /** search Title */
  searchTitle: _propTypes2.default.func,
  /** searchResult */
  searchResult: _propTypes2.default.func
};

exports.default = Autocomplete;