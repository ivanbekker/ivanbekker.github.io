import React, {Component} from 'react';
import {storiesOf} from '@storybook/react';
import {text, select, boolean, number} from '@storybook/addon-knobs/react';
import TextField from '../src/components/TextField';
import infoDecorator from '../.storybook/customDecorators/infoDecorator';
import themeDecorator from '../.storybook/customDecorators/themeDecorator';
import iconsList from './helpers/iconList';
import Calendar from '../src/components/Calendar';
import Select from '../src/components/Select';
import {MenuItem} from '../src/components/Menu';
import forwardRef from '../src/components/HOC/forwardRef';

const stories = storiesOf('TextField', module);
infoDecorator(stories);
themeDecorator(stories);

const type = ['text', 'password', 'phone', 'email', 'int', 'float'];
const visibility = ['visible', 'hidden'];

function CalendarHOC() {
  return (
    <Calendar
      visibility={select('Visibility', visibility, 'visible')}
      value={{unix: 1527684182, timeZoneOffset: -180}}
      location={select('Location', ['en', 'other'])}
      time={boolean('Time', true)}
      onChange={(data) => console.log(data)}
    />
  );
}

stories
  .add('default',
    () => (
      <div>
        <TextField
          type={select('Type', type, 'text')}
          size={select('Size', ['small', 'medium', 'large'], 'medium')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
          label={text('Label', 'Label text')}
          value={text('Value', '')}
          error={boolean('Error', false)}
          helperText={text('helperText')}
          regexp={text('regexp')}
          length={number('length', 100)}
          leftIcon={select('leftIcon', iconsList)}
          rightIcon={select('rightIcon', iconsList)}
          placeholder={text('Placeholder', '')}
          autoFocus={boolean('autoFocus', false)}
          multiline={boolean('Multiline', false)}
          // inputRef={(el) => (console.log(el))}
          // onChange={(f) => console.log(f)}
          id="0"
        />
        <TextField
          type={select('Type', type, 'text')}
          size={select('Size', ['small', 'medium', 'large'], 'medium')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
          label={text('Label', 'Label text')}
          value={text('Value', '')}
          error={boolean('Error', false)}
          helperText={text('helperText')}
          regexp={text('regexp')}
          length={number('length', 100)}
          leftIcon={select('leftIcon', iconsList)}
          rightIcon={select('rightIcon', iconsList)}
          placeholder={text('Placeholder', '')}
          autoFocus={boolean('autoFocus', false)}
          multiline={boolean('Multiline', false)}
          // inputRef={(el) => (console.log(el))}
          // onChange={(f) => console.log(f)}
          id="1"
        />
        <TextField
          type={select('Type', type, 'text')}
          size={select('Size', ['small', 'medium', 'large'], 'medium')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
          label={text('Label', 'Label text')}
          value={text('Value', '')}
          error={boolean('Error', false)}
          helperText={text('helperText')}
          regexp={text('regexp')}
          length={number('length', 100)}
          leftIcon={select('leftIcon', iconsList)}
          rightIcon={select('rightIcon', iconsList)}
          placeholder={text('Placeholder', '')}
          autoFocus={boolean('autoFocus', false)}
          multiline={boolean('Multiline', false)}
          // inputRef={(el) => (console.log(el))}
          // onChange={(f) => console.log(f)}
          id="2"
        />
      </div>
    )
  );

stories
  .add('bordered',
    () => (
      <div>
        <TextField
          type={select('Type', type, 'text')}
          size={select('Size', ['small', 'medium', 'large'], 'medium')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
          label={text('Label', 'Label text')}
          value={text('Value', '')}
          error={boolean('Error', false)}
          helperText={text('helperText', 'helperText')}
          regexp={text('regexp')}
          length={number('length', 100)}
          leftIcon={select('leftIcon', iconsList)}
          rightIcon={select('rightIcon', iconsList)}
          placeholder={text('Placeholder', '')}
          autoFocus={boolean('autoFocus', false)}
          multiline={boolean('Multiline', false)}
          bordered={boolean('Bordered', true)}
          id="0"
        />
        <TextField
          type={select('Type', type, 'text')}
          size={select('Size', ['small', 'medium', 'large'], 'medium')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
          label={text('Label', 'Label text')}
          value={text('Value', '')}
          error={boolean('Error', false)}
          helperText={text('helperText', 'helperText')}
          regexp={text('regexp')}
          length={number('length', 100)}
          leftIcon={select('leftIcon', iconsList)}
          rightIcon={select('rightIcon', iconsList)}
          placeholder={text('Placeholder', '')}
          autoFocus={boolean('autoFocus', false)}
          multiline={boolean('Multiline', false)}
          bordered={boolean('Bordered', true)}
          id="1"
        />
      </div>
    )
  );

stories
  .add('calendar',
    () => (
      <div>
        <TextField
          type={select('Type', type, 'text')}
          size={select('Size', ['small', 'medium', 'large'], 'medium')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'], 'visible')}
          label={text('Label', 'Label text')}
          value={text('Value', 'test field')}
          error={boolean('Error', false)}
          helperText={text('helperText')}
          regexp={text('regexp')}
          length={number('length', 100)}
          leftIcon={select('leftIcon', iconsList)}
          rightIcon={select('rightIcon', iconsList)}
          placeholder={text('Placeholder', '')}
          autoFocus={boolean('autoFocus', false)}
          calendar={CalendarHOC}
          onBlur={() => console.log('onBlur')}
        />
        <Select
          id="select2"
          label={text('Label', 'Label')}
          value={text('Value', '')}
          openType={select('Type', ['', 'top'], '')}
          error={boolean('Error', false)}
          helperText={text('helperText', 'Empty value is not allowed')}
          visibility={select('Visibility', ['visible', 'disabled', 'hidden'])}
        >
          <MenuItem
            label={'MenuItem1'}
            value="1"
          />
          <MenuItem
            label={'MenuItem2'}
            value="2"
          />
        </Select>
      </div>
    )
  );


const ContentEditableRef = forwardRef(TextField);

class ContentEdit extends Component {
  constructor(props) {
    super(props);
    this.state = {
      value: ''
    };
    this.ref = React.createRef();
  }

  handleChange({value}) {
    console.log(this.ref);
    this.setState({value});
  }

  render() {
    return (
      <div className="App">
        <ContentEditableRef
          id="textEdit"
          ref={this.ref}
          type="text"
          value={this.state.value}
          label="Test contenteditable"
          placeholder="some text"
          onChange={::this.handleChange}
          multiline={true}
        />
      </div>
    );
  }
}


stories
  .add('contenteditable',
    () => (<ContentEdit/>)
  );
