import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import Label from '../Label';
import Icon from '../Icon';
import Menu from '../Menu';
import styles from './Button.style';

@injectSheet(styles)
class Button extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {menu: false};
    this.handleMenuClose = ::this.handleMenuClose;
    this.handleClick = ::this.handleClick;
    this.handleKeyPress = ::this.handleKeyPress;
  }

  handleClick(e) {
    const {children, visibility, onKeyPress, onClick} = this.props;
    if (visibility !== 'visible') return;
    if (children) {
      this.setState({menu: true});
    }
    if (e.type === 'keypress') {
      onKeyPress(e);
    } else {
      onClick(e);
    }
  }

  handleKeyPress(e) {
    this.handleClick(e);
  }

  handleMenuClose() {
    this.setState({menu: false});
  }

  renderMenu() {
    const {classes, children} = this.props;
    if (!children) return null;
    const {menu} = this.state;
    const visibility = menu ? 'visible' : 'hidden';
    return (
      <Menu className={cn(classes.menu)} visibility={visibility} onClose={this.handleMenuClose}>
        {children}
      </Menu>
    );
  }

  getIconSize(label, size) {
    let iconSize;
    if (label) {
      iconSize = size === 'large' ? 'medium' : 'small';
    } else {
      iconSize = size === 'small' ? 'small' : 'medium';
    }
    return iconSize;
  }

  render() {
    const {
      id,
      classes,
      className,
      type,
      size,
      label,
      icon,
      error,
      visibility,
      onMouseEnter,
      onMouseLeave,
      rounded,
      iconAfter,
    } = this.props;

    const btnClasses = cn(
      className,
      classes.button,
      classes[type],
      classes[size],
      {error: !!error},
      {hidden: visibility === 'hidden'},
      {disabled: visibility === 'disabled'},
      {hideLabel: !label || !label.length},
      {hideIcon: !icon || !icon.length},
      {hideIconAfter: !iconAfter || !iconAfter.length},
      {rounded},
    );
    const iconSize = this.getIconSize(label, size);
    const tabIndex = visibility !== 'visible' ? -1 : 0;
    return (
      <div
        ref={el => (this.btn = el)}
        id={id}
        className={btnClasses}
        onClick={this.handleClick}
        onMouseEnter={onMouseEnter}
        onMouseLeave={onMouseLeave}
        onKeyPress={this.handleKeyPress}
        tabIndex={tabIndex}
      >
        {icon ? <Icon type={icon} size={iconSize} color="currentColor"/> : null}
        <Label value={label} fontSize="medium" textColor="inherit" fontWeight="semibold"/>
        {iconAfter ? <Icon type={iconAfter} size={iconSize} color="currentColor"/> : null}
        {this.renderMenu()}
      </div>
    );
  }
}

Button.defaultProps = {
  type: 'default',
  size: 'medium',
  visibility: 'visible',
  error: false,
  onClick: () => {
  },
  onKeyPress: () => {
  },
  onMouseEnter: () => {
  },
  onMouseLeave: () => {
  },
  rounded: false,
};

Button.propTypes = {
  classes: PropTypes.object,
  /** button type */
  type: PropTypes.oneOf(['default', 'text', 'secondary']),
  /** button size */
  size: PropTypes.oneOf(['small', 'smallplus', 'medium', 'large']),
  /** button visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']),
  /** Does button has an error */
  error: PropTypes.bool,
  /** button label */
  label: PropTypes.string,
  /** Icon element */
  icon: PropTypes.string,
  /** additional external class name */
  className: PropTypes.string,
  /** element id */
  id: PropTypes.string,
  /** callback onClick */
  onClick: PropTypes.func,
  /** callback onKeyPress */
  onKeyPress: PropTypes.func,
  /** callback onMouseEnter */
  onMouseEnter: PropTypes.func,
  /** callback onMouseLeave */
  onMouseLeave: PropTypes.func,
  /** Menu Items */
  children: PropTypes.node,
  /** Rounded corners */
  rounded: PropTypes.bool,
  /** Icon element after label */
  iconAfter: PropTypes.string,
};

export default Button;
