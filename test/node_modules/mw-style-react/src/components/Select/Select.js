import PropTypes from 'prop-types';
import React, {PureComponent} from 'react';
import injectSheet from 'react-jss';
import cn from 'clsx';
import styles from './Select.style';
import TextField from '../TextField';
import Menu from '../Menu';

@injectSheet(styles)
class Select extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      selected: false,
      activeTitle: null,
    };
    this.handleMenuItemClick = ::this.handleMenuItemClick;
    this.handleMenuClose = ::this.handleMenuClose;
    this.handleTextFieldFocus = ::this.handleTextFieldFocus;
  }

  componentWillMount() {
    this.setValue();
  }

  componentWillReceiveProps(nextProps) {
    this.setValue(nextProps.value);
  }

  setValue(value) {
    let find;
    const {children} = this.props;
    value = typeof value === 'undefined' ? this.props.value : value;
    if (!value || !value.length) {
      this.setState({activeTitle: null});
      return;
    }
    React.Children.forEach(children, child => {
      const childValue = child.props.value || '';
      const childValueF = childValue.toString().toLowerCase();
      const valueF = value.toString().toLowerCase();
      if (childValueF === valueF) {
        find = child;
      }
    });
    if (!find) {
      this.setState({activeTitle: value});
      return;
    }
    this.setState({activeTitle: find.props.label});
  }

  handleMenuItemClick({value}) {
    let error = false;
    const {id, required} = this.props;
    if (required && typeof value === 'undefined') {
      error = true;
    }
    this.setValue(value);
    this.props.onChange({id, value, error});
    this.setState({selected: false});
  }

  handleTextFieldFocus() {
    this.setState({selected: true});
  }

  handleTextFieldBlur() {
    this.setState({selected: false});
  }

  handleMenuClose() {
    this.setState({selected: false});
  }

  renderTextField(classes, label, error, helperText, visibility, bordered) {
    return (
      <TextField
        className={classes.edit}
        label={label}
        error={error}
        helperText={helperText}
        value={this.state.activeTitle || ''}
        rightIcon="dropdown"
        onFocus={this.handleTextFieldFocus}
        visibility={visibility}
        bordered={bordered}
      />
    );
  }

  renderMenu(id, classes, children, visibility) {
    if (!this.state.selected || visibility === 'disabled') return null;
    return (
      <Menu
        id={id}
        className={cn(classes.menu)}
        openType={this.props.openType}
        onClick={this.handleMenuItemClick}
        onClose={this.handleMenuClose}
        activeItem={this.props.value}
      >
        {children}
      </Menu>
    );
  }

  render() {
    const {
      classes,
      id,
      className,
      visibility,
      label,
      error,
      helperText,
      children,
      bordered
    } = this.props;

    return (
      <div id={id} className={cn(className, classes.select)}>
        {this.renderTextField(classes, label, error, helperText, visibility, bordered)}
        {this.renderMenu(id, classes, children, visibility)}
      </div>
    );
  }
}

Select.defaultProps = {
  children: null,
  id: null,
  visibility: 'visible',
  error: false,
  bordered: false,
  onChange: () => {
  },
};

Select.propTypes = {
  // TODO - добавить вид с бордерами
  classes: PropTypes.object,
  /** select's visibility */
  visibility: PropTypes.oneOf(['visible', 'disabled', 'hidden']).isRequired,
  /** additional external class name */
  className: PropTypes.string,
  /** select's options */
  children: PropTypes.node.isRequired,
  /** select's id */
  id: PropTypes.string,
  /** select's label */
  label: PropTypes.string,
  /** select's value */
  value: PropTypes.string,
  /** Is select field required? */
  required: PropTypes.bool,
  /** onChange callback */
  onChange: PropTypes.func,
  /** select's helperText */
  helperText: PropTypes.string,
  /** Does select has an error */
  error: PropTypes.bool.isRequired,
  /** Type open menu */
  openType: PropTypes.string,
  /** bordered field */
  bordered: PropTypes.bool,
};

export default Select;
